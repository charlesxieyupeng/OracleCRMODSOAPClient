
/**
 * UserStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.4.1  Built on : Aug 19, 2008 (10:13:39 LKT)
 */
        package crmondemand;

        

        /*
        *  UserStub java implementation
        */

        
        public class UserStub extends org.apache.axis2.client.Stub
        {
        protected org.apache.axis2.description.AxisOperation[] _operations;

        //hashmaps to keep the fault mapping
        private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
        private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
        private java.util.HashMap faultMessageMap = new java.util.HashMap();

        private static int counter = 0;

        private static synchronized String getUniqueSuffix(){
            // reset the counter if it is greater than 99999
            if (counter > 99999){
                counter = 0;
            }
            counter = counter + 1; 
            return Long.toString(System.currentTimeMillis()) + "_" + counter;
        }

    
    private void populateAxisService() throws org.apache.axis2.AxisFault {

     //creating the Service with a unique name
     _service = new org.apache.axis2.description.AxisService("User" + getUniqueSuffix());
     addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[4];
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004", "UserQueryPage"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[0]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004", "UserInsert"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[1]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004", "UserExecute"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[2]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004", "UserUpdate"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[3]=__operation;
            
        
        }

    //populates the faults
    private void populateFaults(){
         


    }

    /**
      *Constructor that takes in a configContext
      */

    public UserStub(org.apache.axis2.context.ConfigurationContext configurationContext,
       java.lang.String targetEndpoint)
       throws org.apache.axis2.AxisFault {
         this(configurationContext,targetEndpoint,false);
   }


   /**
     * Constructor that takes in a configContext  and useseperate listner
     */
   public UserStub(org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
         //To populate AxisService
         populateAxisService();
         populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,_service);
        
	
        configurationContext = _serviceClient.getServiceContext().getConfigurationContext();

        _serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
        
    
    }

    /**
     * Default Constructor
     */
    public UserStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault {
        
                    this(configurationContext,"https://secure-ausomxoua.crmondemand.com/Services/Integration" );
                
    }

    /**
     * Default Constructor
     */
    public UserStub() throws org.apache.axis2.AxisFault {
        
                    this("https://secure-ausomxoua.crmondemand.com/Services/Integration" );
                
    }

    /**
     * Constructor taking the target endpoint
     */
    public UserStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(null,targetEndpoint);
    }



        
                    /**
                     * Auto generated method signature
                     * 
                     * @see crmondemand.User#UserQueryPage
                     * @param userQueryPage_Input0
                    
                     */

                    

                            public  crmondemand.UserStub.UserQueryPage_Output UserQueryPage(

                            crmondemand.UserStub.UserQueryPage_Input userQueryPage_Input0)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
              _operationClient.getOptions().setAction("document/urn:crmondemand/ws/ecbs/user/10/2004:UserQueryPage");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    userQueryPage_Input0,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                    "UserQueryPage")));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             crmondemand.UserStub.UserQueryPage_Output.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (crmondemand.UserStub.UserQueryPage_Output)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(faultElt.getQName())){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex=
                                (java.lang.Exception) exceptionClass.newInstance();
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see crmondemand.User#startUserQueryPage
                    * @param userQueryPage_Input0
                
                */
                public  void startUserQueryPage(

                 crmondemand.UserStub.UserQueryPage_Input userQueryPage_Input0,

                  final crmondemand.UserCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
             _operationClient.getOptions().setAction("document/urn:crmondemand/ws/ecbs/user/10/2004:UserQueryPage");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    userQueryPage_Input0,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                    "UserQueryPage")));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         crmondemand.UserStub.UserQueryPage_Output.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultUserQueryPage(
                                        (crmondemand.UserStub.UserQueryPage_Output)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorUserQueryPage(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorUserQueryPage(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserQueryPage(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserQueryPage(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserQueryPage(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserQueryPage(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserQueryPage(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserQueryPage(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserQueryPage(f);
                                            }
									    } else {
										    callback.receiveErrorUserQueryPage(f);
									    }
									} else {
									    callback.receiveErrorUserQueryPage(f);
									}
								} else {
								    callback.receiveErrorUserQueryPage(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorUserQueryPage(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[0].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[0].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see crmondemand.User#UserInsert
                     * @param userInsert_Input2
                    
                     */

                    

                            public  crmondemand.UserStub.UserInsert_Output UserInsert(

                            crmondemand.UserStub.UserInsert_Input userInsert_Input2)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
              _operationClient.getOptions().setAction("document/urn:crmondemand/ws/ecbs/user/10/2004:UserInsert");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    userInsert_Input2,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                    "UserInsert")));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             crmondemand.UserStub.UserInsert_Output.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (crmondemand.UserStub.UserInsert_Output)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(faultElt.getQName())){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex=
                                (java.lang.Exception) exceptionClass.newInstance();
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see crmondemand.User#startUserInsert
                    * @param userInsert_Input2
                
                */
                public  void startUserInsert(

                 crmondemand.UserStub.UserInsert_Input userInsert_Input2,

                  final crmondemand.UserCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
             _operationClient.getOptions().setAction("document/urn:crmondemand/ws/ecbs/user/10/2004:UserInsert");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    userInsert_Input2,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                    "UserInsert")));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         crmondemand.UserStub.UserInsert_Output.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultUserInsert(
                                        (crmondemand.UserStub.UserInsert_Output)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorUserInsert(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorUserInsert(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserInsert(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserInsert(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserInsert(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserInsert(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserInsert(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserInsert(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserInsert(f);
                                            }
									    } else {
										    callback.receiveErrorUserInsert(f);
									    }
									} else {
									    callback.receiveErrorUserInsert(f);
									}
								} else {
								    callback.receiveErrorUserInsert(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorUserInsert(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[1].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[1].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see crmondemand.User#UserExecute
                     * @param userExecute_Input4
                    
                     */

                    

                            public  crmondemand.UserStub.UserExecute_Output UserExecute(

                            crmondemand.UserStub.UserExecute_Input userExecute_Input4)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
              _operationClient.getOptions().setAction("document/urn:crmondemand/ws/ecbs/user/10/2004:UserExecute");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    userExecute_Input4,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                    "UserExecute")));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             crmondemand.UserStub.UserExecute_Output.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (crmondemand.UserStub.UserExecute_Output)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(faultElt.getQName())){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex=
                                (java.lang.Exception) exceptionClass.newInstance();
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see crmondemand.User#startUserExecute
                    * @param userExecute_Input4
                
                */
                public  void startUserExecute(

                 crmondemand.UserStub.UserExecute_Input userExecute_Input4,

                  final crmondemand.UserCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
             _operationClient.getOptions().setAction("document/urn:crmondemand/ws/ecbs/user/10/2004:UserExecute");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    userExecute_Input4,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                    "UserExecute")));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         crmondemand.UserStub.UserExecute_Output.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultUserExecute(
                                        (crmondemand.UserStub.UserExecute_Output)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorUserExecute(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorUserExecute(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserExecute(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserExecute(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserExecute(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserExecute(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserExecute(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserExecute(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserExecute(f);
                                            }
									    } else {
										    callback.receiveErrorUserExecute(f);
									    }
									} else {
									    callback.receiveErrorUserExecute(f);
									}
								} else {
								    callback.receiveErrorUserExecute(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorUserExecute(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[2].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[2].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see crmondemand.User#UserUpdate
                     * @param userUpdate_Input6
                    
                     */

                    

                            public  crmondemand.UserStub.UserUpdate_Output UserUpdate(

                            crmondemand.UserStub.UserUpdate_Input userUpdate_Input6)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
              _operationClient.getOptions().setAction("document/urn:crmondemand/ws/ecbs/user/10/2004:UserUpdate");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    userUpdate_Input6,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                    "UserUpdate")));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             crmondemand.UserStub.UserUpdate_Output.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (crmondemand.UserStub.UserUpdate_Output)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(faultElt.getQName())){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex=
                                (java.lang.Exception) exceptionClass.newInstance();
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see crmondemand.User#startUserUpdate
                    * @param userUpdate_Input6
                
                */
                public  void startUserUpdate(

                 crmondemand.UserStub.UserUpdate_Input userUpdate_Input6,

                  final crmondemand.UserCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
             _operationClient.getOptions().setAction("document/urn:crmondemand/ws/ecbs/user/10/2004:UserUpdate");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    userUpdate_Input6,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                    "UserUpdate")));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         crmondemand.UserStub.UserUpdate_Output.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultUserUpdate(
                                        (crmondemand.UserStub.UserUpdate_Output)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorUserUpdate(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorUserUpdate(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserUpdate(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserUpdate(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserUpdate(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserUpdate(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserUpdate(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserUpdate(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorUserUpdate(f);
                                            }
									    } else {
										    callback.receiveErrorUserUpdate(f);
									    }
									} else {
									    callback.receiveErrorUserUpdate(f);
									}
								} else {
								    callback.receiveErrorUserUpdate(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorUserUpdate(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[3].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[3].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                


       /**
        *  A utility method that copies the namepaces from the SOAPEnvelope
        */
       private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env){
        java.util.Map returnMap = new java.util.HashMap();
        java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
        while (namespaceIterator.hasNext()) {
            org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
            returnMap.put(ns.getPrefix(),ns.getNamespaceURI());
        }
       return returnMap;
    }

    
    
    private javax.xml.namespace.QName[] opNameArray = null;
    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        

        if (opNameArray == null) {
            return false;
        }
        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;   
            }
        }
        return false;
    }
     //https://secure-ausomxoua.crmondemand.com/Services/Integration
        public static class UserInsert_Output
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:crmondemand/ws/ecbs/user/10/2004",
                "UserInsert_Output",
                "ns3");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:crmondemand/ws/ecbs/user/10/2004")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ListOfUser
                        */

                        
                                    protected ListOfUserData localListOfUser ;
                                

                           /**
                           * Auto generated getter method
                           * @return ListOfUserData
                           */
                           public  ListOfUserData getListOfUser(){
                               return localListOfUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfUser
                               */
                               public void setListOfUser(ListOfUserData param){
                            
                                            this.localListOfUser=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UserInsert_Output.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:crmondemand/ws/ecbs/user/10/2004");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":UserInsert_Output",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "UserInsert_Output",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localListOfUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                            }
                                           localListOfUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser"),
                                               factory,xmlWriter);
                                        
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ListOfUser"));
                            
                            
                                    if (localListOfUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                    }
                                    elementList.add(localListOfUser);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UserInsert_Output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UserInsert_Output object =
                new UserInsert_Output();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"UserInsert_Output".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UserInsert_Output)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser").equals(reader.getName())){
                                
                                                object.setListOfUser(ListOfUserData.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ListOfDelegatedFromUserQuery
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ListOfDelegatedFromUserQuery
                Namespace URI = urn:/crmondemand/xml/User/Query
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Query")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for DelegatedFromUser
                        */

                        
                                    protected DelegatedFromUserQuery localDelegatedFromUser ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDelegatedFromUserTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return DelegatedFromUserQuery
                           */
                           public  DelegatedFromUserQuery getDelegatedFromUser(){
                               return localDelegatedFromUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DelegatedFromUser
                               */
                               public void setDelegatedFromUser(DelegatedFromUserQuery param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDelegatedFromUserTracker = true;
                                       } else {
                                          localDelegatedFromUserTracker = false;
                                              
                                       }
                                   
                                            this.localDelegatedFromUser=param;
                                    

                               }
                            

                        /**
                        * field for Pagesize
                        * This was an Attribute!
                        */

                        
                                    protected java.math.BigInteger localPagesize ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigInteger
                           */
                           public  java.math.BigInteger getPagesize(){
                               return localPagesize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Pagesize
                               */
                               public void setPagesize(java.math.BigInteger param){
                            
                                            this.localPagesize=param;
                                    

                               }
                            

                        /**
                        * field for Startrownum
                        * This was an Attribute!
                        */

                        
                                    protected java.math.BigInteger localStartrownum ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigInteger
                           */
                           public  java.math.BigInteger getStartrownum(){
                               return localStartrownum;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Startrownum
                               */
                               public void setStartrownum(java.math.BigInteger param){
                            
                                            this.localStartrownum=param;
                                    

                               }
                            

                        /**
                        * field for Recordcountneeded
                        * This was an Attribute!
                        */

                        
                                    protected boolean localRecordcountneeded ;
                                

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getRecordcountneeded(){
                               return localRecordcountneeded;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Recordcountneeded
                               */
                               public void setRecordcountneeded(boolean param){
                            
                                            this.localRecordcountneeded=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ListOfDelegatedFromUserQuery.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Query");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ListOfDelegatedFromUserQuery",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ListOfDelegatedFromUserQuery",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localPagesize != null){
                                        
                                                writeAttribute("",
                                                         "pagesize",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPagesize), xmlWriter);

                                            
                                      }
                                    
                                            if (localStartrownum != null){
                                        
                                                writeAttribute("",
                                                         "startrownum",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartrownum), xmlWriter);

                                            
                                      }
                                    
                                                   if (true) {
                                               
                                                writeAttribute("",
                                                         "recordcountneeded",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcountneeded), xmlWriter);

                                            
                                      }
                                     if (localDelegatedFromUserTracker){
                                            if (localDelegatedFromUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DelegatedFromUser cannot be null!!");
                                            }
                                           localDelegatedFromUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DelegatedFromUser"),
                                               factory,xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localDelegatedFromUserTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "DelegatedFromUser"));
                            
                            
                                    if (localDelegatedFromUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("DelegatedFromUser cannot be null!!");
                                    }
                                    elementList.add(localDelegatedFromUser);
                                }
                            attribList.add(
                            new javax.xml.namespace.QName("","pagesize"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPagesize));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","startrownum"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartrownum));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","recordcountneeded"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcountneeded));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ListOfDelegatedFromUserQuery parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ListOfDelegatedFromUserQuery object =
                new ListOfDelegatedFromUserQuery();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ListOfDelegatedFromUserQuery".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ListOfDelegatedFromUserQuery)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "pagesize"
                    java.lang.String tempAttribPagesize =
                        
                                reader.getAttributeValue(null,"pagesize");
                            
                   if (tempAttribPagesize!=null){
                         java.lang.String content = tempAttribPagesize;
                        
                                                 object.setPagesize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(tempAttribPagesize));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("pagesize");
                    
                    // handle attribute "startrownum"
                    java.lang.String tempAttribStartrownum =
                        
                                reader.getAttributeValue(null,"startrownum");
                            
                   if (tempAttribStartrownum!=null){
                         java.lang.String content = tempAttribStartrownum;
                        
                                                 object.setStartrownum(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(tempAttribStartrownum));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("startrownum");
                    
                    // handle attribute "recordcountneeded"
                    java.lang.String tempAttribRecordcountneeded =
                        
                                reader.getAttributeValue(null,"recordcountneeded");
                            
                   if (tempAttribRecordcountneeded!=null){
                         java.lang.String content = tempAttribRecordcountneeded;
                        
                                                 object.setRecordcountneeded(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribRecordcountneeded));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("recordcountneeded");
                    
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DelegatedFromUser").equals(reader.getName())){
                                
                                                object.setDelegatedFromUser(DelegatedFromUserQuery.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class UserQueryPage_Output
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:crmondemand/ws/ecbs/user/10/2004",
                "UserQueryPage_Output",
                "ns3");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:crmondemand/ws/ecbs/user/10/2004")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ListOfUser
                        */

                        
                                    protected ListOfUserData localListOfUser ;
                                

                           /**
                           * Auto generated getter method
                           * @return ListOfUserData
                           */
                           public  ListOfUserData getListOfUser(){
                               return localListOfUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfUser
                               */
                               public void setListOfUser(ListOfUserData param){
                            
                                            this.localListOfUser=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UserQueryPage_Output.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:crmondemand/ws/ecbs/user/10/2004");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":UserQueryPage_Output",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "UserQueryPage_Output",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localListOfUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                            }
                                           localListOfUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser"),
                                               factory,xmlWriter);
                                        
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ListOfUser"));
                            
                            
                                    if (localListOfUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                    }
                                    elementList.add(localListOfUser);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UserQueryPage_Output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UserQueryPage_Output object =
                new UserQueryPage_Output();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"UserQueryPage_Output".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UserQueryPage_Output)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser").equals(reader.getName())){
                                
                                                object.setListOfUser(ListOfUserData.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class UserInsert_Input
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:crmondemand/ws/ecbs/user/10/2004",
                "UserInsert_Input",
                "ns3");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:crmondemand/ws/ecbs/user/10/2004")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ListOfUser
                        */

                        
                                    protected ListOfUserData localListOfUser ;
                                

                           /**
                           * Auto generated getter method
                           * @return ListOfUserData
                           */
                           public  ListOfUserData getListOfUser(){
                               return localListOfUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfUser
                               */
                               public void setListOfUser(ListOfUserData param){
                            
                                            this.localListOfUser=param;
                                    

                               }
                            

                        /**
                        * field for LOVLanguageMode
                        */

                        
                                    protected java.lang.String localLOVLanguageMode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLOVLanguageModeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLOVLanguageMode(){
                               return localLOVLanguageMode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LOVLanguageMode
                               */
                               public void setLOVLanguageMode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLOVLanguageModeTracker = true;
                                       } else {
                                          localLOVLanguageModeTracker = false;
                                              
                                       }
                                   
                                            this.localLOVLanguageMode=param;
                                    

                               }
                            

                        /**
                        * field for ViewMode
                        */

                        
                                    protected java.lang.String localViewMode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localViewModeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getViewMode(){
                               return localViewMode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ViewMode
                               */
                               public void setViewMode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localViewModeTracker = true;
                                       } else {
                                          localViewModeTracker = false;
                                              
                                       }
                                   
                                            this.localViewMode=param;
                                    

                               }
                            

                        /**
                        * field for Echo
                        */

                        
                                    protected java.lang.String localEcho ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEchoTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEcho(){
                               return localEcho;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Echo
                               */
                               public void setEcho(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEchoTracker = true;
                                       } else {
                                          localEchoTracker = false;
                                              
                                       }
                                   
                                            this.localEcho=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UserInsert_Input.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:crmondemand/ws/ecbs/user/10/2004");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":UserInsert_Input",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "UserInsert_Input",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localListOfUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                            }
                                           localListOfUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser"),
                                               factory,xmlWriter);
                                         if (localLOVLanguageModeTracker){
                                    namespace = "urn:crmondemand/ws/ecbs/user/10/2004";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"LOVLanguageMode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"LOVLanguageMode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("LOVLanguageMode");
                                    }
                                

                                          if (localLOVLanguageMode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LOVLanguageMode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLOVLanguageMode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localViewModeTracker){
                                    namespace = "urn:crmondemand/ws/ecbs/user/10/2004";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ViewMode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ViewMode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ViewMode");
                                    }
                                

                                          if (localViewMode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ViewMode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localViewMode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEchoTracker){
                                    namespace = "urn:crmondemand/ws/ecbs/user/10/2004";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Echo", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Echo");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Echo");
                                    }
                                

                                          if (localEcho==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Echo cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEcho);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ListOfUser"));
                            
                            
                                    if (localListOfUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                    }
                                    elementList.add(localListOfUser);
                                 if (localLOVLanguageModeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                                      "LOVLanguageMode"));
                                 
                                        if (localLOVLanguageMode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLOVLanguageMode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LOVLanguageMode cannot be null!!");
                                        }
                                    } if (localViewModeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                                      "ViewMode"));
                                 
                                        if (localViewMode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localViewMode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ViewMode cannot be null!!");
                                        }
                                    } if (localEchoTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                                      "Echo"));
                                 
                                        if (localEcho != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEcho));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Echo cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UserInsert_Input parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UserInsert_Input object =
                new UserInsert_Input();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"UserInsert_Input".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UserInsert_Input)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser").equals(reader.getName())){
                                
                                                object.setListOfUser(ListOfUserData.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004","LOVLanguageMode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLOVLanguageMode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004","ViewMode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setViewMode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004","Echo").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEcho(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ListOfUserData
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ListOfUserData
                Namespace URI = urn:/crmondemand/xml/User/Data
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Data")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for User
                        * This was an Array!
                        */

                        
                                    protected UserData[] localUser ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return UserData[]
                           */
                           public  UserData[] getUser(){
                               return localUser;
                           }

                           
                        


                               
                              /**
                               * validate the array for User
                               */
                              protected void validateUser(UserData[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param User
                              */
                              public void setUser(UserData[] param){
                              
                                   validateUser(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localUserTracker = true;
                                          } else {
                                             localUserTracker = false;
                                                 
                                          }
                                      
                                      this.localUser=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param UserData
                             */
                             public void addUser(UserData param){
                                   if (localUser == null){
                                   localUser = new UserData[]{};
                                   }

                            
                                 //update the setting tracker
                                localUserTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localUser);
                               list.add(param);
                               this.localUser =
                             (UserData[])list.toArray(
                            new UserData[list.size()]);

                             }
                             

                        /**
                        * field for Lastpage
                        * This was an Attribute!
                        */

                        
                                    protected boolean localLastpage ;
                                

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getLastpage(){
                               return localLastpage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Lastpage
                               */
                               public void setLastpage(boolean param){
                            
                                            this.localLastpage=param;
                                    

                               }
                            

                        /**
                        * field for Recordcount
                        * This was an Attribute!
                        */

                        
                                    protected java.math.BigInteger localRecordcount ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigInteger
                           */
                           public  java.math.BigInteger getRecordcount(){
                               return localRecordcount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Recordcount
                               */
                               public void setRecordcount(java.math.BigInteger param){
                            
                                            this.localRecordcount=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ListOfUserData.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Data");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ListOfUserData",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ListOfUserData",
                           xmlWriter);
                   }

               
                   }
               
                                                   if (true) {
                                               
                                                writeAttribute("",
                                                         "lastpage",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastpage), xmlWriter);

                                            
                                      }
                                    
                                            if (localRecordcount != null){
                                        
                                                writeAttribute("",
                                                         "recordcount",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcount), xmlWriter);

                                            
                                      }
                                     if (localUserTracker){
                                       if (localUser!=null){
                                            for (int i = 0;i < localUser.length;i++){
                                                if (localUser[i] != null){
                                                 localUser[i].serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","User"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("User cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localUserTracker){
                             if (localUser!=null) {
                                 for (int i = 0;i < localUser.length;i++){

                                    if (localUser[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                          "User"));
                                         elementList.add(localUser[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("User cannot be null!!");
                                    
                             }

                        }
                            attribList.add(
                            new javax.xml.namespace.QName("","lastpage"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastpage));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","recordcount"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcount));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ListOfUserData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ListOfUserData object =
                new ListOfUserData();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ListOfUserData".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ListOfUserData)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "lastpage"
                    java.lang.String tempAttribLastpage =
                        
                                reader.getAttributeValue(null,"lastpage");
                            
                   if (tempAttribLastpage!=null){
                         java.lang.String content = tempAttribLastpage;
                        
                                                 object.setLastpage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribLastpage));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("lastpage");
                    
                    // handle attribute "recordcount"
                    java.lang.String tempAttribRecordcount =
                        
                                reader.getAttributeValue(null,"recordcount");
                            
                   if (tempAttribRecordcount!=null){
                         java.lang.String content = tempAttribRecordcount;
                        
                                                 object.setRecordcount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(tempAttribRecordcount));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("recordcount");
                    
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","User").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(UserData.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","User").equals(reader.getName())){
                                                                    list1.add(UserData.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setUser((UserData[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                UserData.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class QueryType
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = queryType
                Namespace URI = urn:/crmondemand/xml/User/Query
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Query")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for String
                        */

                        
                                    protected java.lang.String localString ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getString(){
                               return localString;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param String
                               */
                               public void setString(java.lang.String param){
                            
                                            this.localString=param;
                                    

                               }
                            

                            public java.lang.String toString(){
                                
                                        return localString.toString();
                                    
                            }
                        

                        /**
                        * field for Sortorder
                        * This was an Attribute!
                        */

                        
                                    protected java.lang.String localSortorder ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSortorder(){
                               return localSortorder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Sortorder
                               */
                               public void setSortorder(java.lang.String param){
                            
                                            this.localSortorder=param;
                                    

                               }
                            

                        /**
                        * field for Sortsequence
                        * This was an Attribute!
                        */

                        
                                    protected java.lang.String localSortsequence ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSortsequence(){
                               return localSortsequence;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Sortsequence
                               */
                               public void setSortsequence(java.lang.String param){
                            
                                            this.localSortsequence=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       QueryType.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Query");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":queryType",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "queryType",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localSortorder != null){
                                        
                                                writeAttribute("",
                                                         "sortorder",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSortorder), xmlWriter);

                                            
                                      }
                                    
                                            if (localSortsequence != null){
                                        
                                                writeAttribute("",
                                                         "sortsequence",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSortsequence), xmlWriter);

                                            
                                      }
                                    

                                          if (localString==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("string cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localString);
                                            
                                          }
                                    
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                                     
                                     elementList.add(org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT);
                                 
                                        if (localString != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localString));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("string cannot be null!!");
                                        }
                                    
                            attribList.add(
                            new javax.xml.namespace.QName("","sortorder"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSortorder));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","sortsequence"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSortsequence));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static QueryType fromString(java.lang.String value,
                                                    java.lang.String namespaceURI){
                    QueryType returnValue = new  QueryType();
                    
                            returnValue.setString(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                        

                    return returnValue;
                }

                public static QueryType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return QueryType.Factory.fromString(content,namespaceUri);
                    } else {
                       return QueryType.Factory.fromString(content,"");
                    }
                }

            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static QueryType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            QueryType object =
                new QueryType();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"queryType".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (QueryType)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "sortorder"
                    java.lang.String tempAttribSortorder =
                        
                                reader.getAttributeValue(null,"sortorder");
                            
                   if (tempAttribSortorder!=null){
                         java.lang.String content = tempAttribSortorder;
                        
                                                 object.setSortorder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribSortorder));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("sortorder");
                    
                    // handle attribute "sortsequence"
                    java.lang.String tempAttribSortsequence =
                        
                                reader.getAttributeValue(null,"sortsequence");
                            
                   if (tempAttribSortsequence!=null){
                         java.lang.String content = tempAttribSortsequence;
                        
                                                 object.setSortsequence(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribSortsequence));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("sortsequence");
                       
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    if (reader.isStartElement()  || reader.hasText()){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setString(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class UserUpdate_Input
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:crmondemand/ws/ecbs/user/10/2004",
                "UserUpdate_Input",
                "ns3");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:crmondemand/ws/ecbs/user/10/2004")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ListOfUser
                        */

                        
                                    protected ListOfUserData localListOfUser ;
                                

                           /**
                           * Auto generated getter method
                           * @return ListOfUserData
                           */
                           public  ListOfUserData getListOfUser(){
                               return localListOfUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfUser
                               */
                               public void setListOfUser(ListOfUserData param){
                            
                                            this.localListOfUser=param;
                                    

                               }
                            

                        /**
                        * field for LOVLanguageMode
                        */

                        
                                    protected java.lang.String localLOVLanguageMode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLOVLanguageModeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLOVLanguageMode(){
                               return localLOVLanguageMode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LOVLanguageMode
                               */
                               public void setLOVLanguageMode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLOVLanguageModeTracker = true;
                                       } else {
                                          localLOVLanguageModeTracker = false;
                                              
                                       }
                                   
                                            this.localLOVLanguageMode=param;
                                    

                               }
                            

                        /**
                        * field for ViewMode
                        */

                        
                                    protected java.lang.String localViewMode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localViewModeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getViewMode(){
                               return localViewMode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ViewMode
                               */
                               public void setViewMode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localViewModeTracker = true;
                                       } else {
                                          localViewModeTracker = false;
                                              
                                       }
                                   
                                            this.localViewMode=param;
                                    

                               }
                            

                        /**
                        * field for Echo
                        */

                        
                                    protected java.lang.String localEcho ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEchoTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEcho(){
                               return localEcho;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Echo
                               */
                               public void setEcho(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEchoTracker = true;
                                       } else {
                                          localEchoTracker = false;
                                              
                                       }
                                   
                                            this.localEcho=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UserUpdate_Input.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:crmondemand/ws/ecbs/user/10/2004");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":UserUpdate_Input",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "UserUpdate_Input",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localListOfUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                            }
                                           localListOfUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser"),
                                               factory,xmlWriter);
                                         if (localLOVLanguageModeTracker){
                                    namespace = "urn:crmondemand/ws/ecbs/user/10/2004";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"LOVLanguageMode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"LOVLanguageMode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("LOVLanguageMode");
                                    }
                                

                                          if (localLOVLanguageMode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LOVLanguageMode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLOVLanguageMode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localViewModeTracker){
                                    namespace = "urn:crmondemand/ws/ecbs/user/10/2004";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ViewMode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ViewMode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ViewMode");
                                    }
                                

                                          if (localViewMode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ViewMode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localViewMode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEchoTracker){
                                    namespace = "urn:crmondemand/ws/ecbs/user/10/2004";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Echo", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Echo");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Echo");
                                    }
                                

                                          if (localEcho==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Echo cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEcho);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ListOfUser"));
                            
                            
                                    if (localListOfUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                    }
                                    elementList.add(localListOfUser);
                                 if (localLOVLanguageModeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                                      "LOVLanguageMode"));
                                 
                                        if (localLOVLanguageMode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLOVLanguageMode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LOVLanguageMode cannot be null!!");
                                        }
                                    } if (localViewModeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                                      "ViewMode"));
                                 
                                        if (localViewMode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localViewMode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ViewMode cannot be null!!");
                                        }
                                    } if (localEchoTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                                      "Echo"));
                                 
                                        if (localEcho != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEcho));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Echo cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UserUpdate_Input parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UserUpdate_Input object =
                new UserUpdate_Input();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"UserUpdate_Input".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UserUpdate_Input)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser").equals(reader.getName())){
                                
                                                object.setListOfUser(ListOfUserData.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004","LOVLanguageMode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLOVLanguageMode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004","ViewMode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setViewMode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004","Echo").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEcho(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class UserDefaultBookPerTypeData
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = UserDefaultBookPerTypeData
                Namespace URI = urn:/crmondemand/xml/User/Data
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Data")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ModifiedDate
                        */

                        
                                    protected java.util.Calendar localModifiedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getModifiedDate(){
                               return localModifiedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedDate
                               */
                               public void setModifiedDate(java.util.Calendar param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedDateTracker = true;
                                       } else {
                                          localModifiedDateTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedDate=param;
                                    

                               }
                            

                        /**
                        * field for CreatedDate
                        */

                        
                                    protected java.util.Calendar localCreatedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getCreatedDate(){
                               return localCreatedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedDate
                               */
                               public void setCreatedDate(java.util.Calendar param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedDateTracker = true;
                                       } else {
                                          localCreatedDateTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedDate=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedById
                        */

                        
                                    protected java.lang.String localModifiedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifiedById(){
                               return localModifiedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedById
                               */
                               public void setModifiedById(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByIdTracker = true;
                                       } else {
                                          localModifiedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedById=param;
                                    

                               }
                            

                        /**
                        * field for CreatedById
                        */

                        
                                    protected java.lang.String localCreatedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedById(){
                               return localCreatedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedById
                               */
                               public void setCreatedById(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIdTracker = true;
                                       } else {
                                          localCreatedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedById=param;
                                    

                               }
                            

                        /**
                        * field for ModId
                        */

                        
                                    protected int localModId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getModId(){
                               return localModId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModId
                               */
                               public void setModId(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localModIdTracker = false;
                                              
                                       } else {
                                          localModIdTracker = true;
                                       }
                                   
                                            this.localModId=param;
                                    

                               }
                            

                        /**
                        * field for Id
                        */

                        
                                    protected java.lang.String localId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getId(){
                               return localId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Id
                               */
                               public void setId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIdTracker = true;
                                       } else {
                                          localIdTracker = false;
                                              
                                       }
                                   
                                            this.localId=param;
                                    

                               }
                            

                        /**
                        * field for BookId
                        */

                        
                                    protected java.lang.String localBookId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBookIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBookId(){
                               return localBookId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BookId
                               */
                               public void setBookId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBookIdTracker = true;
                                       } else {
                                          localBookIdTracker = false;
                                              
                                       }
                                   
                                            this.localBookId=param;
                                    

                               }
                            

                        /**
                        * field for BookName
                        */

                        
                                    protected java.lang.String localBookName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBookNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBookName(){
                               return localBookName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BookName
                               */
                               public void setBookName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBookNameTracker = true;
                                       } else {
                                          localBookNameTracker = false;
                                              
                                       }
                                   
                                            this.localBookName=param;
                                    

                               }
                            

                        /**
                        * field for AccessObjectId
                        */

                        
                                    protected java.lang.String localAccessObjectId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAccessObjectIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAccessObjectId(){
                               return localAccessObjectId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AccessObjectId
                               */
                               public void setAccessObjectId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAccessObjectIdTracker = true;
                                       } else {
                                          localAccessObjectIdTracker = false;
                                              
                                       }
                                   
                                            this.localAccessObjectId=param;
                                    

                               }
                            

                        /**
                        * field for AccessObjectName
                        */

                        
                                    protected java.lang.String localAccessObjectName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAccessObjectNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAccessObjectName(){
                               return localAccessObjectName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AccessObjectName
                               */
                               public void setAccessObjectName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAccessObjectNameTracker = true;
                                       } else {
                                          localAccessObjectNameTracker = false;
                                              
                                       }
                                   
                                            this.localAccessObjectName=param;
                                    

                               }
                            

                        /**
                        * field for IncludeSubBooks
                        */

                        
                                    protected boolean localIncludeSubBooks ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIncludeSubBooksTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getIncludeSubBooks(){
                               return localIncludeSubBooks;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IncludeSubBooks
                               */
                               public void setIncludeSubBooks(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localIncludeSubBooksTracker = false;
                                              
                                       } else {
                                          localIncludeSubBooksTracker = true;
                                       }
                                   
                                            this.localIncludeSubBooks=param;
                                    

                               }
                            

                        /**
                        * field for BookDescription
                        */

                        
                                    protected java.lang.String localBookDescription ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBookDescriptionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBookDescription(){
                               return localBookDescription;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BookDescription
                               */
                               public void setBookDescription(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBookDescriptionTracker = true;
                                       } else {
                                          localBookDescriptionTracker = false;
                                              
                                       }
                                   
                                            this.localBookDescription=param;
                                    

                               }
                            

                        /**
                        * field for ObjectName
                        */

                        
                                    protected java.lang.String localObjectName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localObjectNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getObjectName(){
                               return localObjectName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ObjectName
                               */
                               public void setObjectName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localObjectNameTracker = true;
                                       } else {
                                          localObjectNameTracker = false;
                                              
                                       }
                                   
                                            this.localObjectName=param;
                                    

                               }
                            

                        /**
                        * field for BookExternalSystemId
                        */

                        
                                    protected java.lang.String localBookExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBookExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBookExternalSystemId(){
                               return localBookExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BookExternalSystemId
                               */
                               public void setBookExternalSystemId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBookExternalSystemIdTracker = true;
                                       } else {
                                          localBookExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localBookExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFirstName
                        */

                        
                                    protected java.lang.String localUpdatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByFirstName(){
                               return localUpdatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFirstName
                               */
                               public void setUpdatedByFirstName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFirstNameTracker = true;
                                       } else {
                                          localUpdatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByLastName
                        */

                        
                                    protected java.lang.String localUpdatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByLastName(){
                               return localUpdatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByLastName
                               */
                               public void setUpdatedByLastName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByLastNameTracker = true;
                                       } else {
                                          localUpdatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByUserSignInId
                        */

                        
                                    protected java.lang.String localUpdatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByUserSignInId(){
                               return localUpdatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByUserSignInId
                               */
                               public void setUpdatedByUserSignInId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByUserSignInIdTracker = true;
                                       } else {
                                          localUpdatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByAlias
                        */

                        
                                    protected java.lang.String localUpdatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByAlias(){
                               return localUpdatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByAlias
                               */
                               public void setUpdatedByAlias(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByAliasTracker = true;
                                       } else {
                                          localUpdatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFullName
                        */

                        
                                    protected java.lang.String localUpdatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByFullName(){
                               return localUpdatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFullName
                               */
                               public void setUpdatedByFullName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFullNameTracker = true;
                                       } else {
                                          localUpdatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByIntegrationId
                        */

                        
                                    protected java.lang.String localUpdatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByIntegrationId(){
                               return localUpdatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByIntegrationId
                               */
                               public void setUpdatedByIntegrationId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByIntegrationIdTracker = true;
                                       } else {
                                          localUpdatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByExternalSystemId
                        */

                        
                                    protected java.lang.String localUpdatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByExternalSystemId(){
                               return localUpdatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByExternalSystemId
                               */
                               public void setUpdatedByExternalSystemId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByExternalSystemIdTracker = true;
                                       } else {
                                          localUpdatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByEMailAddr
                        */

                        
                                    protected java.lang.String localUpdatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByEMailAddr(){
                               return localUpdatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByEMailAddr
                               */
                               public void setUpdatedByEMailAddr(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByEMailAddrTracker = true;
                                       } else {
                                          localUpdatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFirstName
                        */

                        
                                    protected java.lang.String localCreatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByFirstName(){
                               return localCreatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFirstName
                               */
                               public void setCreatedByFirstName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFirstNameTracker = true;
                                       } else {
                                          localCreatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByLastName
                        */

                        
                                    protected java.lang.String localCreatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByLastName(){
                               return localCreatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByLastName
                               */
                               public void setCreatedByLastName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByLastNameTracker = true;
                                       } else {
                                          localCreatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByUserSignInId
                        */

                        
                                    protected java.lang.String localCreatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByUserSignInId(){
                               return localCreatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByUserSignInId
                               */
                               public void setCreatedByUserSignInId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByUserSignInIdTracker = true;
                                       } else {
                                          localCreatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByAlias
                        */

                        
                                    protected java.lang.String localCreatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByAlias(){
                               return localCreatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByAlias
                               */
                               public void setCreatedByAlias(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByAliasTracker = true;
                                       } else {
                                          localCreatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFullName
                        */

                        
                                    protected java.lang.String localCreatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByFullName(){
                               return localCreatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFullName
                               */
                               public void setCreatedByFullName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFullNameTracker = true;
                                       } else {
                                          localCreatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByIntegrationId
                        */

                        
                                    protected java.lang.String localCreatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByIntegrationId(){
                               return localCreatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByIntegrationId
                               */
                               public void setCreatedByIntegrationId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIntegrationIdTracker = true;
                                       } else {
                                          localCreatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByExternalSystemId
                        */

                        
                                    protected java.lang.String localCreatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByExternalSystemId(){
                               return localCreatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByExternalSystemId
                               */
                               public void setCreatedByExternalSystemId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByExternalSystemIdTracker = true;
                                       } else {
                                          localCreatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByEMailAddr
                        */

                        
                                    protected java.lang.String localCreatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByEMailAddr(){
                               return localCreatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByEMailAddr
                               */
                               public void setCreatedByEMailAddr(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByEMailAddrTracker = true;
                                       } else {
                                          localCreatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedBy
                        */

                        
                                    protected java.lang.String localCreatedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedBy(){
                               return localCreatedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedBy
                               */
                               public void setCreatedBy(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByTracker = true;
                                       } else {
                                          localCreatedByTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedBy=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedBy
                        */

                        
                                    protected java.lang.String localModifiedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifiedBy(){
                               return localModifiedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedBy
                               */
                               public void setModifiedBy(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByTracker = true;
                                       } else {
                                          localModifiedByTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedBy=param;
                                    

                               }
                            

                        /**
                        * field for Operation
                        * This was an Attribute!
                        */

                        
                                    protected java.lang.String localOperation ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOperation(){
                               return localOperation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Operation
                               */
                               public void setOperation(java.lang.String param){
                            
                                            this.localOperation=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UserDefaultBookPerTypeData.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Data");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":UserDefaultBookPerTypeData",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "UserDefaultBookPerTypeData",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localOperation != null){
                                        
                                                writeAttribute("",
                                                         "operation",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperation), xmlWriter);

                                            
                                      }
                                     if (localModifiedDateTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedDate");
                                    }
                                

                                          if (localModifiedDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedDate));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedDateTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedDate");
                                    }
                                

                                          if (localCreatedDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedDate));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedByIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedById", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedById");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedById");
                                    }
                                

                                          if (localModifiedById==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifiedById);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedById", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedById");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedById");
                                    }
                                

                                          if (localCreatedById==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedById);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModId");
                                    }
                                
                                               if (localModId==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ModId cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModId));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Id", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Id");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Id");
                                    }
                                

                                          if (localId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBookIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"BookId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"BookId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("BookId");
                                    }
                                

                                          if (localBookId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BookId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBookId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBookNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"BookName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"BookName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("BookName");
                                    }
                                

                                          if (localBookName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BookName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBookName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAccessObjectIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"AccessObjectId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"AccessObjectId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("AccessObjectId");
                                    }
                                

                                          if (localAccessObjectId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("AccessObjectId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAccessObjectId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAccessObjectNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"AccessObjectName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"AccessObjectName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("AccessObjectName");
                                    }
                                

                                          if (localAccessObjectName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("AccessObjectName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAccessObjectName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIncludeSubBooksTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"IncludeSubBooks", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"IncludeSubBooks");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("IncludeSubBooks");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("IncludeSubBooks cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIncludeSubBooks));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBookDescriptionTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"BookDescription", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"BookDescription");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("BookDescription");
                                    }
                                

                                          if (localBookDescription==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BookDescription cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBookDescription);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localObjectNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ObjectName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ObjectName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ObjectName");
                                    }
                                

                                          if (localObjectName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ObjectName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localObjectName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBookExternalSystemIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"BookExternalSystemId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"BookExternalSystemId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("BookExternalSystemId");
                                    }
                                

                                          if (localBookExternalSystemId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BookExternalSystemId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBookExternalSystemId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByFirstNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByFirstName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByFirstName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByFirstName");
                                    }
                                

                                          if (localUpdatedByFirstName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByFirstName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByLastNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByLastName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByLastName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByLastName");
                                    }
                                

                                          if (localUpdatedByLastName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByLastName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByUserSignInIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByUserSignInId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByUserSignInId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByUserSignInId");
                                    }
                                

                                          if (localUpdatedByUserSignInId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByUserSignInId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByAliasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByAlias", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByAlias");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByAlias");
                                    }
                                

                                          if (localUpdatedByAlias==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByAlias);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByFullNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByFullName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByFullName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByFullName");
                                    }
                                

                                          if (localUpdatedByFullName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByFullName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByIntegrationIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByIntegrationId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByIntegrationId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByIntegrationId");
                                    }
                                

                                          if (localUpdatedByIntegrationId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByIntegrationId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByExternalSystemIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByExternalSystemId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByExternalSystemId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByExternalSystemId");
                                    }
                                

                                          if (localUpdatedByExternalSystemId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByExternalSystemId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByEMailAddrTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByEMailAddr", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByEMailAddr");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByEMailAddr");
                                    }
                                

                                          if (localUpdatedByEMailAddr==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByEMailAddr);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByFirstNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByFirstName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByFirstName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByFirstName");
                                    }
                                

                                          if (localCreatedByFirstName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByFirstName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByLastNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByLastName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByLastName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByLastName");
                                    }
                                

                                          if (localCreatedByLastName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByLastName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByUserSignInIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByUserSignInId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByUserSignInId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByUserSignInId");
                                    }
                                

                                          if (localCreatedByUserSignInId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByUserSignInId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByAliasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByAlias", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByAlias");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByAlias");
                                    }
                                

                                          if (localCreatedByAlias==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByAlias);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByFullNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByFullName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByFullName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByFullName");
                                    }
                                

                                          if (localCreatedByFullName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByFullName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByIntegrationIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByIntegrationId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByIntegrationId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByIntegrationId");
                                    }
                                

                                          if (localCreatedByIntegrationId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByIntegrationId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByExternalSystemIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByExternalSystemId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByExternalSystemId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByExternalSystemId");
                                    }
                                

                                          if (localCreatedByExternalSystemId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByExternalSystemId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByEMailAddrTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByEMailAddr", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByEMailAddr");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByEMailAddr");
                                    }
                                

                                          if (localCreatedByEMailAddr==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByEMailAddr);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedBy", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedBy");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedBy");
                                    }
                                

                                          if (localCreatedBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedByTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedBy", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedBy");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedBy");
                                    }
                                

                                          if (localModifiedBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifiedBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localModifiedDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedDate"));
                                 
                                        if (localModifiedDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                        }
                                    } if (localCreatedDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedDate"));
                                 
                                        if (localCreatedDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                        }
                                    } if (localModifiedByIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedById"));
                                 
                                        if (localModifiedById != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedById));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                        }
                                    } if (localCreatedByIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedById"));
                                 
                                        if (localCreatedById != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedById));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                        }
                                    } if (localModIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModId"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModId));
                            } if (localIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Id"));
                                 
                                        if (localId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                        }
                                    } if (localBookIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "BookId"));
                                 
                                        if (localBookId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBookId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BookId cannot be null!!");
                                        }
                                    } if (localBookNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "BookName"));
                                 
                                        if (localBookName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBookName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BookName cannot be null!!");
                                        }
                                    } if (localAccessObjectIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "AccessObjectId"));
                                 
                                        if (localAccessObjectId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAccessObjectId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("AccessObjectId cannot be null!!");
                                        }
                                    } if (localAccessObjectNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "AccessObjectName"));
                                 
                                        if (localAccessObjectName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAccessObjectName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("AccessObjectName cannot be null!!");
                                        }
                                    } if (localIncludeSubBooksTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "IncludeSubBooks"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIncludeSubBooks));
                            } if (localBookDescriptionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "BookDescription"));
                                 
                                        if (localBookDescription != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBookDescription));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BookDescription cannot be null!!");
                                        }
                                    } if (localObjectNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ObjectName"));
                                 
                                        if (localObjectName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localObjectName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ObjectName cannot be null!!");
                                        }
                                    } if (localBookExternalSystemIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "BookExternalSystemId"));
                                 
                                        if (localBookExternalSystemId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBookExternalSystemId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BookExternalSystemId cannot be null!!");
                                        }
                                    } if (localUpdatedByFirstNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByFirstName"));
                                 
                                        if (localUpdatedByFirstName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByFirstName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                        }
                                    } if (localUpdatedByLastNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByLastName"));
                                 
                                        if (localUpdatedByLastName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByLastName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                        }
                                    } if (localUpdatedByUserSignInIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByUserSignInId"));
                                 
                                        if (localUpdatedByUserSignInId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByUserSignInId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                        }
                                    } if (localUpdatedByAliasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByAlias"));
                                 
                                        if (localUpdatedByAlias != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByAlias));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                        }
                                    } if (localUpdatedByFullNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByFullName"));
                                 
                                        if (localUpdatedByFullName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByFullName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                        }
                                    } if (localUpdatedByIntegrationIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByIntegrationId"));
                                 
                                        if (localUpdatedByIntegrationId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByIntegrationId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                        }
                                    } if (localUpdatedByExternalSystemIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByExternalSystemId"));
                                 
                                        if (localUpdatedByExternalSystemId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByExternalSystemId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                        }
                                    } if (localUpdatedByEMailAddrTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByEMailAddr"));
                                 
                                        if (localUpdatedByEMailAddr != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByEMailAddr));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                        }
                                    } if (localCreatedByFirstNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByFirstName"));
                                 
                                        if (localCreatedByFirstName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByFirstName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                        }
                                    } if (localCreatedByLastNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByLastName"));
                                 
                                        if (localCreatedByLastName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByLastName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                        }
                                    } if (localCreatedByUserSignInIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByUserSignInId"));
                                 
                                        if (localCreatedByUserSignInId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByUserSignInId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                        }
                                    } if (localCreatedByAliasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByAlias"));
                                 
                                        if (localCreatedByAlias != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByAlias));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                        }
                                    } if (localCreatedByFullNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByFullName"));
                                 
                                        if (localCreatedByFullName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByFullName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                        }
                                    } if (localCreatedByIntegrationIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByIntegrationId"));
                                 
                                        if (localCreatedByIntegrationId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByIntegrationId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                        }
                                    } if (localCreatedByExternalSystemIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByExternalSystemId"));
                                 
                                        if (localCreatedByExternalSystemId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByExternalSystemId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                        }
                                    } if (localCreatedByEMailAddrTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByEMailAddr"));
                                 
                                        if (localCreatedByEMailAddr != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByEMailAddr));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                        }
                                    } if (localCreatedByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedBy"));
                                 
                                        if (localCreatedBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                        }
                                    } if (localModifiedByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedBy"));
                                 
                                        if (localModifiedBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                        }
                                    }
                            attribList.add(
                            new javax.xml.namespace.QName("","operation"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperation));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UserDefaultBookPerTypeData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UserDefaultBookPerTypeData object =
                new UserDefaultBookPerTypeData();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"UserDefaultBookPerTypeData".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UserDefaultBookPerTypeData)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "operation"
                    java.lang.String tempAttribOperation =
                        
                                reader.getAttributeValue(null,"operation");
                            
                   if (tempAttribOperation!=null){
                         java.lang.String content = tempAttribOperation;
                        
                                                 object.setOperation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribOperation));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("operation");
                    
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedDate").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedDate").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedById").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedById(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedById").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedById(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Id").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","BookId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBookId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","BookName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBookName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","AccessObjectId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAccessObjectId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","AccessObjectName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAccessObjectName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","IncludeSubBooks").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIncludeSubBooks(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","BookDescription").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBookDescription(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ObjectName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setObjectName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","BookExternalSystemId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBookExternalSystemId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByFirstName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByFirstName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByLastName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByLastName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByUserSignInId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByUserSignInId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByAlias").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByAlias(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByFullName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByFullName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByIntegrationId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByIntegrationId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByExternalSystemId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByExternalSystemId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByEMailAddr").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByEMailAddr(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByFirstName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByFirstName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByLastName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByLastName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByUserSignInId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByUserSignInId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByAlias").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByAlias(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByFullName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByFullName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByIntegrationId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByIntegrationId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByExternalSystemId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByExternalSystemId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByEMailAddr").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByEMailAddr(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedBy").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedBy").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ListOfUserDefaultBookPerTypeQuery
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ListOfUserDefaultBookPerTypeQuery
                Namespace URI = urn:/crmondemand/xml/User/Query
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Query")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for UserDefaultBookPerType
                        */

                        
                                    protected UserDefaultBookPerTypeQuery localUserDefaultBookPerType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserDefaultBookPerTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return UserDefaultBookPerTypeQuery
                           */
                           public  UserDefaultBookPerTypeQuery getUserDefaultBookPerType(){
                               return localUserDefaultBookPerType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserDefaultBookPerType
                               */
                               public void setUserDefaultBookPerType(UserDefaultBookPerTypeQuery param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserDefaultBookPerTypeTracker = true;
                                       } else {
                                          localUserDefaultBookPerTypeTracker = false;
                                              
                                       }
                                   
                                            this.localUserDefaultBookPerType=param;
                                    

                               }
                            

                        /**
                        * field for Pagesize
                        * This was an Attribute!
                        */

                        
                                    protected java.math.BigInteger localPagesize ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigInteger
                           */
                           public  java.math.BigInteger getPagesize(){
                               return localPagesize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Pagesize
                               */
                               public void setPagesize(java.math.BigInteger param){
                            
                                            this.localPagesize=param;
                                    

                               }
                            

                        /**
                        * field for Startrownum
                        * This was an Attribute!
                        */

                        
                                    protected java.math.BigInteger localStartrownum ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigInteger
                           */
                           public  java.math.BigInteger getStartrownum(){
                               return localStartrownum;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Startrownum
                               */
                               public void setStartrownum(java.math.BigInteger param){
                            
                                            this.localStartrownum=param;
                                    

                               }
                            

                        /**
                        * field for Recordcountneeded
                        * This was an Attribute!
                        */

                        
                                    protected boolean localRecordcountneeded ;
                                

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getRecordcountneeded(){
                               return localRecordcountneeded;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Recordcountneeded
                               */
                               public void setRecordcountneeded(boolean param){
                            
                                            this.localRecordcountneeded=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ListOfUserDefaultBookPerTypeQuery.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Query");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ListOfUserDefaultBookPerTypeQuery",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ListOfUserDefaultBookPerTypeQuery",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localPagesize != null){
                                        
                                                writeAttribute("",
                                                         "pagesize",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPagesize), xmlWriter);

                                            
                                      }
                                    
                                            if (localStartrownum != null){
                                        
                                                writeAttribute("",
                                                         "startrownum",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartrownum), xmlWriter);

                                            
                                      }
                                    
                                                   if (true) {
                                               
                                                writeAttribute("",
                                                         "recordcountneeded",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcountneeded), xmlWriter);

                                            
                                      }
                                     if (localUserDefaultBookPerTypeTracker){
                                            if (localUserDefaultBookPerType==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UserDefaultBookPerType cannot be null!!");
                                            }
                                           localUserDefaultBookPerType.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserDefaultBookPerType"),
                                               factory,xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localUserDefaultBookPerTypeTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UserDefaultBookPerType"));
                            
                            
                                    if (localUserDefaultBookPerType==null){
                                         throw new org.apache.axis2.databinding.ADBException("UserDefaultBookPerType cannot be null!!");
                                    }
                                    elementList.add(localUserDefaultBookPerType);
                                }
                            attribList.add(
                            new javax.xml.namespace.QName("","pagesize"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPagesize));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","startrownum"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartrownum));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","recordcountneeded"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcountneeded));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ListOfUserDefaultBookPerTypeQuery parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ListOfUserDefaultBookPerTypeQuery object =
                new ListOfUserDefaultBookPerTypeQuery();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ListOfUserDefaultBookPerTypeQuery".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ListOfUserDefaultBookPerTypeQuery)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "pagesize"
                    java.lang.String tempAttribPagesize =
                        
                                reader.getAttributeValue(null,"pagesize");
                            
                   if (tempAttribPagesize!=null){
                         java.lang.String content = tempAttribPagesize;
                        
                                                 object.setPagesize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(tempAttribPagesize));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("pagesize");
                    
                    // handle attribute "startrownum"
                    java.lang.String tempAttribStartrownum =
                        
                                reader.getAttributeValue(null,"startrownum");
                            
                   if (tempAttribStartrownum!=null){
                         java.lang.String content = tempAttribStartrownum;
                        
                                                 object.setStartrownum(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(tempAttribStartrownum));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("startrownum");
                    
                    // handle attribute "recordcountneeded"
                    java.lang.String tempAttribRecordcountneeded =
                        
                                reader.getAttributeValue(null,"recordcountneeded");
                            
                   if (tempAttribRecordcountneeded!=null){
                         java.lang.String content = tempAttribRecordcountneeded;
                        
                                                 object.setRecordcountneeded(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribRecordcountneeded));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("recordcountneeded");
                    
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserDefaultBookPerType").equals(reader.getName())){
                                
                                                object.setUserDefaultBookPerType(UserDefaultBookPerTypeQuery.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ListOfDelegatedUserQuery
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ListOfDelegatedUserQuery
                Namespace URI = urn:/crmondemand/xml/User/Query
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Query")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for DelegatedUser
                        */

                        
                                    protected DelegatedUserQuery localDelegatedUser ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDelegatedUserTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return DelegatedUserQuery
                           */
                           public  DelegatedUserQuery getDelegatedUser(){
                               return localDelegatedUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DelegatedUser
                               */
                               public void setDelegatedUser(DelegatedUserQuery param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDelegatedUserTracker = true;
                                       } else {
                                          localDelegatedUserTracker = false;
                                              
                                       }
                                   
                                            this.localDelegatedUser=param;
                                    

                               }
                            

                        /**
                        * field for Pagesize
                        * This was an Attribute!
                        */

                        
                                    protected java.math.BigInteger localPagesize ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigInteger
                           */
                           public  java.math.BigInteger getPagesize(){
                               return localPagesize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Pagesize
                               */
                               public void setPagesize(java.math.BigInteger param){
                            
                                            this.localPagesize=param;
                                    

                               }
                            

                        /**
                        * field for Startrownum
                        * This was an Attribute!
                        */

                        
                                    protected java.math.BigInteger localStartrownum ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigInteger
                           */
                           public  java.math.BigInteger getStartrownum(){
                               return localStartrownum;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Startrownum
                               */
                               public void setStartrownum(java.math.BigInteger param){
                            
                                            this.localStartrownum=param;
                                    

                               }
                            

                        /**
                        * field for Recordcountneeded
                        * This was an Attribute!
                        */

                        
                                    protected boolean localRecordcountneeded ;
                                

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getRecordcountneeded(){
                               return localRecordcountneeded;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Recordcountneeded
                               */
                               public void setRecordcountneeded(boolean param){
                            
                                            this.localRecordcountneeded=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ListOfDelegatedUserQuery.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Query");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ListOfDelegatedUserQuery",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ListOfDelegatedUserQuery",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localPagesize != null){
                                        
                                                writeAttribute("",
                                                         "pagesize",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPagesize), xmlWriter);

                                            
                                      }
                                    
                                            if (localStartrownum != null){
                                        
                                                writeAttribute("",
                                                         "startrownum",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartrownum), xmlWriter);

                                            
                                      }
                                    
                                                   if (true) {
                                               
                                                writeAttribute("",
                                                         "recordcountneeded",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcountneeded), xmlWriter);

                                            
                                      }
                                     if (localDelegatedUserTracker){
                                            if (localDelegatedUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DelegatedUser cannot be null!!");
                                            }
                                           localDelegatedUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DelegatedUser"),
                                               factory,xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localDelegatedUserTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "DelegatedUser"));
                            
                            
                                    if (localDelegatedUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("DelegatedUser cannot be null!!");
                                    }
                                    elementList.add(localDelegatedUser);
                                }
                            attribList.add(
                            new javax.xml.namespace.QName("","pagesize"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPagesize));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","startrownum"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartrownum));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","recordcountneeded"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcountneeded));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ListOfDelegatedUserQuery parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ListOfDelegatedUserQuery object =
                new ListOfDelegatedUserQuery();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ListOfDelegatedUserQuery".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ListOfDelegatedUserQuery)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "pagesize"
                    java.lang.String tempAttribPagesize =
                        
                                reader.getAttributeValue(null,"pagesize");
                            
                   if (tempAttribPagesize!=null){
                         java.lang.String content = tempAttribPagesize;
                        
                                                 object.setPagesize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(tempAttribPagesize));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("pagesize");
                    
                    // handle attribute "startrownum"
                    java.lang.String tempAttribStartrownum =
                        
                                reader.getAttributeValue(null,"startrownum");
                            
                   if (tempAttribStartrownum!=null){
                         java.lang.String content = tempAttribStartrownum;
                        
                                                 object.setStartrownum(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(tempAttribStartrownum));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("startrownum");
                    
                    // handle attribute "recordcountneeded"
                    java.lang.String tempAttribRecordcountneeded =
                        
                                reader.getAttributeValue(null,"recordcountneeded");
                            
                   if (tempAttribRecordcountneeded!=null){
                         java.lang.String content = tempAttribRecordcountneeded;
                        
                                                 object.setRecordcountneeded(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribRecordcountneeded));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("recordcountneeded");
                    
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DelegatedUser").equals(reader.getName())){
                                
                                                object.setDelegatedUser(DelegatedUserQuery.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class DelegatedFromUserData
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = DelegatedFromUserData
                Namespace URI = urn:/crmondemand/xml/User/Data
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Data")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ModifiedDate
                        */

                        
                                    protected java.util.Calendar localModifiedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getModifiedDate(){
                               return localModifiedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedDate
                               */
                               public void setModifiedDate(java.util.Calendar param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedDateTracker = true;
                                       } else {
                                          localModifiedDateTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedDate=param;
                                    

                               }
                            

                        /**
                        * field for CreatedDate
                        */

                        
                                    protected java.util.Calendar localCreatedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getCreatedDate(){
                               return localCreatedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedDate
                               */
                               public void setCreatedDate(java.util.Calendar param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedDateTracker = true;
                                       } else {
                                          localCreatedDateTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedDate=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedById
                        */

                        
                                    protected java.lang.String localModifiedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifiedById(){
                               return localModifiedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedById
                               */
                               public void setModifiedById(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByIdTracker = true;
                                       } else {
                                          localModifiedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedById=param;
                                    

                               }
                            

                        /**
                        * field for CreatedById
                        */

                        
                                    protected java.lang.String localCreatedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedById(){
                               return localCreatedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedById
                               */
                               public void setCreatedById(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIdTracker = true;
                                       } else {
                                          localCreatedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedById=param;
                                    

                               }
                            

                        /**
                        * field for ModId
                        */

                        
                                    protected int localModId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getModId(){
                               return localModId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModId
                               */
                               public void setModId(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localModIdTracker = false;
                                              
                                       } else {
                                          localModIdTracker = true;
                                       }
                                   
                                            this.localModId=param;
                                    

                               }
                            

                        /**
                        * field for Id
                        */

                        
                                    protected java.lang.String localId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getId(){
                               return localId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Id
                               */
                               public void setId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIdTracker = true;
                                       } else {
                                          localIdTracker = false;
                                              
                                       }
                                   
                                            this.localId=param;
                                    

                               }
                            

                        /**
                        * field for FirstName
                        */

                        
                                    protected java.lang.String localFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFirstName(){
                               return localFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FirstName
                               */
                               public void setFirstName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFirstNameTracker = true;
                                       } else {
                                          localFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localFirstName=param;
                                    

                               }
                            

                        /**
                        * field for UserId
                        */

                        
                                    protected java.lang.String localUserId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUserId(){
                               return localUserId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserId
                               */
                               public void setUserId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserIdTracker = true;
                                       } else {
                                          localUserIdTracker = false;
                                              
                                       }
                                   
                                            this.localUserId=param;
                                    

                               }
                            

                        /**
                        * field for LastName
                        */

                        
                                    protected java.lang.String localLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLastName(){
                               return localLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LastName
                               */
                               public void setLastName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLastNameTracker = true;
                                       } else {
                                          localLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localLastName=param;
                                    

                               }
                            

                        /**
                        * field for Alias
                        */

                        
                                    protected java.lang.String localAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAlias(){
                               return localAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Alias
                               */
                               public void setAlias(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAliasTracker = true;
                                       } else {
                                          localAliasTracker = false;
                                              
                                       }
                                   
                                            this.localAlias=param;
                                    

                               }
                            

                        /**
                        * field for ExternalSystemId
                        */

                        
                                    protected java.lang.String localExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getExternalSystemId(){
                               return localExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ExternalSystemId
                               */
                               public void setExternalSystemId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExternalSystemIdTracker = true;
                                       } else {
                                          localExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for RespId
                        */

                        
                                    protected java.lang.String localRespId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRespIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRespId(){
                               return localRespId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RespId
                               */
                               public void setRespId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRespIdTracker = true;
                                       } else {
                                          localRespIdTracker = false;
                                              
                                       }
                                   
                                            this.localRespId=param;
                                    

                               }
                            

                        /**
                        * field for Role
                        */

                        
                                    protected java.lang.String localRole ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRoleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRole(){
                               return localRole;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Role
                               */
                               public void setRole(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRoleTracker = true;
                                       } else {
                                          localRoleTracker = false;
                                              
                                       }
                                   
                                            this.localRole=param;
                                    

                               }
                            

                        /**
                        * field for StartDate
                        */

                        
                                    protected java.util.Date localStartDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Date
                           */
                           public  java.util.Date getStartDate(){
                               return localStartDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartDate
                               */
                               public void setStartDate(java.util.Date param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localStartDateTracker = true;
                                       } else {
                                          localStartDateTracker = false;
                                              
                                       }
                                   
                                            this.localStartDate=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFirstName
                        */

                        
                                    protected java.lang.String localUpdatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByFirstName(){
                               return localUpdatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFirstName
                               */
                               public void setUpdatedByFirstName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFirstNameTracker = true;
                                       } else {
                                          localUpdatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByLastName
                        */

                        
                                    protected java.lang.String localUpdatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByLastName(){
                               return localUpdatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByLastName
                               */
                               public void setUpdatedByLastName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByLastNameTracker = true;
                                       } else {
                                          localUpdatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByUserSignInId
                        */

                        
                                    protected java.lang.String localUpdatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByUserSignInId(){
                               return localUpdatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByUserSignInId
                               */
                               public void setUpdatedByUserSignInId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByUserSignInIdTracker = true;
                                       } else {
                                          localUpdatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByAlias
                        */

                        
                                    protected java.lang.String localUpdatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByAlias(){
                               return localUpdatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByAlias
                               */
                               public void setUpdatedByAlias(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByAliasTracker = true;
                                       } else {
                                          localUpdatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFullName
                        */

                        
                                    protected java.lang.String localUpdatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByFullName(){
                               return localUpdatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFullName
                               */
                               public void setUpdatedByFullName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFullNameTracker = true;
                                       } else {
                                          localUpdatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByIntegrationId
                        */

                        
                                    protected java.lang.String localUpdatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByIntegrationId(){
                               return localUpdatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByIntegrationId
                               */
                               public void setUpdatedByIntegrationId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByIntegrationIdTracker = true;
                                       } else {
                                          localUpdatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByExternalSystemId
                        */

                        
                                    protected java.lang.String localUpdatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByExternalSystemId(){
                               return localUpdatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByExternalSystemId
                               */
                               public void setUpdatedByExternalSystemId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByExternalSystemIdTracker = true;
                                       } else {
                                          localUpdatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByEMailAddr
                        */

                        
                                    protected java.lang.String localUpdatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByEMailAddr(){
                               return localUpdatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByEMailAddr
                               */
                               public void setUpdatedByEMailAddr(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByEMailAddrTracker = true;
                                       } else {
                                          localUpdatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFirstName
                        */

                        
                                    protected java.lang.String localCreatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByFirstName(){
                               return localCreatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFirstName
                               */
                               public void setCreatedByFirstName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFirstNameTracker = true;
                                       } else {
                                          localCreatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByLastName
                        */

                        
                                    protected java.lang.String localCreatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByLastName(){
                               return localCreatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByLastName
                               */
                               public void setCreatedByLastName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByLastNameTracker = true;
                                       } else {
                                          localCreatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByUserSignInId
                        */

                        
                                    protected java.lang.String localCreatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByUserSignInId(){
                               return localCreatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByUserSignInId
                               */
                               public void setCreatedByUserSignInId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByUserSignInIdTracker = true;
                                       } else {
                                          localCreatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByAlias
                        */

                        
                                    protected java.lang.String localCreatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByAlias(){
                               return localCreatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByAlias
                               */
                               public void setCreatedByAlias(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByAliasTracker = true;
                                       } else {
                                          localCreatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFullName
                        */

                        
                                    protected java.lang.String localCreatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByFullName(){
                               return localCreatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFullName
                               */
                               public void setCreatedByFullName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFullNameTracker = true;
                                       } else {
                                          localCreatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByIntegrationId
                        */

                        
                                    protected java.lang.String localCreatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByIntegrationId(){
                               return localCreatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByIntegrationId
                               */
                               public void setCreatedByIntegrationId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIntegrationIdTracker = true;
                                       } else {
                                          localCreatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByExternalSystemId
                        */

                        
                                    protected java.lang.String localCreatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByExternalSystemId(){
                               return localCreatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByExternalSystemId
                               */
                               public void setCreatedByExternalSystemId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByExternalSystemIdTracker = true;
                                       } else {
                                          localCreatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByEMailAddr
                        */

                        
                                    protected java.lang.String localCreatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByEMailAddr(){
                               return localCreatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByEMailAddr
                               */
                               public void setCreatedByEMailAddr(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByEMailAddrTracker = true;
                                       } else {
                                          localCreatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedBy
                        */

                        
                                    protected java.lang.String localCreatedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedBy(){
                               return localCreatedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedBy
                               */
                               public void setCreatedBy(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByTracker = true;
                                       } else {
                                          localCreatedByTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedBy=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedBy
                        */

                        
                                    protected java.lang.String localModifiedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifiedBy(){
                               return localModifiedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedBy
                               */
                               public void setModifiedBy(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByTracker = true;
                                       } else {
                                          localModifiedByTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedBy=param;
                                    

                               }
                            

                        /**
                        * field for Operation
                        * This was an Attribute!
                        */

                        
                                    protected java.lang.String localOperation ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOperation(){
                               return localOperation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Operation
                               */
                               public void setOperation(java.lang.String param){
                            
                                            this.localOperation=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       DelegatedFromUserData.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Data");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DelegatedFromUserData",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DelegatedFromUserData",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localOperation != null){
                                        
                                                writeAttribute("",
                                                         "operation",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperation), xmlWriter);

                                            
                                      }
                                     if (localModifiedDateTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedDate");
                                    }
                                

                                          if (localModifiedDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedDate));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedDateTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedDate");
                                    }
                                

                                          if (localCreatedDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedDate));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedByIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedById", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedById");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedById");
                                    }
                                

                                          if (localModifiedById==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifiedById);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedById", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedById");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedById");
                                    }
                                

                                          if (localCreatedById==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedById);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModId");
                                    }
                                
                                               if (localModId==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ModId cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModId));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Id", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Id");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Id");
                                    }
                                

                                          if (localId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFirstNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"FirstName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"FirstName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("FirstName");
                                    }
                                

                                          if (localFirstName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FirstName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFirstName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUserIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UserId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UserId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UserId");
                                    }
                                

                                          if (localUserId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UserId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUserId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLastNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"LastName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"LastName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("LastName");
                                    }
                                

                                          if (localLastName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LastName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLastName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAliasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Alias", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Alias");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Alias");
                                    }
                                

                                          if (localAlias==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Alias cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAlias);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localExternalSystemIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ExternalSystemId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ExternalSystemId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ExternalSystemId");
                                    }
                                

                                          if (localExternalSystemId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ExternalSystemId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localExternalSystemId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRespIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"RespId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"RespId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("RespId");
                                    }
                                

                                          if (localRespId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("RespId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRespId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRoleTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Role", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Role");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Role");
                                    }
                                

                                          if (localRole==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Role cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRole);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartDateTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"StartDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"StartDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("StartDate");
                                    }
                                

                                          if (localStartDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByFirstNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByFirstName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByFirstName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByFirstName");
                                    }
                                

                                          if (localUpdatedByFirstName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByFirstName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByLastNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByLastName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByLastName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByLastName");
                                    }
                                

                                          if (localUpdatedByLastName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByLastName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByUserSignInIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByUserSignInId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByUserSignInId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByUserSignInId");
                                    }
                                

                                          if (localUpdatedByUserSignInId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByUserSignInId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByAliasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByAlias", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByAlias");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByAlias");
                                    }
                                

                                          if (localUpdatedByAlias==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByAlias);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByFullNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByFullName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByFullName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByFullName");
                                    }
                                

                                          if (localUpdatedByFullName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByFullName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByIntegrationIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByIntegrationId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByIntegrationId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByIntegrationId");
                                    }
                                

                                          if (localUpdatedByIntegrationId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByIntegrationId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByExternalSystemIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByExternalSystemId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByExternalSystemId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByExternalSystemId");
                                    }
                                

                                          if (localUpdatedByExternalSystemId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByExternalSystemId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByEMailAddrTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByEMailAddr", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByEMailAddr");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByEMailAddr");
                                    }
                                

                                          if (localUpdatedByEMailAddr==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByEMailAddr);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByFirstNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByFirstName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByFirstName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByFirstName");
                                    }
                                

                                          if (localCreatedByFirstName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByFirstName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByLastNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByLastName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByLastName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByLastName");
                                    }
                                

                                          if (localCreatedByLastName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByLastName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByUserSignInIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByUserSignInId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByUserSignInId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByUserSignInId");
                                    }
                                

                                          if (localCreatedByUserSignInId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByUserSignInId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByAliasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByAlias", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByAlias");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByAlias");
                                    }
                                

                                          if (localCreatedByAlias==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByAlias);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByFullNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByFullName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByFullName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByFullName");
                                    }
                                

                                          if (localCreatedByFullName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByFullName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByIntegrationIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByIntegrationId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByIntegrationId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByIntegrationId");
                                    }
                                

                                          if (localCreatedByIntegrationId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByIntegrationId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByExternalSystemIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByExternalSystemId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByExternalSystemId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByExternalSystemId");
                                    }
                                

                                          if (localCreatedByExternalSystemId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByExternalSystemId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByEMailAddrTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByEMailAddr", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByEMailAddr");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByEMailAddr");
                                    }
                                

                                          if (localCreatedByEMailAddr==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByEMailAddr);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedBy", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedBy");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedBy");
                                    }
                                

                                          if (localCreatedBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedByTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedBy", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedBy");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedBy");
                                    }
                                

                                          if (localModifiedBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifiedBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localModifiedDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedDate"));
                                 
                                        if (localModifiedDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                        }
                                    } if (localCreatedDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedDate"));
                                 
                                        if (localCreatedDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                        }
                                    } if (localModifiedByIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedById"));
                                 
                                        if (localModifiedById != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedById));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                        }
                                    } if (localCreatedByIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedById"));
                                 
                                        if (localCreatedById != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedById));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                        }
                                    } if (localModIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModId"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModId));
                            } if (localIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Id"));
                                 
                                        if (localId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                        }
                                    } if (localFirstNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "FirstName"));
                                 
                                        if (localFirstName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFirstName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FirstName cannot be null!!");
                                        }
                                    } if (localUserIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UserId"));
                                 
                                        if (localUserId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UserId cannot be null!!");
                                        }
                                    } if (localLastNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "LastName"));
                                 
                                        if (localLastName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LastName cannot be null!!");
                                        }
                                    } if (localAliasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Alias"));
                                 
                                        if (localAlias != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAlias));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Alias cannot be null!!");
                                        }
                                    } if (localExternalSystemIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ExternalSystemId"));
                                 
                                        if (localExternalSystemId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExternalSystemId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ExternalSystemId cannot be null!!");
                                        }
                                    } if (localRespIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "RespId"));
                                 
                                        if (localRespId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRespId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("RespId cannot be null!!");
                                        }
                                    } if (localRoleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Role"));
                                 
                                        if (localRole != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRole));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Role cannot be null!!");
                                        }
                                    } if (localStartDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "StartDate"));
                                 
                                        if (localStartDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                        }
                                    } if (localUpdatedByFirstNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByFirstName"));
                                 
                                        if (localUpdatedByFirstName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByFirstName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                        }
                                    } if (localUpdatedByLastNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByLastName"));
                                 
                                        if (localUpdatedByLastName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByLastName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                        }
                                    } if (localUpdatedByUserSignInIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByUserSignInId"));
                                 
                                        if (localUpdatedByUserSignInId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByUserSignInId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                        }
                                    } if (localUpdatedByAliasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByAlias"));
                                 
                                        if (localUpdatedByAlias != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByAlias));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                        }
                                    } if (localUpdatedByFullNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByFullName"));
                                 
                                        if (localUpdatedByFullName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByFullName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                        }
                                    } if (localUpdatedByIntegrationIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByIntegrationId"));
                                 
                                        if (localUpdatedByIntegrationId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByIntegrationId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                        }
                                    } if (localUpdatedByExternalSystemIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByExternalSystemId"));
                                 
                                        if (localUpdatedByExternalSystemId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByExternalSystemId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                        }
                                    } if (localUpdatedByEMailAddrTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByEMailAddr"));
                                 
                                        if (localUpdatedByEMailAddr != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByEMailAddr));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                        }
                                    } if (localCreatedByFirstNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByFirstName"));
                                 
                                        if (localCreatedByFirstName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByFirstName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                        }
                                    } if (localCreatedByLastNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByLastName"));
                                 
                                        if (localCreatedByLastName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByLastName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                        }
                                    } if (localCreatedByUserSignInIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByUserSignInId"));
                                 
                                        if (localCreatedByUserSignInId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByUserSignInId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                        }
                                    } if (localCreatedByAliasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByAlias"));
                                 
                                        if (localCreatedByAlias != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByAlias));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                        }
                                    } if (localCreatedByFullNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByFullName"));
                                 
                                        if (localCreatedByFullName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByFullName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                        }
                                    } if (localCreatedByIntegrationIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByIntegrationId"));
                                 
                                        if (localCreatedByIntegrationId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByIntegrationId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                        }
                                    } if (localCreatedByExternalSystemIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByExternalSystemId"));
                                 
                                        if (localCreatedByExternalSystemId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByExternalSystemId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                        }
                                    } if (localCreatedByEMailAddrTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByEMailAddr"));
                                 
                                        if (localCreatedByEMailAddr != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByEMailAddr));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                        }
                                    } if (localCreatedByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedBy"));
                                 
                                        if (localCreatedBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                        }
                                    } if (localModifiedByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedBy"));
                                 
                                        if (localModifiedBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                        }
                                    }
                            attribList.add(
                            new javax.xml.namespace.QName("","operation"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperation));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DelegatedFromUserData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DelegatedFromUserData object =
                new DelegatedFromUserData();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DelegatedFromUserData".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DelegatedFromUserData)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "operation"
                    java.lang.String tempAttribOperation =
                        
                                reader.getAttributeValue(null,"operation");
                            
                   if (tempAttribOperation!=null){
                         java.lang.String content = tempAttribOperation;
                        
                                                 object.setOperation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribOperation));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("operation");
                    
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedDate").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedDate").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedById").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedById(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedById").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedById(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Id").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","FirstName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFirstName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UserId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUserId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","LastName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLastName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Alias").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAlias(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ExternalSystemId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setExternalSystemId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","RespId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRespId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Role").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRole(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","StartDate").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByFirstName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByFirstName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByLastName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByLastName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByUserSignInId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByUserSignInId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByAlias").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByAlias(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByFullName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByFullName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByIntegrationId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByIntegrationId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByExternalSystemId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByExternalSystemId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByEMailAddr").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByEMailAddr(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByFirstName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByFirstName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByLastName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByLastName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByUserSignInId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByUserSignInId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByAlias").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByAlias(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByFullName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByFullName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByIntegrationId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByIntegrationId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByExternalSystemId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByExternalSystemId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByEMailAddr").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByEMailAddr(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedBy").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedBy").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ListOfUserDefaultBookPerTypeData
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ListOfUserDefaultBookPerTypeData
                Namespace URI = urn:/crmondemand/xml/User/Data
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Data")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for UserDefaultBookPerType
                        * This was an Array!
                        */

                        
                                    protected UserDefaultBookPerTypeData[] localUserDefaultBookPerType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserDefaultBookPerTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return UserDefaultBookPerTypeData[]
                           */
                           public  UserDefaultBookPerTypeData[] getUserDefaultBookPerType(){
                               return localUserDefaultBookPerType;
                           }

                           
                        


                               
                              /**
                               * validate the array for UserDefaultBookPerType
                               */
                              protected void validateUserDefaultBookPerType(UserDefaultBookPerTypeData[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param UserDefaultBookPerType
                              */
                              public void setUserDefaultBookPerType(UserDefaultBookPerTypeData[] param){
                              
                                   validateUserDefaultBookPerType(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localUserDefaultBookPerTypeTracker = true;
                                          } else {
                                             localUserDefaultBookPerTypeTracker = false;
                                                 
                                          }
                                      
                                      this.localUserDefaultBookPerType=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param UserDefaultBookPerTypeData
                             */
                             public void addUserDefaultBookPerType(UserDefaultBookPerTypeData param){
                                   if (localUserDefaultBookPerType == null){
                                   localUserDefaultBookPerType = new UserDefaultBookPerTypeData[]{};
                                   }

                            
                                 //update the setting tracker
                                localUserDefaultBookPerTypeTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localUserDefaultBookPerType);
                               list.add(param);
                               this.localUserDefaultBookPerType =
                             (UserDefaultBookPerTypeData[])list.toArray(
                            new UserDefaultBookPerTypeData[list.size()]);

                             }
                             

                        /**
                        * field for Lastpage
                        * This was an Attribute!
                        */

                        
                                    protected boolean localLastpage ;
                                

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getLastpage(){
                               return localLastpage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Lastpage
                               */
                               public void setLastpage(boolean param){
                            
                                            this.localLastpage=param;
                                    

                               }
                            

                        /**
                        * field for Recordcount
                        * This was an Attribute!
                        */

                        
                                    protected java.math.BigInteger localRecordcount ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigInteger
                           */
                           public  java.math.BigInteger getRecordcount(){
                               return localRecordcount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Recordcount
                               */
                               public void setRecordcount(java.math.BigInteger param){
                            
                                            this.localRecordcount=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ListOfUserDefaultBookPerTypeData.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Data");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ListOfUserDefaultBookPerTypeData",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ListOfUserDefaultBookPerTypeData",
                           xmlWriter);
                   }

               
                   }
               
                                                   if (true) {
                                               
                                                writeAttribute("",
                                                         "lastpage",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastpage), xmlWriter);

                                            
                                      }
                                    
                                            if (localRecordcount != null){
                                        
                                                writeAttribute("",
                                                         "recordcount",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcount), xmlWriter);

                                            
                                      }
                                     if (localUserDefaultBookPerTypeTracker){
                                       if (localUserDefaultBookPerType!=null){
                                            for (int i = 0;i < localUserDefaultBookPerType.length;i++){
                                                if (localUserDefaultBookPerType[i] != null){
                                                 localUserDefaultBookPerType[i].serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UserDefaultBookPerType"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("UserDefaultBookPerType cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localUserDefaultBookPerTypeTracker){
                             if (localUserDefaultBookPerType!=null) {
                                 for (int i = 0;i < localUserDefaultBookPerType.length;i++){

                                    if (localUserDefaultBookPerType[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                          "UserDefaultBookPerType"));
                                         elementList.add(localUserDefaultBookPerType[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("UserDefaultBookPerType cannot be null!!");
                                    
                             }

                        }
                            attribList.add(
                            new javax.xml.namespace.QName("","lastpage"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastpage));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","recordcount"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcount));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ListOfUserDefaultBookPerTypeData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ListOfUserDefaultBookPerTypeData object =
                new ListOfUserDefaultBookPerTypeData();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ListOfUserDefaultBookPerTypeData".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ListOfUserDefaultBookPerTypeData)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "lastpage"
                    java.lang.String tempAttribLastpage =
                        
                                reader.getAttributeValue(null,"lastpage");
                            
                   if (tempAttribLastpage!=null){
                         java.lang.String content = tempAttribLastpage;
                        
                                                 object.setLastpage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribLastpage));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("lastpage");
                    
                    // handle attribute "recordcount"
                    java.lang.String tempAttribRecordcount =
                        
                                reader.getAttributeValue(null,"recordcount");
                            
                   if (tempAttribRecordcount!=null){
                         java.lang.String content = tempAttribRecordcount;
                        
                                                 object.setRecordcount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(tempAttribRecordcount));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("recordcount");
                    
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UserDefaultBookPerType").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(UserDefaultBookPerTypeData.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UserDefaultBookPerType").equals(reader.getName())){
                                                                    list1.add(UserDefaultBookPerTypeData.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setUserDefaultBookPerType((UserDefaultBookPerTypeData[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                UserDefaultBookPerTypeData.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ExtensionMapper{

          public static java.lang.Object getTypeObject(java.lang.String namespaceURI,
                                                       java.lang.String typeName,
                                                       javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{

              
                  if (
                  "urn:/crmondemand/xml/User/Query".equals(namespaceURI) &&
                  "ListOfDelegatedFromUserQuery".equals(typeName)){
                   
                            return  ListOfDelegatedFromUserQuery.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Data".equals(namespaceURI) &&
                  "ListOfUserData".equals(typeName)){
                   
                            return  ListOfUserData.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Data".equals(namespaceURI) &&
                  "UserData".equals(typeName)){
                   
                            return  UserData.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Data".equals(namespaceURI) &&
                  "UserDefaultBookPerTypeData".equals(typeName)){
                   
                            return  UserDefaultBookPerTypeData.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Query".equals(namespaceURI) &&
                  "ListOfUserDefaultBookPerTypeQuery".equals(typeName)){
                   
                            return  ListOfUserDefaultBookPerTypeQuery.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Query".equals(namespaceURI) &&
                  "ListOfDelegatedUserQuery".equals(typeName)){
                   
                            return  ListOfDelegatedUserQuery.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Query".equals(namespaceURI) &&
                  "UserQuery".equals(typeName)){
                   
                            return  UserQuery.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Data".equals(namespaceURI) &&
                  "DelegatedFromUserData".equals(typeName)){
                   
                            return  DelegatedFromUserData.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Query".equals(namespaceURI) &&
                  "queryType".equals(typeName)){
                   
                            return  QueryType.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Query".equals(namespaceURI) &&
                  "UserDefaultBookPerTypeQuery".equals(typeName)){
                   
                            return  UserDefaultBookPerTypeQuery.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Query".equals(namespaceURI) &&
                  "ListOfUserQuery".equals(typeName)){
                   
                            return  ListOfUserQuery.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Query".equals(namespaceURI) &&
                  "DelegatedUserQuery".equals(typeName)){
                   
                            return  DelegatedUserQuery.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Data".equals(namespaceURI) &&
                  "ListOfUserDefaultBookPerTypeData".equals(typeName)){
                   
                            return  ListOfUserDefaultBookPerTypeData.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Data".equals(namespaceURI) &&
                  "DelegatedUserData".equals(typeName)){
                   
                            return  DelegatedUserData.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Query".equals(namespaceURI) &&
                  "DelegatedFromUserQuery".equals(typeName)){
                   
                            return  DelegatedFromUserQuery.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Data".equals(namespaceURI) &&
                  "ListOfDelegatedFromUserData".equals(typeName)){
                   
                            return  ListOfDelegatedFromUserData.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:/crmondemand/xml/User/Data".equals(namespaceURI) &&
                  "ListOfDelegatedUserData".equals(typeName)){
                   
                            return  ListOfDelegatedUserData.Factory.parse(reader);
                        

                  }

              
             throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
          }

        }
    
        public static class DelegatedUserData
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = DelegatedUserData
                Namespace URI = urn:/crmondemand/xml/User/Data
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Data")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ModifiedDate
                        */

                        
                                    protected java.util.Calendar localModifiedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getModifiedDate(){
                               return localModifiedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedDate
                               */
                               public void setModifiedDate(java.util.Calendar param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedDateTracker = true;
                                       } else {
                                          localModifiedDateTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedDate=param;
                                    

                               }
                            

                        /**
                        * field for CreatedDate
                        */

                        
                                    protected java.util.Calendar localCreatedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getCreatedDate(){
                               return localCreatedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedDate
                               */
                               public void setCreatedDate(java.util.Calendar param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedDateTracker = true;
                                       } else {
                                          localCreatedDateTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedDate=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedById
                        */

                        
                                    protected java.lang.String localModifiedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifiedById(){
                               return localModifiedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedById
                               */
                               public void setModifiedById(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByIdTracker = true;
                                       } else {
                                          localModifiedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedById=param;
                                    

                               }
                            

                        /**
                        * field for CreatedById
                        */

                        
                                    protected java.lang.String localCreatedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedById(){
                               return localCreatedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedById
                               */
                               public void setCreatedById(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIdTracker = true;
                                       } else {
                                          localCreatedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedById=param;
                                    

                               }
                            

                        /**
                        * field for ModId
                        */

                        
                                    protected int localModId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getModId(){
                               return localModId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModId
                               */
                               public void setModId(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localModIdTracker = false;
                                              
                                       } else {
                                          localModIdTracker = true;
                                       }
                                   
                                            this.localModId=param;
                                    

                               }
                            

                        /**
                        * field for Id
                        */

                        
                                    protected java.lang.String localId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getId(){
                               return localId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Id
                               */
                               public void setId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIdTracker = true;
                                       } else {
                                          localIdTracker = false;
                                              
                                       }
                                   
                                            this.localId=param;
                                    

                               }
                            

                        /**
                        * field for UserId
                        */

                        
                                    protected java.lang.String localUserId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUserId(){
                               return localUserId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserId
                               */
                               public void setUserId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserIdTracker = true;
                                       } else {
                                          localUserIdTracker = false;
                                              
                                       }
                                   
                                            this.localUserId=param;
                                    

                               }
                            

                        /**
                        * field for LastName
                        */

                        
                                    protected java.lang.String localLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLastName(){
                               return localLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LastName
                               */
                               public void setLastName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLastNameTracker = true;
                                       } else {
                                          localLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localLastName=param;
                                    

                               }
                            

                        /**
                        * field for FirstName
                        */

                        
                                    protected java.lang.String localFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFirstName(){
                               return localFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FirstName
                               */
                               public void setFirstName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFirstNameTracker = true;
                                       } else {
                                          localFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localFirstName=param;
                                    

                               }
                            

                        /**
                        * field for UserRole
                        */

                        
                                    protected java.lang.String localUserRole ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserRoleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUserRole(){
                               return localUserRole;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserRole
                               */
                               public void setUserRole(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserRoleTracker = true;
                                       } else {
                                          localUserRoleTracker = false;
                                              
                                       }
                                   
                                            this.localUserRole=param;
                                    

                               }
                            

                        /**
                        * field for Alias
                        */

                        
                                    protected java.lang.String localAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAlias(){
                               return localAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Alias
                               */
                               public void setAlias(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAliasTracker = true;
                                       } else {
                                          localAliasTracker = false;
                                              
                                       }
                                   
                                            this.localAlias=param;
                                    

                               }
                            

                        /**
                        * field for StartDate
                        */

                        
                                    protected java.util.Date localStartDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Date
                           */
                           public  java.util.Date getStartDate(){
                               return localStartDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartDate
                               */
                               public void setStartDate(java.util.Date param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localStartDateTracker = true;
                                       } else {
                                          localStartDateTracker = false;
                                              
                                       }
                                   
                                            this.localStartDate=param;
                                    

                               }
                            

                        /**
                        * field for ExternalSystemId
                        */

                        
                                    protected java.lang.String localExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getExternalSystemId(){
                               return localExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ExternalSystemId
                               */
                               public void setExternalSystemId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExternalSystemIdTracker = true;
                                       } else {
                                          localExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for RespId
                        */

                        
                                    protected java.lang.String localRespId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRespIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRespId(){
                               return localRespId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RespId
                               */
                               public void setRespId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRespIdTracker = true;
                                       } else {
                                          localRespIdTracker = false;
                                              
                                       }
                                   
                                            this.localRespId=param;
                                    

                               }
                            

                        /**
                        * field for Role
                        */

                        
                                    protected java.lang.String localRole ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRoleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRole(){
                               return localRole;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Role
                               */
                               public void setRole(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRoleTracker = true;
                                       } else {
                                          localRoleTracker = false;
                                              
                                       }
                                   
                                            this.localRole=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFirstName
                        */

                        
                                    protected java.lang.String localUpdatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByFirstName(){
                               return localUpdatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFirstName
                               */
                               public void setUpdatedByFirstName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFirstNameTracker = true;
                                       } else {
                                          localUpdatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByLastName
                        */

                        
                                    protected java.lang.String localUpdatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByLastName(){
                               return localUpdatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByLastName
                               */
                               public void setUpdatedByLastName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByLastNameTracker = true;
                                       } else {
                                          localUpdatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByUserSignInId
                        */

                        
                                    protected java.lang.String localUpdatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByUserSignInId(){
                               return localUpdatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByUserSignInId
                               */
                               public void setUpdatedByUserSignInId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByUserSignInIdTracker = true;
                                       } else {
                                          localUpdatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByAlias
                        */

                        
                                    protected java.lang.String localUpdatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByAlias(){
                               return localUpdatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByAlias
                               */
                               public void setUpdatedByAlias(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByAliasTracker = true;
                                       } else {
                                          localUpdatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFullName
                        */

                        
                                    protected java.lang.String localUpdatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByFullName(){
                               return localUpdatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFullName
                               */
                               public void setUpdatedByFullName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFullNameTracker = true;
                                       } else {
                                          localUpdatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByIntegrationId
                        */

                        
                                    protected java.lang.String localUpdatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByIntegrationId(){
                               return localUpdatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByIntegrationId
                               */
                               public void setUpdatedByIntegrationId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByIntegrationIdTracker = true;
                                       } else {
                                          localUpdatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByExternalSystemId
                        */

                        
                                    protected java.lang.String localUpdatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByExternalSystemId(){
                               return localUpdatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByExternalSystemId
                               */
                               public void setUpdatedByExternalSystemId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByExternalSystemIdTracker = true;
                                       } else {
                                          localUpdatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByEMailAddr
                        */

                        
                                    protected java.lang.String localUpdatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByEMailAddr(){
                               return localUpdatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByEMailAddr
                               */
                               public void setUpdatedByEMailAddr(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByEMailAddrTracker = true;
                                       } else {
                                          localUpdatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFirstName
                        */

                        
                                    protected java.lang.String localCreatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByFirstName(){
                               return localCreatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFirstName
                               */
                               public void setCreatedByFirstName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFirstNameTracker = true;
                                       } else {
                                          localCreatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByLastName
                        */

                        
                                    protected java.lang.String localCreatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByLastName(){
                               return localCreatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByLastName
                               */
                               public void setCreatedByLastName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByLastNameTracker = true;
                                       } else {
                                          localCreatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByUserSignInId
                        */

                        
                                    protected java.lang.String localCreatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByUserSignInId(){
                               return localCreatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByUserSignInId
                               */
                               public void setCreatedByUserSignInId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByUserSignInIdTracker = true;
                                       } else {
                                          localCreatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByAlias
                        */

                        
                                    protected java.lang.String localCreatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByAlias(){
                               return localCreatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByAlias
                               */
                               public void setCreatedByAlias(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByAliasTracker = true;
                                       } else {
                                          localCreatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFullName
                        */

                        
                                    protected java.lang.String localCreatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByFullName(){
                               return localCreatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFullName
                               */
                               public void setCreatedByFullName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFullNameTracker = true;
                                       } else {
                                          localCreatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByIntegrationId
                        */

                        
                                    protected java.lang.String localCreatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByIntegrationId(){
                               return localCreatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByIntegrationId
                               */
                               public void setCreatedByIntegrationId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIntegrationIdTracker = true;
                                       } else {
                                          localCreatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByExternalSystemId
                        */

                        
                                    protected java.lang.String localCreatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByExternalSystemId(){
                               return localCreatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByExternalSystemId
                               */
                               public void setCreatedByExternalSystemId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByExternalSystemIdTracker = true;
                                       } else {
                                          localCreatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByEMailAddr
                        */

                        
                                    protected java.lang.String localCreatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByEMailAddr(){
                               return localCreatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByEMailAddr
                               */
                               public void setCreatedByEMailAddr(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByEMailAddrTracker = true;
                                       } else {
                                          localCreatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedBy
                        */

                        
                                    protected java.lang.String localCreatedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedBy(){
                               return localCreatedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedBy
                               */
                               public void setCreatedBy(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByTracker = true;
                                       } else {
                                          localCreatedByTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedBy=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedBy
                        */

                        
                                    protected java.lang.String localModifiedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifiedBy(){
                               return localModifiedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedBy
                               */
                               public void setModifiedBy(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByTracker = true;
                                       } else {
                                          localModifiedByTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedBy=param;
                                    

                               }
                            

                        /**
                        * field for Operation
                        * This was an Attribute!
                        */

                        
                                    protected java.lang.String localOperation ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOperation(){
                               return localOperation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Operation
                               */
                               public void setOperation(java.lang.String param){
                            
                                            this.localOperation=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       DelegatedUserData.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Data");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DelegatedUserData",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DelegatedUserData",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localOperation != null){
                                        
                                                writeAttribute("",
                                                         "operation",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperation), xmlWriter);

                                            
                                      }
                                     if (localModifiedDateTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedDate");
                                    }
                                

                                          if (localModifiedDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedDate));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedDateTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedDate");
                                    }
                                

                                          if (localCreatedDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedDate));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedByIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedById", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedById");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedById");
                                    }
                                

                                          if (localModifiedById==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifiedById);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedById", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedById");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedById");
                                    }
                                

                                          if (localCreatedById==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedById);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModId");
                                    }
                                
                                               if (localModId==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ModId cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModId));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Id", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Id");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Id");
                                    }
                                

                                          if (localId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUserIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UserId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UserId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UserId");
                                    }
                                

                                          if (localUserId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UserId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUserId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLastNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"LastName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"LastName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("LastName");
                                    }
                                

                                          if (localLastName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LastName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLastName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFirstNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"FirstName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"FirstName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("FirstName");
                                    }
                                

                                          if (localFirstName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FirstName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFirstName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUserRoleTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UserRole", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UserRole");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UserRole");
                                    }
                                

                                          if (localUserRole==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UserRole cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUserRole);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAliasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Alias", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Alias");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Alias");
                                    }
                                

                                          if (localAlias==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Alias cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAlias);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartDateTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"StartDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"StartDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("StartDate");
                                    }
                                

                                          if (localStartDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localExternalSystemIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ExternalSystemId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ExternalSystemId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ExternalSystemId");
                                    }
                                

                                          if (localExternalSystemId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ExternalSystemId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localExternalSystemId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRespIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"RespId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"RespId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("RespId");
                                    }
                                

                                          if (localRespId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("RespId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRespId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRoleTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Role", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Role");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Role");
                                    }
                                

                                          if (localRole==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Role cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRole);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByFirstNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByFirstName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByFirstName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByFirstName");
                                    }
                                

                                          if (localUpdatedByFirstName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByFirstName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByLastNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByLastName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByLastName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByLastName");
                                    }
                                

                                          if (localUpdatedByLastName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByLastName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByUserSignInIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByUserSignInId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByUserSignInId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByUserSignInId");
                                    }
                                

                                          if (localUpdatedByUserSignInId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByUserSignInId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByAliasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByAlias", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByAlias");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByAlias");
                                    }
                                

                                          if (localUpdatedByAlias==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByAlias);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByFullNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByFullName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByFullName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByFullName");
                                    }
                                

                                          if (localUpdatedByFullName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByFullName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByIntegrationIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByIntegrationId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByIntegrationId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByIntegrationId");
                                    }
                                

                                          if (localUpdatedByIntegrationId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByIntegrationId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByExternalSystemIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByExternalSystemId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByExternalSystemId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByExternalSystemId");
                                    }
                                

                                          if (localUpdatedByExternalSystemId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByExternalSystemId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByEMailAddrTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByEMailAddr", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByEMailAddr");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByEMailAddr");
                                    }
                                

                                          if (localUpdatedByEMailAddr==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByEMailAddr);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByFirstNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByFirstName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByFirstName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByFirstName");
                                    }
                                

                                          if (localCreatedByFirstName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByFirstName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByLastNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByLastName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByLastName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByLastName");
                                    }
                                

                                          if (localCreatedByLastName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByLastName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByUserSignInIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByUserSignInId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByUserSignInId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByUserSignInId");
                                    }
                                

                                          if (localCreatedByUserSignInId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByUserSignInId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByAliasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByAlias", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByAlias");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByAlias");
                                    }
                                

                                          if (localCreatedByAlias==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByAlias);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByFullNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByFullName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByFullName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByFullName");
                                    }
                                

                                          if (localCreatedByFullName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByFullName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByIntegrationIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByIntegrationId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByIntegrationId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByIntegrationId");
                                    }
                                

                                          if (localCreatedByIntegrationId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByIntegrationId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByExternalSystemIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByExternalSystemId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByExternalSystemId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByExternalSystemId");
                                    }
                                

                                          if (localCreatedByExternalSystemId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByExternalSystemId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByEMailAddrTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByEMailAddr", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByEMailAddr");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByEMailAddr");
                                    }
                                

                                          if (localCreatedByEMailAddr==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByEMailAddr);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedBy", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedBy");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedBy");
                                    }
                                

                                          if (localCreatedBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedByTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedBy", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedBy");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedBy");
                                    }
                                

                                          if (localModifiedBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifiedBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localModifiedDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedDate"));
                                 
                                        if (localModifiedDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                        }
                                    } if (localCreatedDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedDate"));
                                 
                                        if (localCreatedDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                        }
                                    } if (localModifiedByIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedById"));
                                 
                                        if (localModifiedById != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedById));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                        }
                                    } if (localCreatedByIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedById"));
                                 
                                        if (localCreatedById != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedById));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                        }
                                    } if (localModIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModId"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModId));
                            } if (localIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Id"));
                                 
                                        if (localId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                        }
                                    } if (localUserIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UserId"));
                                 
                                        if (localUserId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UserId cannot be null!!");
                                        }
                                    } if (localLastNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "LastName"));
                                 
                                        if (localLastName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LastName cannot be null!!");
                                        }
                                    } if (localFirstNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "FirstName"));
                                 
                                        if (localFirstName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFirstName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FirstName cannot be null!!");
                                        }
                                    } if (localUserRoleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UserRole"));
                                 
                                        if (localUserRole != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserRole));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UserRole cannot be null!!");
                                        }
                                    } if (localAliasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Alias"));
                                 
                                        if (localAlias != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAlias));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Alias cannot be null!!");
                                        }
                                    } if (localStartDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "StartDate"));
                                 
                                        if (localStartDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                        }
                                    } if (localExternalSystemIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ExternalSystemId"));
                                 
                                        if (localExternalSystemId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExternalSystemId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ExternalSystemId cannot be null!!");
                                        }
                                    } if (localRespIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "RespId"));
                                 
                                        if (localRespId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRespId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("RespId cannot be null!!");
                                        }
                                    } if (localRoleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Role"));
                                 
                                        if (localRole != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRole));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Role cannot be null!!");
                                        }
                                    } if (localUpdatedByFirstNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByFirstName"));
                                 
                                        if (localUpdatedByFirstName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByFirstName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                        }
                                    } if (localUpdatedByLastNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByLastName"));
                                 
                                        if (localUpdatedByLastName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByLastName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                        }
                                    } if (localUpdatedByUserSignInIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByUserSignInId"));
                                 
                                        if (localUpdatedByUserSignInId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByUserSignInId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                        }
                                    } if (localUpdatedByAliasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByAlias"));
                                 
                                        if (localUpdatedByAlias != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByAlias));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                        }
                                    } if (localUpdatedByFullNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByFullName"));
                                 
                                        if (localUpdatedByFullName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByFullName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                        }
                                    } if (localUpdatedByIntegrationIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByIntegrationId"));
                                 
                                        if (localUpdatedByIntegrationId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByIntegrationId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                        }
                                    } if (localUpdatedByExternalSystemIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByExternalSystemId"));
                                 
                                        if (localUpdatedByExternalSystemId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByExternalSystemId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                        }
                                    } if (localUpdatedByEMailAddrTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByEMailAddr"));
                                 
                                        if (localUpdatedByEMailAddr != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByEMailAddr));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                        }
                                    } if (localCreatedByFirstNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByFirstName"));
                                 
                                        if (localCreatedByFirstName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByFirstName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                        }
                                    } if (localCreatedByLastNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByLastName"));
                                 
                                        if (localCreatedByLastName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByLastName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                        }
                                    } if (localCreatedByUserSignInIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByUserSignInId"));
                                 
                                        if (localCreatedByUserSignInId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByUserSignInId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                        }
                                    } if (localCreatedByAliasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByAlias"));
                                 
                                        if (localCreatedByAlias != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByAlias));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                        }
                                    } if (localCreatedByFullNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByFullName"));
                                 
                                        if (localCreatedByFullName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByFullName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                        }
                                    } if (localCreatedByIntegrationIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByIntegrationId"));
                                 
                                        if (localCreatedByIntegrationId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByIntegrationId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                        }
                                    } if (localCreatedByExternalSystemIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByExternalSystemId"));
                                 
                                        if (localCreatedByExternalSystemId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByExternalSystemId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                        }
                                    } if (localCreatedByEMailAddrTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByEMailAddr"));
                                 
                                        if (localCreatedByEMailAddr != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByEMailAddr));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                        }
                                    } if (localCreatedByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedBy"));
                                 
                                        if (localCreatedBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                        }
                                    } if (localModifiedByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedBy"));
                                 
                                        if (localModifiedBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                        }
                                    }
                            attribList.add(
                            new javax.xml.namespace.QName("","operation"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperation));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DelegatedUserData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DelegatedUserData object =
                new DelegatedUserData();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DelegatedUserData".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DelegatedUserData)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "operation"
                    java.lang.String tempAttribOperation =
                        
                                reader.getAttributeValue(null,"operation");
                            
                   if (tempAttribOperation!=null){
                         java.lang.String content = tempAttribOperation;
                        
                                                 object.setOperation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribOperation));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("operation");
                    
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedDate").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedDate").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedById").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedById(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedById").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedById(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Id").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UserId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUserId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","LastName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLastName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","FirstName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFirstName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UserRole").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUserRole(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Alias").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAlias(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","StartDate").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ExternalSystemId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setExternalSystemId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","RespId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRespId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Role").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRole(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByFirstName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByFirstName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByLastName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByLastName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByUserSignInId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByUserSignInId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByAlias").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByAlias(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByFullName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByFullName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByIntegrationId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByIntegrationId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByExternalSystemId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByExternalSystemId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByEMailAddr").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByEMailAddr(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByFirstName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByFirstName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByLastName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByLastName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByUserSignInId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByUserSignInId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByAlias").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByAlias(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByFullName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByFullName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByIntegrationId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByIntegrationId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByExternalSystemId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByExternalSystemId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByEMailAddr").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByEMailAddr(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedBy").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedBy").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class DelegatedFromUserQuery
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = DelegatedFromUserQuery
                Namespace URI = urn:/crmondemand/xml/User/Query
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Query")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ModifiedDate
                        */

                        
                                    protected QueryType localModifiedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedDate(){
                               return localModifiedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedDate
                               */
                               public void setModifiedDate(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedDateTracker = true;
                                       } else {
                                          localModifiedDateTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedDate=param;
                                    

                               }
                            

                        /**
                        * field for CreatedDate
                        */

                        
                                    protected QueryType localCreatedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedDate(){
                               return localCreatedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedDate
                               */
                               public void setCreatedDate(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedDateTracker = true;
                                       } else {
                                          localCreatedDateTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedDate=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedById
                        */

                        
                                    protected QueryType localModifiedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedById(){
                               return localModifiedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedById
                               */
                               public void setModifiedById(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByIdTracker = true;
                                       } else {
                                          localModifiedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedById=param;
                                    

                               }
                            

                        /**
                        * field for CreatedById
                        */

                        
                                    protected QueryType localCreatedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedById(){
                               return localCreatedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedById
                               */
                               public void setCreatedById(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIdTracker = true;
                                       } else {
                                          localCreatedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedById=param;
                                    

                               }
                            

                        /**
                        * field for ModId
                        */

                        
                                    protected QueryType localModId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModId(){
                               return localModId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModId
                               */
                               public void setModId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModIdTracker = true;
                                       } else {
                                          localModIdTracker = false;
                                              
                                       }
                                   
                                            this.localModId=param;
                                    

                               }
                            

                        /**
                        * field for Id
                        */

                        
                                    protected QueryType localId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getId(){
                               return localId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Id
                               */
                               public void setId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIdTracker = true;
                                       } else {
                                          localIdTracker = false;
                                              
                                       }
                                   
                                            this.localId=param;
                                    

                               }
                            

                        /**
                        * field for FirstName
                        */

                        
                                    protected QueryType localFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getFirstName(){
                               return localFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FirstName
                               */
                               public void setFirstName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFirstNameTracker = true;
                                       } else {
                                          localFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localFirstName=param;
                                    

                               }
                            

                        /**
                        * field for UserId
                        */

                        
                                    protected QueryType localUserId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUserId(){
                               return localUserId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserId
                               */
                               public void setUserId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserIdTracker = true;
                                       } else {
                                          localUserIdTracker = false;
                                              
                                       }
                                   
                                            this.localUserId=param;
                                    

                               }
                            

                        /**
                        * field for LastName
                        */

                        
                                    protected QueryType localLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getLastName(){
                               return localLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LastName
                               */
                               public void setLastName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLastNameTracker = true;
                                       } else {
                                          localLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localLastName=param;
                                    

                               }
                            

                        /**
                        * field for Alias
                        */

                        
                                    protected QueryType localAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getAlias(){
                               return localAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Alias
                               */
                               public void setAlias(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAliasTracker = true;
                                       } else {
                                          localAliasTracker = false;
                                              
                                       }
                                   
                                            this.localAlias=param;
                                    

                               }
                            

                        /**
                        * field for ExternalSystemId
                        */

                        
                                    protected QueryType localExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getExternalSystemId(){
                               return localExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ExternalSystemId
                               */
                               public void setExternalSystemId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExternalSystemIdTracker = true;
                                       } else {
                                          localExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for RespId
                        */

                        
                                    protected QueryType localRespId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRespIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getRespId(){
                               return localRespId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RespId
                               */
                               public void setRespId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRespIdTracker = true;
                                       } else {
                                          localRespIdTracker = false;
                                              
                                       }
                                   
                                            this.localRespId=param;
                                    

                               }
                            

                        /**
                        * field for Role
                        */

                        
                                    protected QueryType localRole ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRoleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getRole(){
                               return localRole;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Role
                               */
                               public void setRole(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRoleTracker = true;
                                       } else {
                                          localRoleTracker = false;
                                              
                                       }
                                   
                                            this.localRole=param;
                                    

                               }
                            

                        /**
                        * field for StartDate
                        */

                        
                                    protected QueryType localStartDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getStartDate(){
                               return localStartDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartDate
                               */
                               public void setStartDate(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localStartDateTracker = true;
                                       } else {
                                          localStartDateTracker = false;
                                              
                                       }
                                   
                                            this.localStartDate=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFirstName
                        */

                        
                                    protected QueryType localUpdatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByFirstName(){
                               return localUpdatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFirstName
                               */
                               public void setUpdatedByFirstName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFirstNameTracker = true;
                                       } else {
                                          localUpdatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByLastName
                        */

                        
                                    protected QueryType localUpdatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByLastName(){
                               return localUpdatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByLastName
                               */
                               public void setUpdatedByLastName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByLastNameTracker = true;
                                       } else {
                                          localUpdatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByUserSignInId
                        */

                        
                                    protected QueryType localUpdatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByUserSignInId(){
                               return localUpdatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByUserSignInId
                               */
                               public void setUpdatedByUserSignInId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByUserSignInIdTracker = true;
                                       } else {
                                          localUpdatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByAlias
                        */

                        
                                    protected QueryType localUpdatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByAlias(){
                               return localUpdatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByAlias
                               */
                               public void setUpdatedByAlias(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByAliasTracker = true;
                                       } else {
                                          localUpdatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFullName
                        */

                        
                                    protected QueryType localUpdatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByFullName(){
                               return localUpdatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFullName
                               */
                               public void setUpdatedByFullName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFullNameTracker = true;
                                       } else {
                                          localUpdatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByIntegrationId
                        */

                        
                                    protected QueryType localUpdatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByIntegrationId(){
                               return localUpdatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByIntegrationId
                               */
                               public void setUpdatedByIntegrationId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByIntegrationIdTracker = true;
                                       } else {
                                          localUpdatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByExternalSystemId
                        */

                        
                                    protected QueryType localUpdatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByExternalSystemId(){
                               return localUpdatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByExternalSystemId
                               */
                               public void setUpdatedByExternalSystemId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByExternalSystemIdTracker = true;
                                       } else {
                                          localUpdatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByEMailAddr
                        */

                        
                                    protected QueryType localUpdatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByEMailAddr(){
                               return localUpdatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByEMailAddr
                               */
                               public void setUpdatedByEMailAddr(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByEMailAddrTracker = true;
                                       } else {
                                          localUpdatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFirstName
                        */

                        
                                    protected QueryType localCreatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByFirstName(){
                               return localCreatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFirstName
                               */
                               public void setCreatedByFirstName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFirstNameTracker = true;
                                       } else {
                                          localCreatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByLastName
                        */

                        
                                    protected QueryType localCreatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByLastName(){
                               return localCreatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByLastName
                               */
                               public void setCreatedByLastName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByLastNameTracker = true;
                                       } else {
                                          localCreatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByUserSignInId
                        */

                        
                                    protected QueryType localCreatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByUserSignInId(){
                               return localCreatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByUserSignInId
                               */
                               public void setCreatedByUserSignInId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByUserSignInIdTracker = true;
                                       } else {
                                          localCreatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByAlias
                        */

                        
                                    protected QueryType localCreatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByAlias(){
                               return localCreatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByAlias
                               */
                               public void setCreatedByAlias(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByAliasTracker = true;
                                       } else {
                                          localCreatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFullName
                        */

                        
                                    protected QueryType localCreatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByFullName(){
                               return localCreatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFullName
                               */
                               public void setCreatedByFullName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFullNameTracker = true;
                                       } else {
                                          localCreatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByIntegrationId
                        */

                        
                                    protected QueryType localCreatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByIntegrationId(){
                               return localCreatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByIntegrationId
                               */
                               public void setCreatedByIntegrationId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIntegrationIdTracker = true;
                                       } else {
                                          localCreatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByExternalSystemId
                        */

                        
                                    protected QueryType localCreatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByExternalSystemId(){
                               return localCreatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByExternalSystemId
                               */
                               public void setCreatedByExternalSystemId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByExternalSystemIdTracker = true;
                                       } else {
                                          localCreatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByEMailAddr
                        */

                        
                                    protected QueryType localCreatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByEMailAddr(){
                               return localCreatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByEMailAddr
                               */
                               public void setCreatedByEMailAddr(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByEMailAddrTracker = true;
                                       } else {
                                          localCreatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedBy
                        */

                        
                                    protected QueryType localCreatedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedBy(){
                               return localCreatedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedBy
                               */
                               public void setCreatedBy(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByTracker = true;
                                       } else {
                                          localCreatedByTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedBy=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedBy
                        */

                        
                                    protected QueryType localModifiedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedBy(){
                               return localModifiedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedBy
                               */
                               public void setModifiedBy(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByTracker = true;
                                       } else {
                                          localModifiedByTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedBy=param;
                                    

                               }
                            

                        /**
                        * field for Searchspec
                        * This was an Attribute!
                        */

                        
                                    protected java.lang.String localSearchspec ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSearchspec(){
                               return localSearchspec;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Searchspec
                               */
                               public void setSearchspec(java.lang.String param){
                            
                                            this.localSearchspec=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       DelegatedFromUserQuery.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Query");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DelegatedFromUserQuery",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DelegatedFromUserQuery",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localSearchspec != null){
                                        
                                                writeAttribute("",
                                                         "searchspec",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSearchspec), xmlWriter);

                                            
                                      }
                                     if (localModifiedDateTracker){
                                            if (localModifiedDate==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                            }
                                           localModifiedDate.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedDate"),
                                               factory,xmlWriter);
                                        } if (localCreatedDateTracker){
                                            if (localCreatedDate==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                            }
                                           localCreatedDate.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedDate"),
                                               factory,xmlWriter);
                                        } if (localModifiedByIdTracker){
                                            if (localModifiedById==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                            }
                                           localModifiedById.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedById"),
                                               factory,xmlWriter);
                                        } if (localCreatedByIdTracker){
                                            if (localCreatedById==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                            }
                                           localCreatedById.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedById"),
                                               factory,xmlWriter);
                                        } if (localModIdTracker){
                                            if (localModId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModId cannot be null!!");
                                            }
                                           localModId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModId"),
                                               factory,xmlWriter);
                                        } if (localIdTracker){
                                            if (localId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                            }
                                           localId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Id"),
                                               factory,xmlWriter);
                                        } if (localFirstNameTracker){
                                            if (localFirstName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FirstName cannot be null!!");
                                            }
                                           localFirstName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","FirstName"),
                                               factory,xmlWriter);
                                        } if (localUserIdTracker){
                                            if (localUserId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UserId cannot be null!!");
                                            }
                                           localUserId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserId"),
                                               factory,xmlWriter);
                                        } if (localLastNameTracker){
                                            if (localLastName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("LastName cannot be null!!");
                                            }
                                           localLastName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LastName"),
                                               factory,xmlWriter);
                                        } if (localAliasTracker){
                                            if (localAlias==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Alias cannot be null!!");
                                            }
                                           localAlias.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Alias"),
                                               factory,xmlWriter);
                                        } if (localExternalSystemIdTracker){
                                            if (localExternalSystemId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ExternalSystemId cannot be null!!");
                                            }
                                           localExternalSystemId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ExternalSystemId"),
                                               factory,xmlWriter);
                                        } if (localRespIdTracker){
                                            if (localRespId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("RespId cannot be null!!");
                                            }
                                           localRespId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","RespId"),
                                               factory,xmlWriter);
                                        } if (localRoleTracker){
                                            if (localRole==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Role cannot be null!!");
                                            }
                                           localRole.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Role"),
                                               factory,xmlWriter);
                                        } if (localStartDateTracker){
                                            if (localStartDate==null){
                                                 throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                            }
                                           localStartDate.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","StartDate"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByFirstNameTracker){
                                            if (localUpdatedByFirstName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                            }
                                           localUpdatedByFirstName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFirstName"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByLastNameTracker){
                                            if (localUpdatedByLastName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                            }
                                           localUpdatedByLastName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByLastName"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByUserSignInIdTracker){
                                            if (localUpdatedByUserSignInId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                            }
                                           localUpdatedByUserSignInId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByUserSignInId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByAliasTracker){
                                            if (localUpdatedByAlias==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                            }
                                           localUpdatedByAlias.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByAlias"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByFullNameTracker){
                                            if (localUpdatedByFullName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                            }
                                           localUpdatedByFullName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFullName"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByIntegrationIdTracker){
                                            if (localUpdatedByIntegrationId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                            }
                                           localUpdatedByIntegrationId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByIntegrationId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByExternalSystemIdTracker){
                                            if (localUpdatedByExternalSystemId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                            }
                                           localUpdatedByExternalSystemId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByExternalSystemId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByEMailAddrTracker){
                                            if (localUpdatedByEMailAddr==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                            }
                                           localUpdatedByEMailAddr.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByEMailAddr"),
                                               factory,xmlWriter);
                                        } if (localCreatedByFirstNameTracker){
                                            if (localCreatedByFirstName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                            }
                                           localCreatedByFirstName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFirstName"),
                                               factory,xmlWriter);
                                        } if (localCreatedByLastNameTracker){
                                            if (localCreatedByLastName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                            }
                                           localCreatedByLastName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByLastName"),
                                               factory,xmlWriter);
                                        } if (localCreatedByUserSignInIdTracker){
                                            if (localCreatedByUserSignInId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                            }
                                           localCreatedByUserSignInId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByUserSignInId"),
                                               factory,xmlWriter);
                                        } if (localCreatedByAliasTracker){
                                            if (localCreatedByAlias==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                            }
                                           localCreatedByAlias.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByAlias"),
                                               factory,xmlWriter);
                                        } if (localCreatedByFullNameTracker){
                                            if (localCreatedByFullName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                            }
                                           localCreatedByFullName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFullName"),
                                               factory,xmlWriter);
                                        } if (localCreatedByIntegrationIdTracker){
                                            if (localCreatedByIntegrationId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                            }
                                           localCreatedByIntegrationId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByIntegrationId"),
                                               factory,xmlWriter);
                                        } if (localCreatedByExternalSystemIdTracker){
                                            if (localCreatedByExternalSystemId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                            }
                                           localCreatedByExternalSystemId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByExternalSystemId"),
                                               factory,xmlWriter);
                                        } if (localCreatedByEMailAddrTracker){
                                            if (localCreatedByEMailAddr==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                            }
                                           localCreatedByEMailAddr.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByEMailAddr"),
                                               factory,xmlWriter);
                                        } if (localCreatedByTracker){
                                            if (localCreatedBy==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                            }
                                           localCreatedBy.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedBy"),
                                               factory,xmlWriter);
                                        } if (localModifiedByTracker){
                                            if (localModifiedBy==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                            }
                                           localModifiedBy.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedBy"),
                                               factory,xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localModifiedDateTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedDate"));
                            
                            
                                    if (localModifiedDate==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                    }
                                    elementList.add(localModifiedDate);
                                } if (localCreatedDateTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedDate"));
                            
                            
                                    if (localCreatedDate==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                    }
                                    elementList.add(localCreatedDate);
                                } if (localModifiedByIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedById"));
                            
                            
                                    if (localModifiedById==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                    }
                                    elementList.add(localModifiedById);
                                } if (localCreatedByIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedById"));
                            
                            
                                    if (localCreatedById==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                    }
                                    elementList.add(localCreatedById);
                                } if (localModIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModId"));
                            
                            
                                    if (localModId==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModId cannot be null!!");
                                    }
                                    elementList.add(localModId);
                                } if (localIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Id"));
                            
                            
                                    if (localId==null){
                                         throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                    }
                                    elementList.add(localId);
                                } if (localFirstNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "FirstName"));
                            
                            
                                    if (localFirstName==null){
                                         throw new org.apache.axis2.databinding.ADBException("FirstName cannot be null!!");
                                    }
                                    elementList.add(localFirstName);
                                } if (localUserIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UserId"));
                            
                            
                                    if (localUserId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UserId cannot be null!!");
                                    }
                                    elementList.add(localUserId);
                                } if (localLastNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "LastName"));
                            
                            
                                    if (localLastName==null){
                                         throw new org.apache.axis2.databinding.ADBException("LastName cannot be null!!");
                                    }
                                    elementList.add(localLastName);
                                } if (localAliasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Alias"));
                            
                            
                                    if (localAlias==null){
                                         throw new org.apache.axis2.databinding.ADBException("Alias cannot be null!!");
                                    }
                                    elementList.add(localAlias);
                                } if (localExternalSystemIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ExternalSystemId"));
                            
                            
                                    if (localExternalSystemId==null){
                                         throw new org.apache.axis2.databinding.ADBException("ExternalSystemId cannot be null!!");
                                    }
                                    elementList.add(localExternalSystemId);
                                } if (localRespIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "RespId"));
                            
                            
                                    if (localRespId==null){
                                         throw new org.apache.axis2.databinding.ADBException("RespId cannot be null!!");
                                    }
                                    elementList.add(localRespId);
                                } if (localRoleTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Role"));
                            
                            
                                    if (localRole==null){
                                         throw new org.apache.axis2.databinding.ADBException("Role cannot be null!!");
                                    }
                                    elementList.add(localRole);
                                } if (localStartDateTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "StartDate"));
                            
                            
                                    if (localStartDate==null){
                                         throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                    }
                                    elementList.add(localStartDate);
                                } if (localUpdatedByFirstNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByFirstName"));
                            
                            
                                    if (localUpdatedByFirstName==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByFirstName);
                                } if (localUpdatedByLastNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByLastName"));
                            
                            
                                    if (localUpdatedByLastName==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByLastName);
                                } if (localUpdatedByUserSignInIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByUserSignInId"));
                            
                            
                                    if (localUpdatedByUserSignInId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByUserSignInId);
                                } if (localUpdatedByAliasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByAlias"));
                            
                            
                                    if (localUpdatedByAlias==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByAlias);
                                } if (localUpdatedByFullNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByFullName"));
                            
                            
                                    if (localUpdatedByFullName==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByFullName);
                                } if (localUpdatedByIntegrationIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByIntegrationId"));
                            
                            
                                    if (localUpdatedByIntegrationId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByIntegrationId);
                                } if (localUpdatedByExternalSystemIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByExternalSystemId"));
                            
                            
                                    if (localUpdatedByExternalSystemId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByExternalSystemId);
                                } if (localUpdatedByEMailAddrTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByEMailAddr"));
                            
                            
                                    if (localUpdatedByEMailAddr==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByEMailAddr);
                                } if (localCreatedByFirstNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByFirstName"));
                            
                            
                                    if (localCreatedByFirstName==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                    }
                                    elementList.add(localCreatedByFirstName);
                                } if (localCreatedByLastNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByLastName"));
                            
                            
                                    if (localCreatedByLastName==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                    }
                                    elementList.add(localCreatedByLastName);
                                } if (localCreatedByUserSignInIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByUserSignInId"));
                            
                            
                                    if (localCreatedByUserSignInId==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                    }
                                    elementList.add(localCreatedByUserSignInId);
                                } if (localCreatedByAliasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByAlias"));
                            
                            
                                    if (localCreatedByAlias==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                    }
                                    elementList.add(localCreatedByAlias);
                                } if (localCreatedByFullNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByFullName"));
                            
                            
                                    if (localCreatedByFullName==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                    }
                                    elementList.add(localCreatedByFullName);
                                } if (localCreatedByIntegrationIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByIntegrationId"));
                            
                            
                                    if (localCreatedByIntegrationId==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                    }
                                    elementList.add(localCreatedByIntegrationId);
                                } if (localCreatedByExternalSystemIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByExternalSystemId"));
                            
                            
                                    if (localCreatedByExternalSystemId==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                    }
                                    elementList.add(localCreatedByExternalSystemId);
                                } if (localCreatedByEMailAddrTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByEMailAddr"));
                            
                            
                                    if (localCreatedByEMailAddr==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                    }
                                    elementList.add(localCreatedByEMailAddr);
                                } if (localCreatedByTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedBy"));
                            
                            
                                    if (localCreatedBy==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                    }
                                    elementList.add(localCreatedBy);
                                } if (localModifiedByTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedBy"));
                            
                            
                                    if (localModifiedBy==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                    }
                                    elementList.add(localModifiedBy);
                                }
                            attribList.add(
                            new javax.xml.namespace.QName("","searchspec"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSearchspec));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DelegatedFromUserQuery parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DelegatedFromUserQuery object =
                new DelegatedFromUserQuery();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DelegatedFromUserQuery".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DelegatedFromUserQuery)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "searchspec"
                    java.lang.String tempAttribSearchspec =
                        
                                reader.getAttributeValue(null,"searchspec");
                            
                   if (tempAttribSearchspec!=null){
                         java.lang.String content = tempAttribSearchspec;
                        
                                                 object.setSearchspec(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribSearchspec));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("searchspec");
                    
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedDate").equals(reader.getName())){
                                
                                                object.setModifiedDate(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedDate").equals(reader.getName())){
                                
                                                object.setCreatedDate(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedById").equals(reader.getName())){
                                
                                                object.setModifiedById(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedById").equals(reader.getName())){
                                
                                                object.setCreatedById(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModId").equals(reader.getName())){
                                
                                                object.setModId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Id").equals(reader.getName())){
                                
                                                object.setId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","FirstName").equals(reader.getName())){
                                
                                                object.setFirstName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserId").equals(reader.getName())){
                                
                                                object.setUserId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LastName").equals(reader.getName())){
                                
                                                object.setLastName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Alias").equals(reader.getName())){
                                
                                                object.setAlias(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ExternalSystemId").equals(reader.getName())){
                                
                                                object.setExternalSystemId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","RespId").equals(reader.getName())){
                                
                                                object.setRespId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Role").equals(reader.getName())){
                                
                                                object.setRole(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","StartDate").equals(reader.getName())){
                                
                                                object.setStartDate(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFirstName").equals(reader.getName())){
                                
                                                object.setUpdatedByFirstName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByLastName").equals(reader.getName())){
                                
                                                object.setUpdatedByLastName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByUserSignInId").equals(reader.getName())){
                                
                                                object.setUpdatedByUserSignInId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByAlias").equals(reader.getName())){
                                
                                                object.setUpdatedByAlias(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFullName").equals(reader.getName())){
                                
                                                object.setUpdatedByFullName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByIntegrationId").equals(reader.getName())){
                                
                                                object.setUpdatedByIntegrationId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByExternalSystemId").equals(reader.getName())){
                                
                                                object.setUpdatedByExternalSystemId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByEMailAddr").equals(reader.getName())){
                                
                                                object.setUpdatedByEMailAddr(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFirstName").equals(reader.getName())){
                                
                                                object.setCreatedByFirstName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByLastName").equals(reader.getName())){
                                
                                                object.setCreatedByLastName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByUserSignInId").equals(reader.getName())){
                                
                                                object.setCreatedByUserSignInId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByAlias").equals(reader.getName())){
                                
                                                object.setCreatedByAlias(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFullName").equals(reader.getName())){
                                
                                                object.setCreatedByFullName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByIntegrationId").equals(reader.getName())){
                                
                                                object.setCreatedByIntegrationId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByExternalSystemId").equals(reader.getName())){
                                
                                                object.setCreatedByExternalSystemId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByEMailAddr").equals(reader.getName())){
                                
                                                object.setCreatedByEMailAddr(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedBy").equals(reader.getName())){
                                
                                                object.setCreatedBy(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedBy").equals(reader.getName())){
                                
                                                object.setModifiedBy(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ListOfUserE
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:/crmondemand/xml/User/Query",
                "ListOfUser",
                "ns2");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Query")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ListOfUser
                        */

                        
                                    protected ListOfUserQuery localListOfUser ;
                                

                           /**
                           * Auto generated getter method
                           * @return ListOfUserQuery
                           */
                           public  ListOfUserQuery getListOfUser(){
                               return localListOfUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfUser
                               */
                               public void setListOfUser(ListOfUserQuery param){
                            
                                            this.localListOfUser=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ListOfUserE.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                                 if (localListOfUser==null){
                                   throw new org.apache.axis2.databinding.ADBException("Property cannot be null!");
                                 }
                                 localListOfUser.serialize(MY_QNAME,factory,xmlWriter);
                            

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                return localListOfUser.getPullParser(MY_QNAME);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ListOfUserE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ListOfUserE object =
                new ListOfUserE();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ListOfUser").equals(reader.getName())){
                                
                                                object.setListOfUser(ListOfUserQuery.Factory.parse(reader));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ListOfDelegatedFromUserData
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ListOfDelegatedFromUserData
                Namespace URI = urn:/crmondemand/xml/User/Data
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Data")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for DelegatedFromUser
                        * This was an Array!
                        */

                        
                                    protected DelegatedFromUserData[] localDelegatedFromUser ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDelegatedFromUserTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return DelegatedFromUserData[]
                           */
                           public  DelegatedFromUserData[] getDelegatedFromUser(){
                               return localDelegatedFromUser;
                           }

                           
                        


                               
                              /**
                               * validate the array for DelegatedFromUser
                               */
                              protected void validateDelegatedFromUser(DelegatedFromUserData[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param DelegatedFromUser
                              */
                              public void setDelegatedFromUser(DelegatedFromUserData[] param){
                              
                                   validateDelegatedFromUser(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localDelegatedFromUserTracker = true;
                                          } else {
                                             localDelegatedFromUserTracker = false;
                                                 
                                          }
                                      
                                      this.localDelegatedFromUser=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param DelegatedFromUserData
                             */
                             public void addDelegatedFromUser(DelegatedFromUserData param){
                                   if (localDelegatedFromUser == null){
                                   localDelegatedFromUser = new DelegatedFromUserData[]{};
                                   }

                            
                                 //update the setting tracker
                                localDelegatedFromUserTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localDelegatedFromUser);
                               list.add(param);
                               this.localDelegatedFromUser =
                             (DelegatedFromUserData[])list.toArray(
                            new DelegatedFromUserData[list.size()]);

                             }
                             

                        /**
                        * field for Lastpage
                        * This was an Attribute!
                        */

                        
                                    protected boolean localLastpage ;
                                

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getLastpage(){
                               return localLastpage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Lastpage
                               */
                               public void setLastpage(boolean param){
                            
                                            this.localLastpage=param;
                                    

                               }
                            

                        /**
                        * field for Recordcount
                        * This was an Attribute!
                        */

                        
                                    protected java.math.BigInteger localRecordcount ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigInteger
                           */
                           public  java.math.BigInteger getRecordcount(){
                               return localRecordcount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Recordcount
                               */
                               public void setRecordcount(java.math.BigInteger param){
                            
                                            this.localRecordcount=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ListOfDelegatedFromUserData.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Data");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ListOfDelegatedFromUserData",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ListOfDelegatedFromUserData",
                           xmlWriter);
                   }

               
                   }
               
                                                   if (true) {
                                               
                                                writeAttribute("",
                                                         "lastpage",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastpage), xmlWriter);

                                            
                                      }
                                    
                                            if (localRecordcount != null){
                                        
                                                writeAttribute("",
                                                         "recordcount",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcount), xmlWriter);

                                            
                                      }
                                     if (localDelegatedFromUserTracker){
                                       if (localDelegatedFromUser!=null){
                                            for (int i = 0;i < localDelegatedFromUser.length;i++){
                                                if (localDelegatedFromUser[i] != null){
                                                 localDelegatedFromUser[i].serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DelegatedFromUser"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("DelegatedFromUser cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localDelegatedFromUserTracker){
                             if (localDelegatedFromUser!=null) {
                                 for (int i = 0;i < localDelegatedFromUser.length;i++){

                                    if (localDelegatedFromUser[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                          "DelegatedFromUser"));
                                         elementList.add(localDelegatedFromUser[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("DelegatedFromUser cannot be null!!");
                                    
                             }

                        }
                            attribList.add(
                            new javax.xml.namespace.QName("","lastpage"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastpage));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","recordcount"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcount));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ListOfDelegatedFromUserData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ListOfDelegatedFromUserData object =
                new ListOfDelegatedFromUserData();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ListOfDelegatedFromUserData".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ListOfDelegatedFromUserData)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "lastpage"
                    java.lang.String tempAttribLastpage =
                        
                                reader.getAttributeValue(null,"lastpage");
                            
                   if (tempAttribLastpage!=null){
                         java.lang.String content = tempAttribLastpage;
                        
                                                 object.setLastpage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribLastpage));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("lastpage");
                    
                    // handle attribute "recordcount"
                    java.lang.String tempAttribRecordcount =
                        
                                reader.getAttributeValue(null,"recordcount");
                            
                   if (tempAttribRecordcount!=null){
                         java.lang.String content = tempAttribRecordcount;
                        
                                                 object.setRecordcount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(tempAttribRecordcount));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("recordcount");
                    
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DelegatedFromUser").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(DelegatedFromUserData.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DelegatedFromUser").equals(reader.getName())){
                                                                    list1.add(DelegatedFromUserData.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setDelegatedFromUser((DelegatedFromUserData[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                DelegatedFromUserData.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ListOfDelegatedUserData
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ListOfDelegatedUserData
                Namespace URI = urn:/crmondemand/xml/User/Data
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Data")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for DelegatedUser
                        * This was an Array!
                        */

                        
                                    protected DelegatedUserData[] localDelegatedUser ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDelegatedUserTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return DelegatedUserData[]
                           */
                           public  DelegatedUserData[] getDelegatedUser(){
                               return localDelegatedUser;
                           }

                           
                        


                               
                              /**
                               * validate the array for DelegatedUser
                               */
                              protected void validateDelegatedUser(DelegatedUserData[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param DelegatedUser
                              */
                              public void setDelegatedUser(DelegatedUserData[] param){
                              
                                   validateDelegatedUser(param);

                               
                                          if (param != null){
                                             //update the setting tracker
                                             localDelegatedUserTracker = true;
                                          } else {
                                             localDelegatedUserTracker = false;
                                                 
                                          }
                                      
                                      this.localDelegatedUser=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param DelegatedUserData
                             */
                             public void addDelegatedUser(DelegatedUserData param){
                                   if (localDelegatedUser == null){
                                   localDelegatedUser = new DelegatedUserData[]{};
                                   }

                            
                                 //update the setting tracker
                                localDelegatedUserTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localDelegatedUser);
                               list.add(param);
                               this.localDelegatedUser =
                             (DelegatedUserData[])list.toArray(
                            new DelegatedUserData[list.size()]);

                             }
                             

                        /**
                        * field for Lastpage
                        * This was an Attribute!
                        */

                        
                                    protected boolean localLastpage ;
                                

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getLastpage(){
                               return localLastpage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Lastpage
                               */
                               public void setLastpage(boolean param){
                            
                                            this.localLastpage=param;
                                    

                               }
                            

                        /**
                        * field for Recordcount
                        * This was an Attribute!
                        */

                        
                                    protected java.math.BigInteger localRecordcount ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigInteger
                           */
                           public  java.math.BigInteger getRecordcount(){
                               return localRecordcount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Recordcount
                               */
                               public void setRecordcount(java.math.BigInteger param){
                            
                                            this.localRecordcount=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ListOfDelegatedUserData.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Data");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ListOfDelegatedUserData",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ListOfDelegatedUserData",
                           xmlWriter);
                   }

               
                   }
               
                                                   if (true) {
                                               
                                                writeAttribute("",
                                                         "lastpage",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastpage), xmlWriter);

                                            
                                      }
                                    
                                            if (localRecordcount != null){
                                        
                                                writeAttribute("",
                                                         "recordcount",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcount), xmlWriter);

                                            
                                      }
                                     if (localDelegatedUserTracker){
                                       if (localDelegatedUser!=null){
                                            for (int i = 0;i < localDelegatedUser.length;i++){
                                                if (localDelegatedUser[i] != null){
                                                 localDelegatedUser[i].serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DelegatedUser"),
                                                           factory,xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("DelegatedUser cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localDelegatedUserTracker){
                             if (localDelegatedUser!=null) {
                                 for (int i = 0;i < localDelegatedUser.length;i++){

                                    if (localDelegatedUser[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                          "DelegatedUser"));
                                         elementList.add(localDelegatedUser[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("DelegatedUser cannot be null!!");
                                    
                             }

                        }
                            attribList.add(
                            new javax.xml.namespace.QName("","lastpage"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastpage));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","recordcount"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcount));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ListOfDelegatedUserData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ListOfDelegatedUserData object =
                new ListOfDelegatedUserData();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ListOfDelegatedUserData".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ListOfDelegatedUserData)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "lastpage"
                    java.lang.String tempAttribLastpage =
                        
                                reader.getAttributeValue(null,"lastpage");
                            
                   if (tempAttribLastpage!=null){
                         java.lang.String content = tempAttribLastpage;
                        
                                                 object.setLastpage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribLastpage));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("lastpage");
                    
                    // handle attribute "recordcount"
                    java.lang.String tempAttribRecordcount =
                        
                                reader.getAttributeValue(null,"recordcount");
                            
                   if (tempAttribRecordcount!=null){
                         java.lang.String content = tempAttribRecordcount;
                        
                                                 object.setRecordcount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(tempAttribRecordcount));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("recordcount");
                    
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DelegatedUser").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(DelegatedUserData.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DelegatedUser").equals(reader.getName())){
                                                                    list1.add(DelegatedUserData.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setDelegatedUser((DelegatedUserData[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                DelegatedUserData.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class UserData
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = UserData
                Namespace URI = urn:/crmondemand/xml/User/Data
                Namespace Prefix = ns1
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Data")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ModifiedDate
                        */

                        
                                    protected java.util.Calendar localModifiedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getModifiedDate(){
                               return localModifiedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedDate
                               */
                               public void setModifiedDate(java.util.Calendar param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedDateTracker = true;
                                       } else {
                                          localModifiedDateTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedDate=param;
                                    

                               }
                            

                        /**
                        * field for CreatedDate
                        */

                        
                                    protected java.util.Calendar localCreatedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getCreatedDate(){
                               return localCreatedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedDate
                               */
                               public void setCreatedDate(java.util.Calendar param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedDateTracker = true;
                                       } else {
                                          localCreatedDateTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedDate=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedById
                        */

                        
                                    protected java.lang.String localModifiedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifiedById(){
                               return localModifiedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedById
                               */
                               public void setModifiedById(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByIdTracker = true;
                                       } else {
                                          localModifiedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedById=param;
                                    

                               }
                            

                        /**
                        * field for CreatedById
                        */

                        
                                    protected java.lang.String localCreatedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedById(){
                               return localCreatedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedById
                               */
                               public void setCreatedById(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIdTracker = true;
                                       } else {
                                          localCreatedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedById=param;
                                    

                               }
                            

                        /**
                        * field for ModId
                        */

                        
                                    protected int localModId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getModId(){
                               return localModId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModId
                               */
                               public void setModId(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localModIdTracker = false;
                                              
                                       } else {
                                          localModIdTracker = true;
                                       }
                                   
                                            this.localModId=param;
                                    

                               }
                            

                        /**
                        * field for Id
                        */

                        
                                    protected java.lang.String localId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getId(){
                               return localId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Id
                               */
                               public void setId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIdTracker = true;
                                       } else {
                                          localIdTracker = false;
                                              
                                       }
                                   
                                            this.localId=param;
                                    

                               }
                            

                        /**
                        * field for TimeZoneId
                        */

                        
                                    protected java.lang.String localTimeZoneId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTimeZoneIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTimeZoneId(){
                               return localTimeZoneId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TimeZoneId
                               */
                               public void setTimeZoneId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTimeZoneIdTracker = true;
                                       } else {
                                          localTimeZoneIdTracker = false;
                                              
                                       }
                                   
                                            this.localTimeZoneId=param;
                                    

                               }
                            

                        /**
                        * field for TimeZoneName
                        */

                        
                                    protected java.lang.String localTimeZoneName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTimeZoneNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTimeZoneName(){
                               return localTimeZoneName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TimeZoneName
                               */
                               public void setTimeZoneName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTimeZoneNameTracker = true;
                                       } else {
                                          localTimeZoneNameTracker = false;
                                              
                                       }
                                   
                                            this.localTimeZoneName=param;
                                    

                               }
                            

                        /**
                        * field for EmployeeNumber
                        */

                        
                                    protected java.lang.String localEmployeeNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEmployeeNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEmployeeNumber(){
                               return localEmployeeNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EmployeeNumber
                               */
                               public void setEmployeeNumber(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEmployeeNumberTracker = true;
                                       } else {
                                          localEmployeeNumberTracker = false;
                                              
                                       }
                                   
                                            this.localEmployeeNumber=param;
                                    

                               }
                            

                        /**
                        * field for RoleId
                        */

                        
                                    protected java.lang.String localRoleId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRoleIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRoleId(){
                               return localRoleId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RoleId
                               */
                               public void setRoleId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRoleIdTracker = true;
                                       } else {
                                          localRoleIdTracker = false;
                                              
                                       }
                                   
                                            this.localRoleId=param;
                                    

                               }
                            

                        /**
                        * field for PrimaryPositionId
                        */

                        
                                    protected java.lang.String localPrimaryPositionId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrimaryPositionIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPrimaryPositionId(){
                               return localPrimaryPositionId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PrimaryPositionId
                               */
                               public void setPrimaryPositionId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPrimaryPositionIdTracker = true;
                                       } else {
                                          localPrimaryPositionIdTracker = false;
                                              
                                       }
                                   
                                            this.localPrimaryPositionId=param;
                                    

                               }
                            

                        /**
                        * field for FirstName
                        */

                        
                                    protected java.lang.String localFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFirstName(){
                               return localFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FirstName
                               */
                               public void setFirstName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFirstNameTracker = true;
                                       } else {
                                          localFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localFirstName=param;
                                    

                               }
                            

                        /**
                        * field for LastName
                        */

                        
                                    protected java.lang.String localLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLastName(){
                               return localLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LastName
                               */
                               public void setLastName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLastNameTracker = true;
                                       } else {
                                          localLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localLastName=param;
                                    

                               }
                            

                        /**
                        * field for UserSignInId
                        */

                        
                                    protected java.lang.String localUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUserSignInId(){
                               return localUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserSignInId
                               */
                               public void setUserSignInId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserSignInIdTracker = true;
                                       } else {
                                          localUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for MiddleName
                        */

                        
                                    protected java.lang.String localMiddleName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMiddleNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMiddleName(){
                               return localMiddleName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MiddleName
                               */
                               public void setMiddleName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMiddleNameTracker = true;
                                       } else {
                                          localMiddleNameTracker = false;
                                              
                                       }
                                   
                                            this.localMiddleName=param;
                                    

                               }
                            

                        /**
                        * field for ApprovalCurrency
                        */

                        
                                    protected java.lang.String localApprovalCurrency ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApprovalCurrencyTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getApprovalCurrency(){
                               return localApprovalCurrency;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApprovalCurrency
                               */
                               public void setApprovalCurrency(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApprovalCurrencyTracker = true;
                                       } else {
                                          localApprovalCurrencyTracker = false;
                                              
                                       }
                                   
                                            this.localApprovalCurrency=param;
                                    

                               }
                            

                        /**
                        * field for FundApprovalLimit
                        */

                        
                                    protected java.math.BigDecimal localFundApprovalLimit ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFundApprovalLimitTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.math.BigDecimal
                           */
                           public  java.math.BigDecimal getFundApprovalLimit(){
                               return localFundApprovalLimit;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FundApprovalLimit
                               */
                               public void setFundApprovalLimit(java.math.BigDecimal param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFundApprovalLimitTracker = true;
                                       } else {
                                          localFundApprovalLimitTracker = false;
                                              
                                       }
                                   
                                            this.localFundApprovalLimit=param;
                                    

                               }
                            

                        /**
                        * field for Alias
                        */

                        
                                    protected java.lang.String localAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAlias(){
                               return localAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Alias
                               */
                               public void setAlias(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAliasTracker = true;
                                       } else {
                                          localAliasTracker = false;
                                              
                                       }
                                   
                                            this.localAlias=param;
                                    

                               }
                            

                        /**
                        * field for FullName
                        */

                        
                                    protected java.lang.String localFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFullName(){
                               return localFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FullName
                               */
                               public void setFullName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFullNameTracker = true;
                                       } else {
                                          localFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localFullName=param;
                                    

                               }
                            

                        /**
                        * field for CellPhone
                        */

                        
                                    protected java.lang.String localCellPhone ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCellPhoneTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCellPhone(){
                               return localCellPhone;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CellPhone
                               */
                               public void setCellPhone(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCellPhoneTracker = true;
                                       } else {
                                          localCellPhoneTracker = false;
                                              
                                       }
                                   
                                            this.localCellPhone=param;
                                    

                               }
                            

                        /**
                        * field for IntegrationId
                        */

                        
                                    protected java.lang.String localIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getIntegrationId(){
                               return localIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IntegrationId
                               */
                               public void setIntegrationId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIntegrationIdTracker = true;
                                       } else {
                                          localIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for PersonalAddressId
                        */

                        
                                    protected java.lang.String localPersonalAddressId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalAddressIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPersonalAddressId(){
                               return localPersonalAddressId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalAddressId
                               */
                               public void setPersonalAddressId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalAddressIdTracker = true;
                                       } else {
                                          localPersonalAddressIdTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalAddressId=param;
                                    

                               }
                            

                        /**
                        * field for PersonalCountry
                        */

                        
                                    protected java.lang.String localPersonalCountry ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalCountryTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPersonalCountry(){
                               return localPersonalCountry;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalCountry
                               */
                               public void setPersonalCountry(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalCountryTracker = true;
                                       } else {
                                          localPersonalCountryTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalCountry=param;
                                    

                               }
                            

                        /**
                        * field for PersonalCity
                        */

                        
                                    protected java.lang.String localPersonalCity ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalCityTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPersonalCity(){
                               return localPersonalCity;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalCity
                               */
                               public void setPersonalCity(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalCityTracker = true;
                                       } else {
                                          localPersonalCityTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalCity=param;
                                    

                               }
                            

                        /**
                        * field for PersonalPostalCode
                        */

                        
                                    protected java.lang.String localPersonalPostalCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalPostalCodeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPersonalPostalCode(){
                               return localPersonalPostalCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalPostalCode
                               */
                               public void setPersonalPostalCode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalPostalCodeTracker = true;
                                       } else {
                                          localPersonalPostalCodeTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalPostalCode=param;
                                    

                               }
                            

                        /**
                        * field for PersonalCounty
                        */

                        
                                    protected java.lang.String localPersonalCounty ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalCountyTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPersonalCounty(){
                               return localPersonalCounty;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalCounty
                               */
                               public void setPersonalCounty(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalCountyTracker = true;
                                       } else {
                                          localPersonalCountyTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalCounty=param;
                                    

                               }
                            

                        /**
                        * field for PersonalProvince
                        */

                        
                                    protected java.lang.String localPersonalProvince ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalProvinceTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPersonalProvince(){
                               return localPersonalProvince;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalProvince
                               */
                               public void setPersonalProvince(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalProvinceTracker = true;
                                       } else {
                                          localPersonalProvinceTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalProvince=param;
                                    

                               }
                            

                        /**
                        * field for PersonalState
                        */

                        
                                    protected java.lang.String localPersonalState ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalStateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPersonalState(){
                               return localPersonalState;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalState
                               */
                               public void setPersonalState(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalStateTracker = true;
                                       } else {
                                          localPersonalStateTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalState=param;
                                    

                               }
                            

                        /**
                        * field for PersonalStreetAddress
                        */

                        
                                    protected java.lang.String localPersonalStreetAddress ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalStreetAddressTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPersonalStreetAddress(){
                               return localPersonalStreetAddress;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalStreetAddress
                               */
                               public void setPersonalStreetAddress(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalStreetAddressTracker = true;
                                       } else {
                                          localPersonalStreetAddressTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalStreetAddress=param;
                                    

                               }
                            

                        /**
                        * field for PersonalStreetAddress2
                        */

                        
                                    protected java.lang.String localPersonalStreetAddress2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalStreetAddress2Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPersonalStreetAddress2(){
                               return localPersonalStreetAddress2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalStreetAddress2
                               */
                               public void setPersonalStreetAddress2(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalStreetAddress2Tracker = true;
                                       } else {
                                          localPersonalStreetAddress2Tracker = false;
                                              
                                       }
                                   
                                            this.localPersonalStreetAddress2=param;
                                    

                               }
                            

                        /**
                        * field for LtCustomFoo
                        */

                        
                                    protected java.lang.String localLtCustomFoo ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLtCustomFooTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLtCustomFoo(){
                               return localLtCustomFoo;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LtCustomFoo
                               */
                               public void setLtCustomFoo(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLtCustomFooTracker = true;
                                       } else {
                                          localLtCustomFooTracker = false;
                                              
                                       }
                                   
                                            this.localLtCustomFoo=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByExt
                        */

                        
                                    protected java.lang.String localCreatedByExt ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByExtTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByExt(){
                               return localCreatedByExt;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByExt
                               */
                               public void setCreatedByExt(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByExtTracker = true;
                                       } else {
                                          localCreatedByExtTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByExt=param;
                                    

                               }
                            

                        /**
                        * field for CreatedDateExt
                        */

                        
                                    protected java.util.Calendar localCreatedDateExt ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedDateExtTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getCreatedDateExt(){
                               return localCreatedDateExt;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedDateExt
                               */
                               public void setCreatedDateExt(java.util.Calendar param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedDateExtTracker = true;
                                       } else {
                                          localCreatedDateExtTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedDateExt=param;
                                    

                               }
                            

                        /**
                        * field for Department
                        */

                        
                                    protected java.lang.String localDepartment ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDepartmentTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDepartment(){
                               return localDepartment;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Department
                               */
                               public void setDepartment(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDepartmentTracker = true;
                                       } else {
                                          localDepartmentTracker = false;
                                              
                                       }
                                   
                                            this.localDepartment=param;
                                    

                               }
                            

                        /**
                        * field for CurrencyCode
                        */

                        
                                    protected java.lang.String localCurrencyCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCurrencyCodeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCurrencyCode(){
                               return localCurrencyCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CurrencyCode
                               */
                               public void setCurrencyCode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCurrencyCodeTracker = true;
                                       } else {
                                          localCurrencyCodeTracker = false;
                                              
                                       }
                                   
                                            this.localCurrencyCode=param;
                                    

                               }
                            

                        /**
                        * field for TempPasswordFlag
                        */

                        
                                    protected boolean localTempPasswordFlag ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTempPasswordFlagTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getTempPasswordFlag(){
                               return localTempPasswordFlag;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TempPasswordFlag
                               */
                               public void setTempPasswordFlag(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localTempPasswordFlagTracker = false;
                                              
                                       } else {
                                          localTempPasswordFlagTracker = true;
                                       }
                                   
                                            this.localTempPasswordFlag=param;
                                    

                               }
                            

                        /**
                        * field for ExternalSystemId
                        */

                        
                                    protected java.lang.String localExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getExternalSystemId(){
                               return localExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ExternalSystemId
                               */
                               public void setExternalSystemId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExternalSystemIdTracker = true;
                                       } else {
                                          localExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedDateExt
                        */

                        
                                    protected java.util.Calendar localModifiedDateExt ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedDateExtTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getModifiedDateExt(){
                               return localModifiedDateExt;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedDateExt
                               */
                               public void setModifiedDateExt(java.util.Calendar param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedDateExtTracker = true;
                                       } else {
                                          localModifiedDateExtTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedDateExt=param;
                                    

                               }
                            

                        /**
                        * field for LastLoggedIn
                        */

                        
                                    protected java.util.Calendar localLastLoggedIn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLastLoggedInTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getLastLoggedIn(){
                               return localLastLoggedIn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LastLoggedIn
                               */
                               public void setLastLoggedIn(java.util.Calendar param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLastLoggedInTracker = true;
                                       } else {
                                          localLastLoggedInTracker = false;
                                              
                                       }
                                   
                                            this.localLastLoggedIn=param;
                                    

                               }
                            

                        /**
                        * field for LanguageCode
                        */

                        
                                    protected java.lang.String localLanguageCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLanguageCodeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLanguageCode(){
                               return localLanguageCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LanguageCode
                               */
                               public void setLanguageCode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLanguageCodeTracker = true;
                                       } else {
                                          localLanguageCodeTracker = false;
                                              
                                       }
                                   
                                            this.localLanguageCode=param;
                                    

                               }
                            

                        /**
                        * field for Language
                        */

                        
                                    protected java.lang.String localLanguage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLanguageTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLanguage(){
                               return localLanguage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Language
                               */
                               public void setLanguage(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLanguageTracker = true;
                                       } else {
                                          localLanguageTracker = false;
                                              
                                       }
                                   
                                            this.localLanguage=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedByExt
                        */

                        
                                    protected java.lang.String localModifiedByExt ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByExtTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifiedByExt(){
                               return localModifiedByExt;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedByExt
                               */
                               public void setModifiedByExt(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByExtTracker = true;
                                       } else {
                                          localModifiedByExtTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedByExt=param;
                                    

                               }
                            

                        /**
                        * field for LocaleCode
                        */

                        
                                    protected java.lang.String localLocaleCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLocaleCodeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLocaleCode(){
                               return localLocaleCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LocaleCode
                               */
                               public void setLocaleCode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLocaleCodeTracker = true;
                                       } else {
                                          localLocaleCodeTracker = false;
                                              
                                       }
                                   
                                            this.localLocaleCode=param;
                                    

                               }
                            

                        /**
                        * field for Locale
                        */

                        
                                    protected java.lang.String localLocale ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLocaleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLocale(){
                               return localLocale;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Locale
                               */
                               public void setLocale(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLocaleTracker = true;
                                       } else {
                                          localLocaleTracker = false;
                                              
                                       }
                                   
                                            this.localLocale=param;
                                    

                               }
                            

                        /**
                        * field for ManagerAlias
                        */

                        
                                    protected java.lang.String localManagerAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localManagerAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getManagerAlias(){
                               return localManagerAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ManagerAlias
                               */
                               public void setManagerAlias(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localManagerAliasTracker = true;
                                       } else {
                                          localManagerAliasTracker = false;
                                              
                                       }
                                   
                                            this.localManagerAlias=param;
                                    

                               }
                            

                        /**
                        * field for ManagerFullName
                        */

                        
                                    protected java.lang.String localManagerFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localManagerFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getManagerFullName(){
                               return localManagerFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ManagerFullName
                               */
                               public void setManagerFullName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localManagerFullNameTracker = true;
                                       } else {
                                          localManagerFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localManagerFullName=param;
                                    

                               }
                            

                        /**
                        * field for Division
                        */

                        
                                    protected java.lang.String localDivision ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDivisionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDivision(){
                               return localDivision;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Division
                               */
                               public void setDivision(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDivisionTracker = true;
                                       } else {
                                          localDivisionTracker = false;
                                              
                                       }
                                   
                                            this.localDivision=param;
                                    

                               }
                            

                        /**
                        * field for ManagerId
                        */

                        
                                    protected java.lang.String localManagerId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localManagerIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getManagerId(){
                               return localManagerId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ManagerId
                               */
                               public void setManagerId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localManagerIdTracker = true;
                                       } else {
                                          localManagerIdTracker = false;
                                              
                                       }
                                   
                                            this.localManagerId=param;
                                    

                               }
                            

                        /**
                        * field for PrimaryGroup
                        */

                        
                                    protected java.lang.String localPrimaryGroup ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrimaryGroupTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPrimaryGroup(){
                               return localPrimaryGroup;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PrimaryGroup
                               */
                               public void setPrimaryGroup(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPrimaryGroupTracker = true;
                                       } else {
                                          localPrimaryGroupTracker = false;
                                              
                                       }
                                   
                                            this.localPrimaryGroup=param;
                                    

                               }
                            

                        /**
                        * field for DefaultCalendarView
                        */

                        
                                    protected java.lang.String localDefaultCalendarView ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultCalendarViewTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDefaultCalendarView(){
                               return localDefaultCalendarView;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultCalendarView
                               */
                               public void setDefaultCalendarView(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultCalendarViewTracker = true;
                                       } else {
                                          localDefaultCalendarViewTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultCalendarView=param;
                                    

                               }
                            

                        /**
                        * field for EnableTeamContactsSync
                        */

                        
                                    protected boolean localEnableTeamContactsSync ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnableTeamContactsSyncTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getEnableTeamContactsSync(){
                               return localEnableTeamContactsSync;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnableTeamContactsSync
                               */
                               public void setEnableTeamContactsSync(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localEnableTeamContactsSyncTracker = false;
                                              
                                       } else {
                                          localEnableTeamContactsSyncTracker = true;
                                       }
                                   
                                            this.localEnableTeamContactsSync=param;
                                    

                               }
                            

                        /**
                        * field for ShowWelcomePage
                        */

                        
                                    protected boolean localShowWelcomePage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localShowWelcomePageTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getShowWelcomePage(){
                               return localShowWelcomePage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ShowWelcomePage
                               */
                               public void setShowWelcomePage(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localShowWelcomePageTracker = false;
                                              
                                       } else {
                                          localShowWelcomePageTracker = true;
                                       }
                                   
                                            this.localShowWelcomePage=param;
                                    

                               }
                            

                        /**
                        * field for PasswordState
                        */

                        
                                    protected java.lang.String localPasswordState ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPasswordStateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPasswordState(){
                               return localPasswordState;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PasswordState
                               */
                               public void setPasswordState(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPasswordStateTracker = true;
                                       } else {
                                          localPasswordStateTracker = false;
                                              
                                       }
                                   
                                            this.localPasswordState=param;
                                    

                               }
                            

                        /**
                        * field for MaxNumOfListExport
                        */

                        
                                    protected int localMaxNumOfListExport ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMaxNumOfListExportTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getMaxNumOfListExport(){
                               return localMaxNumOfListExport;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MaxNumOfListExport
                               */
                               public void setMaxNumOfListExport(int param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (param==java.lang.Integer.MIN_VALUE) {
                                           localMaxNumOfListExportTracker = false;
                                              
                                       } else {
                                          localMaxNumOfListExportTracker = true;
                                       }
                                   
                                            this.localMaxNumOfListExport=param;
                                    

                               }
                            

                        /**
                        * field for DefaultUserIDType
                        */

                        
                                    protected java.lang.String localDefaultUserIDType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultUserIDTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDefaultUserIDType(){
                               return localDefaultUserIDType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultUserIDType
                               */
                               public void setDefaultUserIDType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultUserIDTypeTracker = true;
                                       } else {
                                          localDefaultUserIDTypeTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultUserIDType=param;
                                    

                               }
                            

                        /**
                        * field for NumberOfSecurityQuestionsToComplete
                        */

                        
                                    protected java.lang.String localNumberOfSecurityQuestionsToComplete ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNumberOfSecurityQuestionsToCompleteTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumberOfSecurityQuestionsToComplete(){
                               return localNumberOfSecurityQuestionsToComplete;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NumberOfSecurityQuestionsToComplete
                               */
                               public void setNumberOfSecurityQuestionsToComplete(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localNumberOfSecurityQuestionsToCompleteTracker = true;
                                       } else {
                                          localNumberOfSecurityQuestionsToCompleteTracker = false;
                                              
                                       }
                                   
                                            this.localNumberOfSecurityQuestionsToComplete=param;
                                    

                               }
                            

                        /**
                        * field for AuthenticationType
                        */

                        
                                    protected java.lang.String localAuthenticationType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAuthenticationTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAuthenticationType(){
                               return localAuthenticationType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AuthenticationType
                               */
                               public void setAuthenticationType(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAuthenticationTypeTracker = true;
                                       } else {
                                          localAuthenticationTypeTracker = false;
                                              
                                       }
                                   
                                            this.localAuthenticationType=param;
                                    

                               }
                            

                        /**
                        * field for ExternalIdentifierForSingleSignOn
                        */

                        
                                    protected java.lang.String localExternalIdentifierForSingleSignOn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExternalIdentifierForSingleSignOnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getExternalIdentifierForSingleSignOn(){
                               return localExternalIdentifierForSingleSignOn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ExternalIdentifierForSingleSignOn
                               */
                               public void setExternalIdentifierForSingleSignOn(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExternalIdentifierForSingleSignOnTracker = true;
                                       } else {
                                          localExternalIdentifierForSingleSignOnTracker = false;
                                              
                                       }
                                   
                                            this.localExternalIdentifierForSingleSignOn=param;
                                    

                               }
                            

                        /**
                        * field for NeverCall
                        */

                        
                                    protected boolean localNeverCall ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNeverCallTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getNeverCall(){
                               return localNeverCall;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NeverCall
                               */
                               public void setNeverCall(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localNeverCallTracker = false;
                                              
                                       } else {
                                          localNeverCallTracker = true;
                                       }
                                   
                                            this.localNeverCall=param;
                                    

                               }
                            

                        /**
                        * field for NevereMail
                        */

                        
                                    protected boolean localNevereMail ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNevereMailTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getNevereMail(){
                               return localNevereMail;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NevereMail
                               */
                               public void setNevereMail(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localNevereMailTracker = false;
                                              
                                       } else {
                                          localNevereMailTracker = true;
                                       }
                                   
                                            this.localNevereMail=param;
                                    

                               }
                            

                        /**
                        * field for NeverMail
                        */

                        
                                    protected boolean localNeverMail ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNeverMailTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getNeverMail(){
                               return localNeverMail;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NeverMail
                               */
                               public void setNeverMail(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localNeverMailTracker = false;
                                              
                                       } else {
                                          localNeverMailTracker = true;
                                       }
                                   
                                            this.localNeverMail=param;
                                    

                               }
                            

                        /**
                        * field for PersonalStreetAddress3
                        */

                        
                                    protected java.lang.String localPersonalStreetAddress3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalStreetAddress3Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPersonalStreetAddress3(){
                               return localPersonalStreetAddress3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalStreetAddress3
                               */
                               public void setPersonalStreetAddress3(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalStreetAddress3Tracker = true;
                                       } else {
                                          localPersonalStreetAddress3Tracker = false;
                                              
                                       }
                                   
                                            this.localPersonalStreetAddress3=param;
                                    

                               }
                            

                        /**
                        * field for Role
                        */

                        
                                    protected java.lang.String localRole ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRoleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRole(){
                               return localRole;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Role
                               */
                               public void setRole(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRoleTracker = true;
                                       } else {
                                          localRoleTracker = false;
                                              
                                       }
                                   
                                            this.localRole=param;
                                    

                               }
                            

                        /**
                        * field for SecondaryEmail
                        */

                        
                                    protected java.lang.String localSecondaryEmail ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSecondaryEmailTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSecondaryEmail(){
                               return localSecondaryEmail;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SecondaryEmail
                               */
                               public void setSecondaryEmail(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSecondaryEmailTracker = true;
                                       } else {
                                          localSecondaryEmailTracker = false;
                                              
                                       }
                                   
                                            this.localSecondaryEmail=param;
                                    

                               }
                            

                        /**
                        * field for Market
                        */

                        
                                    protected java.lang.String localMarket ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMarketTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMarket(){
                               return localMarket;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Market
                               */
                               public void setMarket(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMarketTracker = true;
                                       } else {
                                          localMarketTracker = false;
                                              
                                       }
                                   
                                            this.localMarket=param;
                                    

                               }
                            

                        /**
                        * field for SubMarket
                        */

                        
                                    protected java.lang.String localSubMarket ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubMarketTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSubMarket(){
                               return localSubMarket;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SubMarket
                               */
                               public void setSubMarket(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSubMarketTracker = true;
                                       } else {
                                          localSubMarketTracker = false;
                                              
                                       }
                                   
                                            this.localSubMarket=param;
                                    

                               }
                            

                        /**
                        * field for Region
                        */

                        
                                    protected java.lang.String localRegion ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRegion(){
                               return localRegion;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Region
                               */
                               public void setRegion(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegionTracker = true;
                                       } else {
                                          localRegionTracker = false;
                                              
                                       }
                                   
                                            this.localRegion=param;
                                    

                               }
                            

                        /**
                        * field for SubRegion
                        */

                        
                                    protected java.lang.String localSubRegion ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubRegionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSubRegion(){
                               return localSubRegion;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SubRegion
                               */
                               public void setSubRegion(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSubRegionTracker = true;
                                       } else {
                                          localSubRegionTracker = false;
                                              
                                       }
                                   
                                            this.localSubRegion=param;
                                    

                               }
                            

                        /**
                        * field for BusinessUnit
                        */

                        
                                    protected java.lang.String localBusinessUnit ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBusinessUnitTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBusinessUnit(){
                               return localBusinessUnit;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BusinessUnit
                               */
                               public void setBusinessUnit(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBusinessUnitTracker = true;
                                       } else {
                                          localBusinessUnitTracker = false;
                                              
                                       }
                                   
                                            this.localBusinessUnit=param;
                                    

                               }
                            

                        /**
                        * field for BusinessUnitLevel1
                        */

                        
                                    protected java.lang.String localBusinessUnitLevel1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBusinessUnitLevel1Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBusinessUnitLevel1(){
                               return localBusinessUnitLevel1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BusinessUnitLevel1
                               */
                               public void setBusinessUnitLevel1(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBusinessUnitLevel1Tracker = true;
                                       } else {
                                          localBusinessUnitLevel1Tracker = false;
                                              
                                       }
                                   
                                            this.localBusinessUnitLevel1=param;
                                    

                               }
                            

                        /**
                        * field for BusinessUnitLevel2
                        */

                        
                                    protected java.lang.String localBusinessUnitLevel2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBusinessUnitLevel2Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBusinessUnitLevel2(){
                               return localBusinessUnitLevel2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BusinessUnitLevel2
                               */
                               public void setBusinessUnitLevel2(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBusinessUnitLevel2Tracker = true;
                                       } else {
                                          localBusinessUnitLevel2Tracker = false;
                                              
                                       }
                                   
                                            this.localBusinessUnitLevel2=param;
                                    

                               }
                            

                        /**
                        * field for BusinessUnitLevel3
                        */

                        
                                    protected java.lang.String localBusinessUnitLevel3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBusinessUnitLevel3Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBusinessUnitLevel3(){
                               return localBusinessUnitLevel3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BusinessUnitLevel3
                               */
                               public void setBusinessUnitLevel3(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBusinessUnitLevel3Tracker = true;
                                       } else {
                                          localBusinessUnitLevel3Tracker = false;
                                              
                                       }
                                   
                                            this.localBusinessUnitLevel3=param;
                                    

                               }
                            

                        /**
                        * field for BusinessUnitLevel4
                        */

                        
                                    protected java.lang.String localBusinessUnitLevel4 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBusinessUnitLevel4Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBusinessUnitLevel4(){
                               return localBusinessUnitLevel4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BusinessUnitLevel4
                               */
                               public void setBusinessUnitLevel4(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBusinessUnitLevel4Tracker = true;
                                       } else {
                                          localBusinessUnitLevel4Tracker = false;
                                              
                                       }
                                   
                                            this.localBusinessUnitLevel4=param;
                                    

                               }
                            

                        /**
                        * field for Supervisor
                        */

                        
                                    protected java.lang.String localSupervisor ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSupervisorTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSupervisor(){
                               return localSupervisor;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Supervisor
                               */
                               public void setSupervisor(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSupervisorTracker = true;
                                       } else {
                                          localSupervisorTracker = false;
                                              
                                       }
                                   
                                            this.localSupervisor=param;
                                    

                               }
                            

                        /**
                        * field for LeadLimit
                        */

                        
                                    protected java.math.BigDecimal localLeadLimit ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLeadLimitTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.math.BigDecimal
                           */
                           public  java.math.BigDecimal getLeadLimit(){
                               return localLeadLimit;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LeadLimit
                               */
                               public void setLeadLimit(java.math.BigDecimal param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLeadLimitTracker = true;
                                       } else {
                                          localLeadLimitTracker = false;
                                              
                                       }
                                   
                                            this.localLeadLimit=param;
                                    

                               }
                            

                        /**
                        * field for MiscellaneousText1
                        */

                        
                                    protected java.lang.String localMiscellaneousText1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMiscellaneousText1Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMiscellaneousText1(){
                               return localMiscellaneousText1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MiscellaneousText1
                               */
                               public void setMiscellaneousText1(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMiscellaneousText1Tracker = true;
                                       } else {
                                          localMiscellaneousText1Tracker = false;
                                              
                                       }
                                   
                                            this.localMiscellaneousText1=param;
                                    

                               }
                            

                        /**
                        * field for MiscellaneousText2
                        */

                        
                                    protected java.lang.String localMiscellaneousText2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMiscellaneousText2Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMiscellaneousText2(){
                               return localMiscellaneousText2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MiscellaneousText2
                               */
                               public void setMiscellaneousText2(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMiscellaneousText2Tracker = true;
                                       } else {
                                          localMiscellaneousText2Tracker = false;
                                              
                                       }
                                   
                                            this.localMiscellaneousText2=param;
                                    

                               }
                            

                        /**
                        * field for MiscellaneousNumber1
                        */

                        
                                    protected java.math.BigDecimal localMiscellaneousNumber1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMiscellaneousNumber1Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.math.BigDecimal
                           */
                           public  java.math.BigDecimal getMiscellaneousNumber1(){
                               return localMiscellaneousNumber1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MiscellaneousNumber1
                               */
                               public void setMiscellaneousNumber1(java.math.BigDecimal param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMiscellaneousNumber1Tracker = true;
                                       } else {
                                          localMiscellaneousNumber1Tracker = false;
                                              
                                       }
                                   
                                            this.localMiscellaneousNumber1=param;
                                    

                               }
                            

                        /**
                        * field for MiscellaneousNumber2
                        */

                        
                                    protected java.math.BigDecimal localMiscellaneousNumber2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMiscellaneousNumber2Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.math.BigDecimal
                           */
                           public  java.math.BigDecimal getMiscellaneousNumber2(){
                               return localMiscellaneousNumber2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MiscellaneousNumber2
                               */
                               public void setMiscellaneousNumber2(java.math.BigDecimal param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMiscellaneousNumber2Tracker = true;
                                       } else {
                                          localMiscellaneousNumber2Tracker = false;
                                              
                                       }
                                   
                                            this.localMiscellaneousNumber2=param;
                                    

                               }
                            

                        /**
                        * field for SalesProcessId
                        */

                        
                                    protected java.lang.String localSalesProcessId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSalesProcessIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSalesProcessId(){
                               return localSalesProcessId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SalesProcessId
                               */
                               public void setSalesProcessId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSalesProcessIdTracker = true;
                                       } else {
                                          localSalesProcessIdTracker = false;
                                              
                                       }
                                   
                                            this.localSalesProcessId=param;
                                    

                               }
                            

                        /**
                        * field for Company
                        */

                        
                                    protected java.lang.String localCompany ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompanyTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompany(){
                               return localCompany;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Company
                               */
                               public void setCompany(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompanyTracker = true;
                                       } else {
                                          localCompanyTracker = false;
                                              
                                       }
                                   
                                            this.localCompany=param;
                                    

                               }
                            

                        /**
                        * field for CompanySignInID
                        */

                        
                                    protected java.lang.String localCompanySignInID ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompanySignInIDTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCompanySignInID(){
                               return localCompanySignInID;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompanySignInID
                               */
                               public void setCompanySignInID(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompanySignInIDTracker = true;
                                       } else {
                                          localCompanySignInIDTracker = false;
                                              
                                       }
                                   
                                            this.localCompanySignInID=param;
                                    

                               }
                            

                        /**
                        * field for UserLoginId
                        */

                        
                                    protected java.lang.String localUserLoginId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserLoginIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUserLoginId(){
                               return localUserLoginId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserLoginId
                               */
                               public void setUserLoginId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserLoginIdTracker = true;
                                       } else {
                                          localUserLoginIdTracker = false;
                                              
                                       }
                                   
                                            this.localUserLoginId=param;
                                    

                               }
                            

                        /**
                        * field for DefaultBookId
                        */

                        
                                    protected java.lang.String localDefaultBookId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultBookIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDefaultBookId(){
                               return localDefaultBookId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultBookId
                               */
                               public void setDefaultBookId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultBookIdTracker = true;
                                       } else {
                                          localDefaultBookIdTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultBookId=param;
                                    

                               }
                            

                        /**
                        * field for IncludeSubBooks
                        */

                        
                                    protected boolean localIncludeSubBooks ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIncludeSubBooksTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getIncludeSubBooks(){
                               return localIncludeSubBooks;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IncludeSubBooks
                               */
                               public void setIncludeSubBooks(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localIncludeSubBooksTracker = false;
                                              
                                       } else {
                                          localIncludeSubBooksTracker = true;
                                       }
                                   
                                            this.localIncludeSubBooks=param;
                                    

                               }
                            

                        /**
                        * field for DefaultSearchObject
                        */

                        
                                    protected java.lang.String localDefaultSearchObject ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultSearchObjectTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDefaultSearchObject(){
                               return localDefaultSearchObject;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultSearchObject
                               */
                               public void setDefaultSearchObject(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultSearchObjectTracker = true;
                                       } else {
                                          localDefaultSearchObjectTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultSearchObject=param;
                                    

                               }
                            

                        /**
                        * field for PromptToDialFlag
                        */

                        
                                    protected boolean localPromptToDialFlag ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPromptToDialFlagTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getPromptToDialFlag(){
                               return localPromptToDialFlag;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PromptToDialFlag
                               */
                               public void setPromptToDialFlag(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localPromptToDialFlagTracker = false;
                                              
                                       } else {
                                          localPromptToDialFlagTracker = true;
                                       }
                                   
                                            this.localPromptToDialFlag=param;
                                    

                               }
                            

                        /**
                        * field for DefaultBookName
                        */

                        
                                    protected java.lang.String localDefaultBookName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultBookNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDefaultBookName(){
                               return localDefaultBookName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultBookName
                               */
                               public void setDefaultBookName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultBookNameTracker = true;
                                       } else {
                                          localDefaultBookNameTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultBookName=param;
                                    

                               }
                            

                        /**
                        * field for HistoricalSubjectAreas
                        */

                        
                                    protected java.lang.String localHistoricalSubjectAreas ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHistoricalSubjectAreasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getHistoricalSubjectAreas(){
                               return localHistoricalSubjectAreas;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HistoricalSubjectAreas
                               */
                               public void setHistoricalSubjectAreas(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localHistoricalSubjectAreasTracker = true;
                                       } else {
                                          localHistoricalSubjectAreasTracker = false;
                                              
                                       }
                                   
                                            this.localHistoricalSubjectAreas=param;
                                    

                               }
                            

                        /**
                        * field for ReportingSubjectAreas
                        */

                        
                                    protected java.lang.String localReportingSubjectAreas ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReportingSubjectAreasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getReportingSubjectAreas(){
                               return localReportingSubjectAreas;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReportingSubjectAreas
                               */
                               public void setReportingSubjectAreas(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReportingSubjectAreasTracker = true;
                                       } else {
                                          localReportingSubjectAreasTracker = false;
                                              
                                       }
                                   
                                            this.localReportingSubjectAreas=param;
                                    

                               }
                            

                        /**
                        * field for DefaultAnalyticsBookId
                        */

                        
                                    protected java.lang.String localDefaultAnalyticsBookId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultAnalyticsBookIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDefaultAnalyticsBookId(){
                               return localDefaultAnalyticsBookId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultAnalyticsBookId
                               */
                               public void setDefaultAnalyticsBookId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultAnalyticsBookIdTracker = true;
                                       } else {
                                          localDefaultAnalyticsBookIdTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultAnalyticsBookId=param;
                                    

                               }
                            

                        /**
                        * field for DefaultAnalyticsBookName
                        */

                        
                                    protected java.lang.String localDefaultAnalyticsBookName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultAnalyticsBookNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDefaultAnalyticsBookName(){
                               return localDefaultAnalyticsBookName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultAnalyticsBookName
                               */
                               public void setDefaultAnalyticsBookName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultAnalyticsBookNameTracker = true;
                                       } else {
                                          localDefaultAnalyticsBookNameTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultAnalyticsBookName=param;
                                    

                               }
                            

                        /**
                        * field for EnableAnimateFlag
                        */

                        
                                    protected boolean localEnableAnimateFlag ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnableAnimateFlagTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getEnableAnimateFlag(){
                               return localEnableAnimateFlag;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnableAnimateFlag
                               */
                               public void setEnableAnimateFlag(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localEnableAnimateFlagTracker = false;
                                              
                                       } else {
                                          localEnableAnimateFlagTracker = true;
                                       }
                                   
                                            this.localEnableAnimateFlag=param;
                                    

                               }
                            

                        /**
                        * field for PartnerOrganizationName
                        */

                        
                                    protected java.lang.String localPartnerOrganizationName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPartnerOrganizationNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPartnerOrganizationName(){
                               return localPartnerOrganizationName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PartnerOrganizationName
                               */
                               public void setPartnerOrganizationName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPartnerOrganizationNameTracker = true;
                                       } else {
                                          localPartnerOrganizationNameTracker = false;
                                              
                                       }
                                   
                                            this.localPartnerOrganizationName=param;
                                    

                               }
                            

                        /**
                        * field for PartnerOrganizationId
                        */

                        
                                    protected java.lang.String localPartnerOrganizationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPartnerOrganizationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPartnerOrganizationId(){
                               return localPartnerOrganizationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PartnerOrganizationId
                               */
                               public void setPartnerOrganizationId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPartnerOrganizationIdTracker = true;
                                       } else {
                                          localPartnerOrganizationIdTracker = false;
                                              
                                       }
                                   
                                            this.localPartnerOrganizationId=param;
                                    

                               }
                            

                        /**
                        * field for PreviewMode
                        */

                        
                                    protected java.lang.String localPreviewMode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPreviewModeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPreviewMode(){
                               return localPreviewMode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PreviewMode
                               */
                               public void setPreviewMode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPreviewModeTracker = true;
                                       } else {
                                          localPreviewModeTracker = false;
                                              
                                       }
                                   
                                            this.localPreviewMode=param;
                                    

                               }
                            

                        /**
                        * field for SendCriticalAlertsFlag
                        */

                        
                                    protected boolean localSendCriticalAlertsFlag ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendCriticalAlertsFlagTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getSendCriticalAlertsFlag(){
                               return localSendCriticalAlertsFlag;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendCriticalAlertsFlag
                               */
                               public void setSendCriticalAlertsFlag(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localSendCriticalAlertsFlagTracker = false;
                                              
                                       } else {
                                          localSendCriticalAlertsFlagTracker = true;
                                       }
                                   
                                            this.localSendCriticalAlertsFlag=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFirstName
                        */

                        
                                    protected java.lang.String localCreatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByFirstName(){
                               return localCreatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFirstName
                               */
                               public void setCreatedByFirstName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFirstNameTracker = true;
                                       } else {
                                          localCreatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByLastName
                        */

                        
                                    protected java.lang.String localCreatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByLastName(){
                               return localCreatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByLastName
                               */
                               public void setCreatedByLastName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByLastNameTracker = true;
                                       } else {
                                          localCreatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFullName
                        */

                        
                                    protected java.lang.String localCreatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByFullName(){
                               return localCreatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFullName
                               */
                               public void setCreatedByFullName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFullNameTracker = true;
                                       } else {
                                          localCreatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for RBCanReadAllRecforUser
                        */

                        
                                    protected java.lang.String localRBCanReadAllRecforUser ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRBCanReadAllRecforUserTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRBCanReadAllRecforUser(){
                               return localRBCanReadAllRecforUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RBCanReadAllRecforUser
                               */
                               public void setRBCanReadAllRecforUser(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRBCanReadAllRecforUserTracker = true;
                                       } else {
                                          localRBCanReadAllRecforUserTracker = false;
                                              
                                       }
                                   
                                            this.localRBCanReadAllRecforUser=param;
                                    

                               }
                            

                        /**
                        * field for ThemeName
                        */

                        
                                    protected java.lang.String localThemeName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localThemeNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getThemeName(){
                               return localThemeName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ThemeName
                               */
                               public void setThemeName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localThemeNameTracker = true;
                                       } else {
                                          localThemeNameTracker = false;
                                              
                                       }
                                   
                                            this.localThemeName=param;
                                    

                               }
                            

                        /**
                        * field for HUDMode
                        */

                        
                                    protected java.lang.String localHUDMode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHUDModeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getHUDMode(){
                               return localHUDMode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HUDMode
                               */
                               public void setHUDMode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localHUDModeTracker = true;
                                       } else {
                                          localHUDModeTracker = false;
                                              
                                       }
                                   
                                            this.localHUDMode=param;
                                    

                               }
                            

                        /**
                        * field for SalesProcessName
                        */

                        
                                    protected java.lang.String localSalesProcessName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSalesProcessNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSalesProcessName(){
                               return localSalesProcessName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SalesProcessName
                               */
                               public void setSalesProcessName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSalesProcessNameTracker = true;
                                       } else {
                                          localSalesProcessNameTracker = false;
                                              
                                       }
                                   
                                            this.localSalesProcessName=param;
                                    

                               }
                            

                        /**
                        * field for WorkFax
                        */

                        
                                    protected java.lang.String localWorkFax ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localWorkFaxTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getWorkFax(){
                               return localWorkFax;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param WorkFax
                               */
                               public void setWorkFax(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localWorkFaxTracker = true;
                                       } else {
                                          localWorkFaxTracker = false;
                                              
                                       }
                                   
                                            this.localWorkFax=param;
                                    

                               }
                            

                        /**
                        * field for Status
                        */

                        
                                    protected java.lang.String localStatus ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStatusTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getStatus(){
                               return localStatus;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Status
                               */
                               public void setStatus(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localStatusTracker = true;
                                       } else {
                                          localStatusTracker = false;
                                              
                                       }
                                   
                                            this.localStatus=param;
                                    

                               }
                            

                        /**
                        * field for PhoneNumber
                        */

                        
                                    protected java.lang.String localPhoneNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPhoneNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPhoneNumber(){
                               return localPhoneNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PhoneNumber
                               */
                               public void setPhoneNumber(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPhoneNumberTracker = true;
                                       } else {
                                          localPhoneNumberTracker = false;
                                              
                                       }
                                   
                                            this.localPhoneNumber=param;
                                    

                               }
                            

                        /**
                        * field for MrMrs
                        */

                        
                                    protected java.lang.String localMrMrs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMrMrsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMrMrs(){
                               return localMrMrs;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MrMrs
                               */
                               public void setMrMrs(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMrMrsTracker = true;
                                       } else {
                                          localMrMrsTracker = false;
                                              
                                       }
                                   
                                            this.localMrMrs=param;
                                    

                               }
                            

                        /**
                        * field for JobTitle
                        */

                        
                                    protected java.lang.String localJobTitle ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localJobTitleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getJobTitle(){
                               return localJobTitle;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param JobTitle
                               */
                               public void setJobTitle(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localJobTitleTracker = true;
                                       } else {
                                          localJobTitleTracker = false;
                                              
                                       }
                                   
                                            this.localJobTitle=param;
                                    

                               }
                            

                        /**
                        * field for EMailAddr
                        */

                        
                                    protected java.lang.String localEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEMailAddr(){
                               return localEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EMailAddr
                               */
                               public void setEMailAddr(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEMailAddrTracker = true;
                                       } else {
                                          localEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for RelatedInfoFormat
                        */

                        
                                    protected java.lang.String localRelatedInfoFormat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRelatedInfoFormatTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRelatedInfoFormat(){
                               return localRelatedInfoFormat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RelatedInfoFormat
                               */
                               public void setRelatedInfoFormat(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRelatedInfoFormatTracker = true;
                                       } else {
                                          localRelatedInfoFormatTracker = false;
                                              
                                       }
                                   
                                            this.localRelatedInfoFormat=param;
                                    

                               }
                            

                        /**
                        * field for RoleName
                        */

                        
                                    protected java.lang.String localRoleName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRoleNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRoleName(){
                               return localRoleName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RoleName
                               */
                               public void setRoleName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRoleNameTracker = true;
                                       } else {
                                          localRoleNameTracker = false;
                                              
                                       }
                                   
                                            this.localRoleName=param;
                                    

                               }
                            

                        /**
                        * field for CommCmplDateFilterTag
                        */

                        
                                    protected java.lang.String localCommCmplDateFilterTag ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCommCmplDateFilterTagTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCommCmplDateFilterTag(){
                               return localCommCmplDateFilterTag;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CommCmplDateFilterTag
                               */
                               public void setCommCmplDateFilterTag(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCommCmplDateFilterTagTracker = true;
                                       } else {
                                          localCommCmplDateFilterTagTracker = false;
                                              
                                       }
                                   
                                            this.localCommCmplDateFilterTag=param;
                                    

                               }
                            

                        /**
                        * field for CommInboxDateFilterTag
                        */

                        
                                    protected java.lang.String localCommInboxDateFilterTag ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCommInboxDateFilterTagTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCommInboxDateFilterTag(){
                               return localCommInboxDateFilterTag;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CommInboxDateFilterTag
                               */
                               public void setCommInboxDateFilterTag(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCommInboxDateFilterTagTracker = true;
                                       } else {
                                          localCommInboxDateFilterTagTracker = false;
                                              
                                       }
                                   
                                            this.localCommInboxDateFilterTag=param;
                                    

                               }
                            

                        /**
                        * field for UserTimeZoneSupportforReportingSubjectAreas
                        */

                        
                                    protected boolean localUserTimeZoneSupportforReportingSubjectAreas ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserTimeZoneSupportforReportingSubjectAreasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getUserTimeZoneSupportforReportingSubjectAreas(){
                               return localUserTimeZoneSupportforReportingSubjectAreas;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserTimeZoneSupportforReportingSubjectAreas
                               */
                               public void setUserTimeZoneSupportforReportingSubjectAreas(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       
                                               if (false) {
                                           localUserTimeZoneSupportforReportingSubjectAreasTracker = false;
                                              
                                       } else {
                                          localUserTimeZoneSupportforReportingSubjectAreasTracker = true;
                                       }
                                   
                                            this.localUserTimeZoneSupportforReportingSubjectAreas=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFirstName
                        */

                        
                                    protected java.lang.String localUpdatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByFirstName(){
                               return localUpdatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFirstName
                               */
                               public void setUpdatedByFirstName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFirstNameTracker = true;
                                       } else {
                                          localUpdatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByLastName
                        */

                        
                                    protected java.lang.String localUpdatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByLastName(){
                               return localUpdatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByLastName
                               */
                               public void setUpdatedByLastName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByLastNameTracker = true;
                                       } else {
                                          localUpdatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByUserSignInId
                        */

                        
                                    protected java.lang.String localUpdatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByUserSignInId(){
                               return localUpdatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByUserSignInId
                               */
                               public void setUpdatedByUserSignInId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByUserSignInIdTracker = true;
                                       } else {
                                          localUpdatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByAlias
                        */

                        
                                    protected java.lang.String localUpdatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByAlias(){
                               return localUpdatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByAlias
                               */
                               public void setUpdatedByAlias(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByAliasTracker = true;
                                       } else {
                                          localUpdatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFullName
                        */

                        
                                    protected java.lang.String localUpdatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByFullName(){
                               return localUpdatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFullName
                               */
                               public void setUpdatedByFullName(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFullNameTracker = true;
                                       } else {
                                          localUpdatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByIntegrationId
                        */

                        
                                    protected java.lang.String localUpdatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByIntegrationId(){
                               return localUpdatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByIntegrationId
                               */
                               public void setUpdatedByIntegrationId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByIntegrationIdTracker = true;
                                       } else {
                                          localUpdatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByExternalSystemId
                        */

                        
                                    protected java.lang.String localUpdatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByExternalSystemId(){
                               return localUpdatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByExternalSystemId
                               */
                               public void setUpdatedByExternalSystemId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByExternalSystemIdTracker = true;
                                       } else {
                                          localUpdatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByEMailAddr
                        */

                        
                                    protected java.lang.String localUpdatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUpdatedByEMailAddr(){
                               return localUpdatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByEMailAddr
                               */
                               public void setUpdatedByEMailAddr(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByEMailAddrTracker = true;
                                       } else {
                                          localUpdatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByUserSignInId
                        */

                        
                                    protected java.lang.String localCreatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByUserSignInId(){
                               return localCreatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByUserSignInId
                               */
                               public void setCreatedByUserSignInId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByUserSignInIdTracker = true;
                                       } else {
                                          localCreatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByAlias
                        */

                        
                                    protected java.lang.String localCreatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByAlias(){
                               return localCreatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByAlias
                               */
                               public void setCreatedByAlias(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByAliasTracker = true;
                                       } else {
                                          localCreatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByIntegrationId
                        */

                        
                                    protected java.lang.String localCreatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByIntegrationId(){
                               return localCreatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByIntegrationId
                               */
                               public void setCreatedByIntegrationId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIntegrationIdTracker = true;
                                       } else {
                                          localCreatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByExternalSystemId
                        */

                        
                                    protected java.lang.String localCreatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByExternalSystemId(){
                               return localCreatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByExternalSystemId
                               */
                               public void setCreatedByExternalSystemId(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByExternalSystemIdTracker = true;
                                       } else {
                                          localCreatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByEMailAddr
                        */

                        
                                    protected java.lang.String localCreatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedByEMailAddr(){
                               return localCreatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByEMailAddr
                               */
                               public void setCreatedByEMailAddr(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByEMailAddrTracker = true;
                                       } else {
                                          localCreatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedBy
                        */

                        
                                    protected java.lang.String localCreatedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreatedBy(){
                               return localCreatedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedBy
                               */
                               public void setCreatedBy(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByTracker = true;
                                       } else {
                                          localCreatedByTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedBy=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedBy
                        */

                        
                                    protected java.lang.String localModifiedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifiedBy(){
                               return localModifiedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedBy
                               */
                               public void setModifiedBy(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByTracker = true;
                                       } else {
                                          localModifiedByTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedBy=param;
                                    

                               }
                            

                        /**
                        * field for ListOfDelegatedFromUser
                        */

                        
                                    protected ListOfDelegatedFromUserData localListOfDelegatedFromUser ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localListOfDelegatedFromUserTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ListOfDelegatedFromUserData
                           */
                           public  ListOfDelegatedFromUserData getListOfDelegatedFromUser(){
                               return localListOfDelegatedFromUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfDelegatedFromUser
                               */
                               public void setListOfDelegatedFromUser(ListOfDelegatedFromUserData param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localListOfDelegatedFromUserTracker = true;
                                       } else {
                                          localListOfDelegatedFromUserTracker = false;
                                              
                                       }
                                   
                                            this.localListOfDelegatedFromUser=param;
                                    

                               }
                            

                        /**
                        * field for ListOfDelegatedUser
                        */

                        
                                    protected ListOfDelegatedUserData localListOfDelegatedUser ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localListOfDelegatedUserTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ListOfDelegatedUserData
                           */
                           public  ListOfDelegatedUserData getListOfDelegatedUser(){
                               return localListOfDelegatedUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfDelegatedUser
                               */
                               public void setListOfDelegatedUser(ListOfDelegatedUserData param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localListOfDelegatedUserTracker = true;
                                       } else {
                                          localListOfDelegatedUserTracker = false;
                                              
                                       }
                                   
                                            this.localListOfDelegatedUser=param;
                                    

                               }
                            

                        /**
                        * field for ListOfUserDefaultBookPerType
                        */

                        
                                    protected ListOfUserDefaultBookPerTypeData localListOfUserDefaultBookPerType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localListOfUserDefaultBookPerTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ListOfUserDefaultBookPerTypeData
                           */
                           public  ListOfUserDefaultBookPerTypeData getListOfUserDefaultBookPerType(){
                               return localListOfUserDefaultBookPerType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfUserDefaultBookPerType
                               */
                               public void setListOfUserDefaultBookPerType(ListOfUserDefaultBookPerTypeData param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localListOfUserDefaultBookPerTypeTracker = true;
                                       } else {
                                          localListOfUserDefaultBookPerTypeTracker = false;
                                              
                                       }
                                   
                                            this.localListOfUserDefaultBookPerType=param;
                                    

                               }
                            

                        /**
                        * field for Operation
                        * This was an Attribute!
                        */

                        
                                    protected java.lang.String localOperation ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOperation(){
                               return localOperation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Operation
                               */
                               public void setOperation(java.lang.String param){
                            
                                            this.localOperation=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UserData.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Data");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":UserData",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "UserData",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localOperation != null){
                                        
                                                writeAttribute("",
                                                         "operation",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperation), xmlWriter);

                                            
                                      }
                                     if (localModifiedDateTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedDate");
                                    }
                                

                                          if (localModifiedDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedDate));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedDateTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedDate", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedDate");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedDate");
                                    }
                                

                                          if (localCreatedDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedDate));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedByIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedById", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedById");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedById");
                                    }
                                

                                          if (localModifiedById==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifiedById);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedById", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedById");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedById");
                                    }
                                

                                          if (localCreatedById==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedById);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModId");
                                    }
                                
                                               if (localModId==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ModId cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModId));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Id", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Id");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Id");
                                    }
                                

                                          if (localId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTimeZoneIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"TimeZoneId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"TimeZoneId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("TimeZoneId");
                                    }
                                

                                          if (localTimeZoneId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("TimeZoneId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTimeZoneId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTimeZoneNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"TimeZoneName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"TimeZoneName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("TimeZoneName");
                                    }
                                

                                          if (localTimeZoneName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("TimeZoneName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTimeZoneName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEmployeeNumberTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"EmployeeNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"EmployeeNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("EmployeeNumber");
                                    }
                                

                                          if (localEmployeeNumber==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("EmployeeNumber cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEmployeeNumber);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRoleIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"RoleId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"RoleId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("RoleId");
                                    }
                                

                                          if (localRoleId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("RoleId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRoleId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPrimaryPositionIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PrimaryPositionId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PrimaryPositionId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PrimaryPositionId");
                                    }
                                

                                          if (localPrimaryPositionId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PrimaryPositionId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPrimaryPositionId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFirstNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"FirstName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"FirstName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("FirstName");
                                    }
                                

                                          if (localFirstName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FirstName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFirstName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLastNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"LastName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"LastName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("LastName");
                                    }
                                

                                          if (localLastName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LastName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLastName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUserSignInIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UserSignInId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UserSignInId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UserSignInId");
                                    }
                                

                                          if (localUserSignInId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UserSignInId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUserSignInId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMiddleNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"MiddleName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"MiddleName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("MiddleName");
                                    }
                                

                                          if (localMiddleName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("MiddleName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMiddleName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localApprovalCurrencyTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ApprovalCurrency", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ApprovalCurrency");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ApprovalCurrency");
                                    }
                                

                                          if (localApprovalCurrency==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ApprovalCurrency cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localApprovalCurrency);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFundApprovalLimitTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"FundApprovalLimit", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"FundApprovalLimit");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("FundApprovalLimit");
                                    }
                                

                                          if (localFundApprovalLimit==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FundApprovalLimit cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFundApprovalLimit));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAliasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Alias", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Alias");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Alias");
                                    }
                                

                                          if (localAlias==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Alias cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAlias);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFullNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"FullName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"FullName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("FullName");
                                    }
                                

                                          if (localFullName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FullName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFullName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCellPhoneTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CellPhone", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CellPhone");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CellPhone");
                                    }
                                

                                          if (localCellPhone==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CellPhone cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCellPhone);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIntegrationIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"IntegrationId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"IntegrationId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("IntegrationId");
                                    }
                                

                                          if (localIntegrationId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("IntegrationId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localIntegrationId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPersonalAddressIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PersonalAddressId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PersonalAddressId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PersonalAddressId");
                                    }
                                

                                          if (localPersonalAddressId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PersonalAddressId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPersonalAddressId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPersonalCountryTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PersonalCountry", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PersonalCountry");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PersonalCountry");
                                    }
                                

                                          if (localPersonalCountry==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PersonalCountry cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPersonalCountry);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPersonalCityTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PersonalCity", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PersonalCity");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PersonalCity");
                                    }
                                

                                          if (localPersonalCity==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PersonalCity cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPersonalCity);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPersonalPostalCodeTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PersonalPostalCode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PersonalPostalCode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PersonalPostalCode");
                                    }
                                

                                          if (localPersonalPostalCode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PersonalPostalCode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPersonalPostalCode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPersonalCountyTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PersonalCounty", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PersonalCounty");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PersonalCounty");
                                    }
                                

                                          if (localPersonalCounty==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PersonalCounty cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPersonalCounty);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPersonalProvinceTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PersonalProvince", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PersonalProvince");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PersonalProvince");
                                    }
                                

                                          if (localPersonalProvince==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PersonalProvince cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPersonalProvince);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPersonalStateTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PersonalState", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PersonalState");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PersonalState");
                                    }
                                

                                          if (localPersonalState==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PersonalState cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPersonalState);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPersonalStreetAddressTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PersonalStreetAddress", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PersonalStreetAddress");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PersonalStreetAddress");
                                    }
                                

                                          if (localPersonalStreetAddress==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PersonalStreetAddress cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPersonalStreetAddress);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPersonalStreetAddress2Tracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PersonalStreetAddress2", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PersonalStreetAddress2");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PersonalStreetAddress2");
                                    }
                                

                                          if (localPersonalStreetAddress2==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PersonalStreetAddress2 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPersonalStreetAddress2);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLtCustomFooTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ltCustomFoo", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ltCustomFoo");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ltCustomFoo");
                                    }
                                

                                          if (localLtCustomFoo==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ltCustomFoo cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLtCustomFoo);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByExtTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByExt", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByExt");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByExt");
                                    }
                                

                                          if (localCreatedByExt==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByExt cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByExt);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedDateExtTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedDateExt", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedDateExt");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedDateExt");
                                    }
                                

                                          if (localCreatedDateExt==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedDateExt cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedDateExt));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDepartmentTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Department", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Department");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Department");
                                    }
                                

                                          if (localDepartment==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Department cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDepartment);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCurrencyCodeTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CurrencyCode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CurrencyCode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CurrencyCode");
                                    }
                                

                                          if (localCurrencyCode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CurrencyCode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCurrencyCode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTempPasswordFlagTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"TempPasswordFlag", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"TempPasswordFlag");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("TempPasswordFlag");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("TempPasswordFlag cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTempPasswordFlag));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localExternalSystemIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ExternalSystemId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ExternalSystemId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ExternalSystemId");
                                    }
                                

                                          if (localExternalSystemId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ExternalSystemId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localExternalSystemId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedDateExtTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedDateExt", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedDateExt");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedDateExt");
                                    }
                                

                                          if (localModifiedDateExt==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedDateExt cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedDateExt));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLastLoggedInTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"LastLoggedIn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"LastLoggedIn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("LastLoggedIn");
                                    }
                                

                                          if (localLastLoggedIn==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LastLoggedIn cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastLoggedIn));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLanguageCodeTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"LanguageCode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"LanguageCode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("LanguageCode");
                                    }
                                

                                          if (localLanguageCode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LanguageCode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLanguageCode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLanguageTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Language", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Language");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Language");
                                    }
                                

                                          if (localLanguage==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Language cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLanguage);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedByExtTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedByExt", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedByExt");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedByExt");
                                    }
                                

                                          if (localModifiedByExt==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedByExt cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifiedByExt);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLocaleCodeTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"LocaleCode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"LocaleCode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("LocaleCode");
                                    }
                                

                                          if (localLocaleCode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LocaleCode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLocaleCode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLocaleTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Locale", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Locale");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Locale");
                                    }
                                

                                          if (localLocale==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Locale cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLocale);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localManagerAliasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ManagerAlias", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ManagerAlias");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ManagerAlias");
                                    }
                                

                                          if (localManagerAlias==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ManagerAlias cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localManagerAlias);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localManagerFullNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ManagerFullName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ManagerFullName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ManagerFullName");
                                    }
                                

                                          if (localManagerFullName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ManagerFullName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localManagerFullName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDivisionTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Division", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Division");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Division");
                                    }
                                

                                          if (localDivision==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Division cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDivision);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localManagerIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ManagerId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ManagerId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ManagerId");
                                    }
                                

                                          if (localManagerId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ManagerId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localManagerId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPrimaryGroupTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PrimaryGroup", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PrimaryGroup");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PrimaryGroup");
                                    }
                                

                                          if (localPrimaryGroup==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PrimaryGroup cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPrimaryGroup);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDefaultCalendarViewTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"DefaultCalendarView", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"DefaultCalendarView");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("DefaultCalendarView");
                                    }
                                

                                          if (localDefaultCalendarView==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("DefaultCalendarView cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDefaultCalendarView);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnableTeamContactsSyncTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"EnableTeamContactsSync", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"EnableTeamContactsSync");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("EnableTeamContactsSync");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("EnableTeamContactsSync cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnableTeamContactsSync));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localShowWelcomePageTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ShowWelcomePage", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ShowWelcomePage");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ShowWelcomePage");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ShowWelcomePage cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShowWelcomePage));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPasswordStateTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PasswordState", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PasswordState");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PasswordState");
                                    }
                                

                                          if (localPasswordState==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PasswordState cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPasswordState);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMaxNumOfListExportTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"MaxNumOfListExport", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"MaxNumOfListExport");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("MaxNumOfListExport");
                                    }
                                
                                               if (localMaxNumOfListExport==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("MaxNumOfListExport cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxNumOfListExport));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDefaultUserIDTypeTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"DefaultUserIDType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"DefaultUserIDType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("DefaultUserIDType");
                                    }
                                

                                          if (localDefaultUserIDType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("DefaultUserIDType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDefaultUserIDType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNumberOfSecurityQuestionsToCompleteTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"NumberOfSecurityQuestionsToComplete", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"NumberOfSecurityQuestionsToComplete");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("NumberOfSecurityQuestionsToComplete");
                                    }
                                

                                          if (localNumberOfSecurityQuestionsToComplete==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("NumberOfSecurityQuestionsToComplete cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNumberOfSecurityQuestionsToComplete);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAuthenticationTypeTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"AuthenticationType", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"AuthenticationType");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("AuthenticationType");
                                    }
                                

                                          if (localAuthenticationType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("AuthenticationType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAuthenticationType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localExternalIdentifierForSingleSignOnTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ExternalIdentifierForSingleSignOn", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ExternalIdentifierForSingleSignOn");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ExternalIdentifierForSingleSignOn");
                                    }
                                

                                          if (localExternalIdentifierForSingleSignOn==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ExternalIdentifierForSingleSignOn cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localExternalIdentifierForSingleSignOn);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNeverCallTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"NeverCall", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"NeverCall");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("NeverCall");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("NeverCall cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNeverCall));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNevereMailTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"NevereMail", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"NevereMail");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("NevereMail");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("NevereMail cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNevereMail));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNeverMailTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"NeverMail", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"NeverMail");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("NeverMail");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("NeverMail cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNeverMail));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPersonalStreetAddress3Tracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PersonalStreetAddress3", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PersonalStreetAddress3");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PersonalStreetAddress3");
                                    }
                                

                                          if (localPersonalStreetAddress3==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PersonalStreetAddress3 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPersonalStreetAddress3);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRoleTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Role", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Role");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Role");
                                    }
                                

                                          if (localRole==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Role cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRole);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSecondaryEmailTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"SecondaryEmail", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"SecondaryEmail");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("SecondaryEmail");
                                    }
                                

                                          if (localSecondaryEmail==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("SecondaryEmail cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSecondaryEmail);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMarketTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Market", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Market");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Market");
                                    }
                                

                                          if (localMarket==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Market cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMarket);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSubMarketTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"SubMarket", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"SubMarket");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("SubMarket");
                                    }
                                

                                          if (localSubMarket==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("SubMarket cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSubMarket);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRegionTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Region", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Region");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Region");
                                    }
                                

                                          if (localRegion==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Region cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRegion);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSubRegionTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"SubRegion", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"SubRegion");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("SubRegion");
                                    }
                                

                                          if (localSubRegion==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("SubRegion cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSubRegion);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBusinessUnitTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"BusinessUnit", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"BusinessUnit");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("BusinessUnit");
                                    }
                                

                                          if (localBusinessUnit==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BusinessUnit cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBusinessUnit);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBusinessUnitLevel1Tracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"BusinessUnitLevel1", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"BusinessUnitLevel1");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("BusinessUnitLevel1");
                                    }
                                

                                          if (localBusinessUnitLevel1==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel1 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBusinessUnitLevel1);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBusinessUnitLevel2Tracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"BusinessUnitLevel2", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"BusinessUnitLevel2");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("BusinessUnitLevel2");
                                    }
                                

                                          if (localBusinessUnitLevel2==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel2 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBusinessUnitLevel2);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBusinessUnitLevel3Tracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"BusinessUnitLevel3", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"BusinessUnitLevel3");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("BusinessUnitLevel3");
                                    }
                                

                                          if (localBusinessUnitLevel3==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel3 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBusinessUnitLevel3);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBusinessUnitLevel4Tracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"BusinessUnitLevel4", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"BusinessUnitLevel4");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("BusinessUnitLevel4");
                                    }
                                

                                          if (localBusinessUnitLevel4==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel4 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBusinessUnitLevel4);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSupervisorTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Supervisor", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Supervisor");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Supervisor");
                                    }
                                

                                          if (localSupervisor==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Supervisor cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSupervisor);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLeadLimitTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"LeadLimit", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"LeadLimit");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("LeadLimit");
                                    }
                                

                                          if (localLeadLimit==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LeadLimit cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLeadLimit));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMiscellaneousText1Tracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"MiscellaneousText1", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"MiscellaneousText1");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("MiscellaneousText1");
                                    }
                                

                                          if (localMiscellaneousText1==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("MiscellaneousText1 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMiscellaneousText1);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMiscellaneousText2Tracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"MiscellaneousText2", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"MiscellaneousText2");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("MiscellaneousText2");
                                    }
                                

                                          if (localMiscellaneousText2==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("MiscellaneousText2 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMiscellaneousText2);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMiscellaneousNumber1Tracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"MiscellaneousNumber1", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"MiscellaneousNumber1");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("MiscellaneousNumber1");
                                    }
                                

                                          if (localMiscellaneousNumber1==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("MiscellaneousNumber1 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMiscellaneousNumber1));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMiscellaneousNumber2Tracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"MiscellaneousNumber2", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"MiscellaneousNumber2");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("MiscellaneousNumber2");
                                    }
                                

                                          if (localMiscellaneousNumber2==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("MiscellaneousNumber2 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMiscellaneousNumber2));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSalesProcessIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"SalesProcessId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"SalesProcessId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("SalesProcessId");
                                    }
                                

                                          if (localSalesProcessId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("SalesProcessId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSalesProcessId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCompanyTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Company", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Company");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Company");
                                    }
                                

                                          if (localCompany==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Company cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompany);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCompanySignInIDTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CompanySignInID", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CompanySignInID");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CompanySignInID");
                                    }
                                

                                          if (localCompanySignInID==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CompanySignInID cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCompanySignInID);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUserLoginIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UserLoginId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UserLoginId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UserLoginId");
                                    }
                                

                                          if (localUserLoginId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UserLoginId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUserLoginId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDefaultBookIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"DefaultBookId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"DefaultBookId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("DefaultBookId");
                                    }
                                

                                          if (localDefaultBookId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("DefaultBookId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDefaultBookId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIncludeSubBooksTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"IncludeSubBooks", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"IncludeSubBooks");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("IncludeSubBooks");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("IncludeSubBooks cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIncludeSubBooks));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDefaultSearchObjectTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"DefaultSearchObject", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"DefaultSearchObject");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("DefaultSearchObject");
                                    }
                                

                                          if (localDefaultSearchObject==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("DefaultSearchObject cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDefaultSearchObject);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPromptToDialFlagTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PromptToDialFlag", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PromptToDialFlag");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PromptToDialFlag");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("PromptToDialFlag cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPromptToDialFlag));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDefaultBookNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"DefaultBookName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"DefaultBookName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("DefaultBookName");
                                    }
                                

                                          if (localDefaultBookName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("DefaultBookName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDefaultBookName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localHistoricalSubjectAreasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"HistoricalSubjectAreas", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"HistoricalSubjectAreas");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("HistoricalSubjectAreas");
                                    }
                                

                                          if (localHistoricalSubjectAreas==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("HistoricalSubjectAreas cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localHistoricalSubjectAreas);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReportingSubjectAreasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ReportingSubjectAreas", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ReportingSubjectAreas");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ReportingSubjectAreas");
                                    }
                                

                                          if (localReportingSubjectAreas==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ReportingSubjectAreas cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localReportingSubjectAreas);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDefaultAnalyticsBookIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"DefaultAnalyticsBookId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"DefaultAnalyticsBookId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("DefaultAnalyticsBookId");
                                    }
                                

                                          if (localDefaultAnalyticsBookId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("DefaultAnalyticsBookId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDefaultAnalyticsBookId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDefaultAnalyticsBookNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"DefaultAnalyticsBookName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"DefaultAnalyticsBookName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("DefaultAnalyticsBookName");
                                    }
                                

                                          if (localDefaultAnalyticsBookName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("DefaultAnalyticsBookName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDefaultAnalyticsBookName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnableAnimateFlagTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"EnableAnimateFlag", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"EnableAnimateFlag");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("EnableAnimateFlag");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("EnableAnimateFlag cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnableAnimateFlag));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPartnerOrganizationNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PartnerOrganizationName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PartnerOrganizationName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PartnerOrganizationName");
                                    }
                                

                                          if (localPartnerOrganizationName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PartnerOrganizationName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPartnerOrganizationName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPartnerOrganizationIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PartnerOrganizationId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PartnerOrganizationId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PartnerOrganizationId");
                                    }
                                

                                          if (localPartnerOrganizationId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PartnerOrganizationId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPartnerOrganizationId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPreviewModeTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PreviewMode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PreviewMode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PreviewMode");
                                    }
                                

                                          if (localPreviewMode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PreviewMode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPreviewMode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSendCriticalAlertsFlagTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"SendCriticalAlertsFlag", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"SendCriticalAlertsFlag");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("SendCriticalAlertsFlag");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("SendCriticalAlertsFlag cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendCriticalAlertsFlag));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByFirstNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByFirstName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByFirstName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByFirstName");
                                    }
                                

                                          if (localCreatedByFirstName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByFirstName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByLastNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByLastName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByLastName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByLastName");
                                    }
                                

                                          if (localCreatedByLastName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByLastName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByFullNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByFullName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByFullName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByFullName");
                                    }
                                

                                          if (localCreatedByFullName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByFullName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRBCanReadAllRecforUserTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"RBCanReadAllRecforUser", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"RBCanReadAllRecforUser");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("RBCanReadAllRecforUser");
                                    }
                                

                                          if (localRBCanReadAllRecforUser==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("RBCanReadAllRecforUser cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRBCanReadAllRecforUser);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localThemeNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ThemeName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ThemeName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ThemeName");
                                    }
                                

                                          if (localThemeName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ThemeName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localThemeName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localHUDModeTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"HUDMode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"HUDMode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("HUDMode");
                                    }
                                

                                          if (localHUDMode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("HUDMode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localHUDMode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSalesProcessNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"SalesProcessName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"SalesProcessName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("SalesProcessName");
                                    }
                                

                                          if (localSalesProcessName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("SalesProcessName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSalesProcessName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localWorkFaxTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"WorkFax", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"WorkFax");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("WorkFax");
                                    }
                                

                                          if (localWorkFax==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("WorkFax cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localWorkFax);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStatusTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Status", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Status");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Status");
                                    }
                                

                                          if (localStatus==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Status cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localStatus);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPhoneNumberTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"PhoneNumber", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"PhoneNumber");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("PhoneNumber");
                                    }
                                

                                          if (localPhoneNumber==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PhoneNumber cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPhoneNumber);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMrMrsTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"MrMrs", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"MrMrs");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("MrMrs");
                                    }
                                

                                          if (localMrMrs==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("MrMrs cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMrMrs);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localJobTitleTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"JobTitle", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"JobTitle");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("JobTitle");
                                    }
                                

                                          if (localJobTitle==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("JobTitle cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localJobTitle);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEMailAddrTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"EMailAddr", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"EMailAddr");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("EMailAddr");
                                    }
                                

                                          if (localEMailAddr==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("EMailAddr cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEMailAddr);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRelatedInfoFormatTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"RelatedInfoFormat", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"RelatedInfoFormat");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("RelatedInfoFormat");
                                    }
                                

                                          if (localRelatedInfoFormat==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("RelatedInfoFormat cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRelatedInfoFormat);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRoleNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"RoleName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"RoleName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("RoleName");
                                    }
                                

                                          if (localRoleName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("RoleName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRoleName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCommCmplDateFilterTagTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CommCmplDateFilterTag", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CommCmplDateFilterTag");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CommCmplDateFilterTag");
                                    }
                                

                                          if (localCommCmplDateFilterTag==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CommCmplDateFilterTag cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCommCmplDateFilterTag);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCommInboxDateFilterTagTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CommInboxDateFilterTag", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CommInboxDateFilterTag");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CommInboxDateFilterTag");
                                    }
                                

                                          if (localCommInboxDateFilterTag==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CommInboxDateFilterTag cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCommInboxDateFilterTag);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUserTimeZoneSupportforReportingSubjectAreasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UserTimeZoneSupportforReportingSubjectAreas", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UserTimeZoneSupportforReportingSubjectAreas");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UserTimeZoneSupportforReportingSubjectAreas");
                                    }
                                
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("UserTimeZoneSupportforReportingSubjectAreas cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserTimeZoneSupportforReportingSubjectAreas));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByFirstNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByFirstName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByFirstName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByFirstName");
                                    }
                                

                                          if (localUpdatedByFirstName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByFirstName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByLastNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByLastName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByLastName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByLastName");
                                    }
                                

                                          if (localUpdatedByLastName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByLastName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByUserSignInIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByUserSignInId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByUserSignInId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByUserSignInId");
                                    }
                                

                                          if (localUpdatedByUserSignInId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByUserSignInId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByAliasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByAlias", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByAlias");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByAlias");
                                    }
                                

                                          if (localUpdatedByAlias==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByAlias);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByFullNameTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByFullName", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByFullName");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByFullName");
                                    }
                                

                                          if (localUpdatedByFullName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByFullName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByIntegrationIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByIntegrationId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByIntegrationId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByIntegrationId");
                                    }
                                

                                          if (localUpdatedByIntegrationId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByIntegrationId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByExternalSystemIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByExternalSystemId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByExternalSystemId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByExternalSystemId");
                                    }
                                

                                          if (localUpdatedByExternalSystemId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByExternalSystemId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdatedByEMailAddrTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"UpdatedByEMailAddr", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"UpdatedByEMailAddr");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("UpdatedByEMailAddr");
                                    }
                                

                                          if (localUpdatedByEMailAddr==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUpdatedByEMailAddr);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByUserSignInIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByUserSignInId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByUserSignInId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByUserSignInId");
                                    }
                                

                                          if (localCreatedByUserSignInId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByUserSignInId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByAliasTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByAlias", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByAlias");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByAlias");
                                    }
                                

                                          if (localCreatedByAlias==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByAlias);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByIntegrationIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByIntegrationId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByIntegrationId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByIntegrationId");
                                    }
                                

                                          if (localCreatedByIntegrationId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByIntegrationId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByExternalSystemIdTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByExternalSystemId", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByExternalSystemId");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByExternalSystemId");
                                    }
                                

                                          if (localCreatedByExternalSystemId==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByExternalSystemId);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByEMailAddrTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedByEMailAddr", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedByEMailAddr");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedByEMailAddr");
                                    }
                                

                                          if (localCreatedByEMailAddr==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedByEMailAddr);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCreatedByTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"CreatedBy", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"CreatedBy");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("CreatedBy");
                                    }
                                

                                          if (localCreatedBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreatedBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedByTracker){
                                    namespace = "urn:/crmondemand/xml/User/Data";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ModifiedBy", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ModifiedBy");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ModifiedBy");
                                    }
                                

                                          if (localModifiedBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifiedBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localListOfDelegatedFromUserTracker){
                                            if (localListOfDelegatedFromUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfDelegatedFromUser cannot be null!!");
                                            }
                                           localListOfDelegatedFromUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfDelegatedFromUser"),
                                               factory,xmlWriter);
                                        } if (localListOfDelegatedUserTracker){
                                            if (localListOfDelegatedUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfDelegatedUser cannot be null!!");
                                            }
                                           localListOfDelegatedUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfDelegatedUser"),
                                               factory,xmlWriter);
                                        } if (localListOfUserDefaultBookPerTypeTracker){
                                            if (localListOfUserDefaultBookPerType==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfUserDefaultBookPerType cannot be null!!");
                                            }
                                           localListOfUserDefaultBookPerType.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUserDefaultBookPerType"),
                                               factory,xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localModifiedDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedDate"));
                                 
                                        if (localModifiedDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                        }
                                    } if (localCreatedDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedDate"));
                                 
                                        if (localCreatedDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                        }
                                    } if (localModifiedByIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedById"));
                                 
                                        if (localModifiedById != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedById));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                        }
                                    } if (localCreatedByIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedById"));
                                 
                                        if (localCreatedById != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedById));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                        }
                                    } if (localModIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModId"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModId));
                            } if (localIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Id"));
                                 
                                        if (localId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                        }
                                    } if (localTimeZoneIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "TimeZoneId"));
                                 
                                        if (localTimeZoneId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimeZoneId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("TimeZoneId cannot be null!!");
                                        }
                                    } if (localTimeZoneNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "TimeZoneName"));
                                 
                                        if (localTimeZoneName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimeZoneName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("TimeZoneName cannot be null!!");
                                        }
                                    } if (localEmployeeNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "EmployeeNumber"));
                                 
                                        if (localEmployeeNumber != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEmployeeNumber));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("EmployeeNumber cannot be null!!");
                                        }
                                    } if (localRoleIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "RoleId"));
                                 
                                        if (localRoleId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoleId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("RoleId cannot be null!!");
                                        }
                                    } if (localPrimaryPositionIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PrimaryPositionId"));
                                 
                                        if (localPrimaryPositionId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrimaryPositionId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PrimaryPositionId cannot be null!!");
                                        }
                                    } if (localFirstNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "FirstName"));
                                 
                                        if (localFirstName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFirstName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FirstName cannot be null!!");
                                        }
                                    } if (localLastNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "LastName"));
                                 
                                        if (localLastName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LastName cannot be null!!");
                                        }
                                    } if (localUserSignInIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UserSignInId"));
                                 
                                        if (localUserSignInId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserSignInId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UserSignInId cannot be null!!");
                                        }
                                    } if (localMiddleNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "MiddleName"));
                                 
                                        if (localMiddleName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMiddleName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("MiddleName cannot be null!!");
                                        }
                                    } if (localApprovalCurrencyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ApprovalCurrency"));
                                 
                                        if (localApprovalCurrency != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApprovalCurrency));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ApprovalCurrency cannot be null!!");
                                        }
                                    } if (localFundApprovalLimitTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "FundApprovalLimit"));
                                 
                                        if (localFundApprovalLimit != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFundApprovalLimit));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FundApprovalLimit cannot be null!!");
                                        }
                                    } if (localAliasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Alias"));
                                 
                                        if (localAlias != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAlias));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Alias cannot be null!!");
                                        }
                                    } if (localFullNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "FullName"));
                                 
                                        if (localFullName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFullName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FullName cannot be null!!");
                                        }
                                    } if (localCellPhoneTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CellPhone"));
                                 
                                        if (localCellPhone != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCellPhone));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CellPhone cannot be null!!");
                                        }
                                    } if (localIntegrationIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "IntegrationId"));
                                 
                                        if (localIntegrationId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIntegrationId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("IntegrationId cannot be null!!");
                                        }
                                    } if (localPersonalAddressIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PersonalAddressId"));
                                 
                                        if (localPersonalAddressId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPersonalAddressId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PersonalAddressId cannot be null!!");
                                        }
                                    } if (localPersonalCountryTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PersonalCountry"));
                                 
                                        if (localPersonalCountry != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPersonalCountry));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PersonalCountry cannot be null!!");
                                        }
                                    } if (localPersonalCityTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PersonalCity"));
                                 
                                        if (localPersonalCity != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPersonalCity));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PersonalCity cannot be null!!");
                                        }
                                    } if (localPersonalPostalCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PersonalPostalCode"));
                                 
                                        if (localPersonalPostalCode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPersonalPostalCode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PersonalPostalCode cannot be null!!");
                                        }
                                    } if (localPersonalCountyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PersonalCounty"));
                                 
                                        if (localPersonalCounty != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPersonalCounty));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PersonalCounty cannot be null!!");
                                        }
                                    } if (localPersonalProvinceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PersonalProvince"));
                                 
                                        if (localPersonalProvince != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPersonalProvince));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PersonalProvince cannot be null!!");
                                        }
                                    } if (localPersonalStateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PersonalState"));
                                 
                                        if (localPersonalState != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPersonalState));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PersonalState cannot be null!!");
                                        }
                                    } if (localPersonalStreetAddressTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PersonalStreetAddress"));
                                 
                                        if (localPersonalStreetAddress != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPersonalStreetAddress));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PersonalStreetAddress cannot be null!!");
                                        }
                                    } if (localPersonalStreetAddress2Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PersonalStreetAddress2"));
                                 
                                        if (localPersonalStreetAddress2 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPersonalStreetAddress2));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PersonalStreetAddress2 cannot be null!!");
                                        }
                                    } if (localLtCustomFooTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ltCustomFoo"));
                                 
                                        if (localLtCustomFoo != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLtCustomFoo));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ltCustomFoo cannot be null!!");
                                        }
                                    } if (localCreatedByExtTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByExt"));
                                 
                                        if (localCreatedByExt != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByExt));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByExt cannot be null!!");
                                        }
                                    } if (localCreatedDateExtTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedDateExt"));
                                 
                                        if (localCreatedDateExt != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedDateExt));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedDateExt cannot be null!!");
                                        }
                                    } if (localDepartmentTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Department"));
                                 
                                        if (localDepartment != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDepartment));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Department cannot be null!!");
                                        }
                                    } if (localCurrencyCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CurrencyCode"));
                                 
                                        if (localCurrencyCode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCurrencyCode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CurrencyCode cannot be null!!");
                                        }
                                    } if (localTempPasswordFlagTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "TempPasswordFlag"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTempPasswordFlag));
                            } if (localExternalSystemIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ExternalSystemId"));
                                 
                                        if (localExternalSystemId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExternalSystemId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ExternalSystemId cannot be null!!");
                                        }
                                    } if (localModifiedDateExtTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedDateExt"));
                                 
                                        if (localModifiedDateExt != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedDateExt));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedDateExt cannot be null!!");
                                        }
                                    } if (localLastLoggedInTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "LastLoggedIn"));
                                 
                                        if (localLastLoggedIn != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastLoggedIn));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LastLoggedIn cannot be null!!");
                                        }
                                    } if (localLanguageCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "LanguageCode"));
                                 
                                        if (localLanguageCode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLanguageCode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LanguageCode cannot be null!!");
                                        }
                                    } if (localLanguageTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Language"));
                                 
                                        if (localLanguage != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLanguage));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Language cannot be null!!");
                                        }
                                    } if (localModifiedByExtTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedByExt"));
                                 
                                        if (localModifiedByExt != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedByExt));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedByExt cannot be null!!");
                                        }
                                    } if (localLocaleCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "LocaleCode"));
                                 
                                        if (localLocaleCode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLocaleCode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LocaleCode cannot be null!!");
                                        }
                                    } if (localLocaleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Locale"));
                                 
                                        if (localLocale != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLocale));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Locale cannot be null!!");
                                        }
                                    } if (localManagerAliasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ManagerAlias"));
                                 
                                        if (localManagerAlias != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localManagerAlias));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ManagerAlias cannot be null!!");
                                        }
                                    } if (localManagerFullNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ManagerFullName"));
                                 
                                        if (localManagerFullName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localManagerFullName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ManagerFullName cannot be null!!");
                                        }
                                    } if (localDivisionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Division"));
                                 
                                        if (localDivision != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDivision));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Division cannot be null!!");
                                        }
                                    } if (localManagerIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ManagerId"));
                                 
                                        if (localManagerId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localManagerId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ManagerId cannot be null!!");
                                        }
                                    } if (localPrimaryGroupTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PrimaryGroup"));
                                 
                                        if (localPrimaryGroup != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrimaryGroup));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PrimaryGroup cannot be null!!");
                                        }
                                    } if (localDefaultCalendarViewTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "DefaultCalendarView"));
                                 
                                        if (localDefaultCalendarView != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDefaultCalendarView));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("DefaultCalendarView cannot be null!!");
                                        }
                                    } if (localEnableTeamContactsSyncTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "EnableTeamContactsSync"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnableTeamContactsSync));
                            } if (localShowWelcomePageTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ShowWelcomePage"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShowWelcomePage));
                            } if (localPasswordStateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PasswordState"));
                                 
                                        if (localPasswordState != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPasswordState));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PasswordState cannot be null!!");
                                        }
                                    } if (localMaxNumOfListExportTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "MaxNumOfListExport"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxNumOfListExport));
                            } if (localDefaultUserIDTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "DefaultUserIDType"));
                                 
                                        if (localDefaultUserIDType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDefaultUserIDType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("DefaultUserIDType cannot be null!!");
                                        }
                                    } if (localNumberOfSecurityQuestionsToCompleteTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "NumberOfSecurityQuestionsToComplete"));
                                 
                                        if (localNumberOfSecurityQuestionsToComplete != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumberOfSecurityQuestionsToComplete));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("NumberOfSecurityQuestionsToComplete cannot be null!!");
                                        }
                                    } if (localAuthenticationTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "AuthenticationType"));
                                 
                                        if (localAuthenticationType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuthenticationType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("AuthenticationType cannot be null!!");
                                        }
                                    } if (localExternalIdentifierForSingleSignOnTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ExternalIdentifierForSingleSignOn"));
                                 
                                        if (localExternalIdentifierForSingleSignOn != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExternalIdentifierForSingleSignOn));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ExternalIdentifierForSingleSignOn cannot be null!!");
                                        }
                                    } if (localNeverCallTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "NeverCall"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNeverCall));
                            } if (localNevereMailTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "NevereMail"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNevereMail));
                            } if (localNeverMailTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "NeverMail"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNeverMail));
                            } if (localPersonalStreetAddress3Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PersonalStreetAddress3"));
                                 
                                        if (localPersonalStreetAddress3 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPersonalStreetAddress3));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PersonalStreetAddress3 cannot be null!!");
                                        }
                                    } if (localRoleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Role"));
                                 
                                        if (localRole != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRole));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Role cannot be null!!");
                                        }
                                    } if (localSecondaryEmailTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "SecondaryEmail"));
                                 
                                        if (localSecondaryEmail != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSecondaryEmail));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("SecondaryEmail cannot be null!!");
                                        }
                                    } if (localMarketTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Market"));
                                 
                                        if (localMarket != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMarket));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Market cannot be null!!");
                                        }
                                    } if (localSubMarketTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "SubMarket"));
                                 
                                        if (localSubMarket != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubMarket));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("SubMarket cannot be null!!");
                                        }
                                    } if (localRegionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Region"));
                                 
                                        if (localRegion != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegion));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Region cannot be null!!");
                                        }
                                    } if (localSubRegionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "SubRegion"));
                                 
                                        if (localSubRegion != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubRegion));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("SubRegion cannot be null!!");
                                        }
                                    } if (localBusinessUnitTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "BusinessUnit"));
                                 
                                        if (localBusinessUnit != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBusinessUnit));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BusinessUnit cannot be null!!");
                                        }
                                    } if (localBusinessUnitLevel1Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "BusinessUnitLevel1"));
                                 
                                        if (localBusinessUnitLevel1 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBusinessUnitLevel1));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel1 cannot be null!!");
                                        }
                                    } if (localBusinessUnitLevel2Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "BusinessUnitLevel2"));
                                 
                                        if (localBusinessUnitLevel2 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBusinessUnitLevel2));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel2 cannot be null!!");
                                        }
                                    } if (localBusinessUnitLevel3Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "BusinessUnitLevel3"));
                                 
                                        if (localBusinessUnitLevel3 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBusinessUnitLevel3));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel3 cannot be null!!");
                                        }
                                    } if (localBusinessUnitLevel4Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "BusinessUnitLevel4"));
                                 
                                        if (localBusinessUnitLevel4 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBusinessUnitLevel4));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel4 cannot be null!!");
                                        }
                                    } if (localSupervisorTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Supervisor"));
                                 
                                        if (localSupervisor != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSupervisor));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Supervisor cannot be null!!");
                                        }
                                    } if (localLeadLimitTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "LeadLimit"));
                                 
                                        if (localLeadLimit != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLeadLimit));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LeadLimit cannot be null!!");
                                        }
                                    } if (localMiscellaneousText1Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "MiscellaneousText1"));
                                 
                                        if (localMiscellaneousText1 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMiscellaneousText1));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("MiscellaneousText1 cannot be null!!");
                                        }
                                    } if (localMiscellaneousText2Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "MiscellaneousText2"));
                                 
                                        if (localMiscellaneousText2 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMiscellaneousText2));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("MiscellaneousText2 cannot be null!!");
                                        }
                                    } if (localMiscellaneousNumber1Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "MiscellaneousNumber1"));
                                 
                                        if (localMiscellaneousNumber1 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMiscellaneousNumber1));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("MiscellaneousNumber1 cannot be null!!");
                                        }
                                    } if (localMiscellaneousNumber2Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "MiscellaneousNumber2"));
                                 
                                        if (localMiscellaneousNumber2 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMiscellaneousNumber2));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("MiscellaneousNumber2 cannot be null!!");
                                        }
                                    } if (localSalesProcessIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "SalesProcessId"));
                                 
                                        if (localSalesProcessId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSalesProcessId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("SalesProcessId cannot be null!!");
                                        }
                                    } if (localCompanyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Company"));
                                 
                                        if (localCompany != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompany));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Company cannot be null!!");
                                        }
                                    } if (localCompanySignInIDTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CompanySignInID"));
                                 
                                        if (localCompanySignInID != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompanySignInID));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CompanySignInID cannot be null!!");
                                        }
                                    } if (localUserLoginIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UserLoginId"));
                                 
                                        if (localUserLoginId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserLoginId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UserLoginId cannot be null!!");
                                        }
                                    } if (localDefaultBookIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "DefaultBookId"));
                                 
                                        if (localDefaultBookId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDefaultBookId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("DefaultBookId cannot be null!!");
                                        }
                                    } if (localIncludeSubBooksTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "IncludeSubBooks"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIncludeSubBooks));
                            } if (localDefaultSearchObjectTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "DefaultSearchObject"));
                                 
                                        if (localDefaultSearchObject != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDefaultSearchObject));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("DefaultSearchObject cannot be null!!");
                                        }
                                    } if (localPromptToDialFlagTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PromptToDialFlag"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPromptToDialFlag));
                            } if (localDefaultBookNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "DefaultBookName"));
                                 
                                        if (localDefaultBookName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDefaultBookName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("DefaultBookName cannot be null!!");
                                        }
                                    } if (localHistoricalSubjectAreasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "HistoricalSubjectAreas"));
                                 
                                        if (localHistoricalSubjectAreas != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHistoricalSubjectAreas));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("HistoricalSubjectAreas cannot be null!!");
                                        }
                                    } if (localReportingSubjectAreasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ReportingSubjectAreas"));
                                 
                                        if (localReportingSubjectAreas != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReportingSubjectAreas));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ReportingSubjectAreas cannot be null!!");
                                        }
                                    } if (localDefaultAnalyticsBookIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "DefaultAnalyticsBookId"));
                                 
                                        if (localDefaultAnalyticsBookId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDefaultAnalyticsBookId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("DefaultAnalyticsBookId cannot be null!!");
                                        }
                                    } if (localDefaultAnalyticsBookNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "DefaultAnalyticsBookName"));
                                 
                                        if (localDefaultAnalyticsBookName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDefaultAnalyticsBookName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("DefaultAnalyticsBookName cannot be null!!");
                                        }
                                    } if (localEnableAnimateFlagTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "EnableAnimateFlag"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnableAnimateFlag));
                            } if (localPartnerOrganizationNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PartnerOrganizationName"));
                                 
                                        if (localPartnerOrganizationName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPartnerOrganizationName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PartnerOrganizationName cannot be null!!");
                                        }
                                    } if (localPartnerOrganizationIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PartnerOrganizationId"));
                                 
                                        if (localPartnerOrganizationId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPartnerOrganizationId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PartnerOrganizationId cannot be null!!");
                                        }
                                    } if (localPreviewModeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PreviewMode"));
                                 
                                        if (localPreviewMode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPreviewMode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PreviewMode cannot be null!!");
                                        }
                                    } if (localSendCriticalAlertsFlagTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "SendCriticalAlertsFlag"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendCriticalAlertsFlag));
                            } if (localCreatedByFirstNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByFirstName"));
                                 
                                        if (localCreatedByFirstName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByFirstName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                        }
                                    } if (localCreatedByLastNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByLastName"));
                                 
                                        if (localCreatedByLastName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByLastName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                        }
                                    } if (localCreatedByFullNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByFullName"));
                                 
                                        if (localCreatedByFullName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByFullName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                        }
                                    } if (localRBCanReadAllRecforUserTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "RBCanReadAllRecforUser"));
                                 
                                        if (localRBCanReadAllRecforUser != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRBCanReadAllRecforUser));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("RBCanReadAllRecforUser cannot be null!!");
                                        }
                                    } if (localThemeNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ThemeName"));
                                 
                                        if (localThemeName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localThemeName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ThemeName cannot be null!!");
                                        }
                                    } if (localHUDModeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "HUDMode"));
                                 
                                        if (localHUDMode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHUDMode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("HUDMode cannot be null!!");
                                        }
                                    } if (localSalesProcessNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "SalesProcessName"));
                                 
                                        if (localSalesProcessName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSalesProcessName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("SalesProcessName cannot be null!!");
                                        }
                                    } if (localWorkFaxTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "WorkFax"));
                                 
                                        if (localWorkFax != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWorkFax));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("WorkFax cannot be null!!");
                                        }
                                    } if (localStatusTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "Status"));
                                 
                                        if (localStatus != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStatus));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Status cannot be null!!");
                                        }
                                    } if (localPhoneNumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "PhoneNumber"));
                                 
                                        if (localPhoneNumber != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPhoneNumber));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PhoneNumber cannot be null!!");
                                        }
                                    } if (localMrMrsTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "MrMrs"));
                                 
                                        if (localMrMrs != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMrMrs));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("MrMrs cannot be null!!");
                                        }
                                    } if (localJobTitleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "JobTitle"));
                                 
                                        if (localJobTitle != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localJobTitle));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("JobTitle cannot be null!!");
                                        }
                                    } if (localEMailAddrTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "EMailAddr"));
                                 
                                        if (localEMailAddr != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEMailAddr));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("EMailAddr cannot be null!!");
                                        }
                                    } if (localRelatedInfoFormatTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "RelatedInfoFormat"));
                                 
                                        if (localRelatedInfoFormat != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRelatedInfoFormat));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("RelatedInfoFormat cannot be null!!");
                                        }
                                    } if (localRoleNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "RoleName"));
                                 
                                        if (localRoleName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoleName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("RoleName cannot be null!!");
                                        }
                                    } if (localCommCmplDateFilterTagTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CommCmplDateFilterTag"));
                                 
                                        if (localCommCmplDateFilterTag != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCommCmplDateFilterTag));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CommCmplDateFilterTag cannot be null!!");
                                        }
                                    } if (localCommInboxDateFilterTagTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CommInboxDateFilterTag"));
                                 
                                        if (localCommInboxDateFilterTag != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCommInboxDateFilterTag));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CommInboxDateFilterTag cannot be null!!");
                                        }
                                    } if (localUserTimeZoneSupportforReportingSubjectAreasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UserTimeZoneSupportforReportingSubjectAreas"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserTimeZoneSupportforReportingSubjectAreas));
                            } if (localUpdatedByFirstNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByFirstName"));
                                 
                                        if (localUpdatedByFirstName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByFirstName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                        }
                                    } if (localUpdatedByLastNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByLastName"));
                                 
                                        if (localUpdatedByLastName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByLastName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                        }
                                    } if (localUpdatedByUserSignInIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByUserSignInId"));
                                 
                                        if (localUpdatedByUserSignInId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByUserSignInId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                        }
                                    } if (localUpdatedByAliasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByAlias"));
                                 
                                        if (localUpdatedByAlias != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByAlias));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                        }
                                    } if (localUpdatedByFullNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByFullName"));
                                 
                                        if (localUpdatedByFullName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByFullName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                        }
                                    } if (localUpdatedByIntegrationIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByIntegrationId"));
                                 
                                        if (localUpdatedByIntegrationId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByIntegrationId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                        }
                                    } if (localUpdatedByExternalSystemIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByExternalSystemId"));
                                 
                                        if (localUpdatedByExternalSystemId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByExternalSystemId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                        }
                                    } if (localUpdatedByEMailAddrTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "UpdatedByEMailAddr"));
                                 
                                        if (localUpdatedByEMailAddr != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedByEMailAddr));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                        }
                                    } if (localCreatedByUserSignInIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByUserSignInId"));
                                 
                                        if (localCreatedByUserSignInId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByUserSignInId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                        }
                                    } if (localCreatedByAliasTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByAlias"));
                                 
                                        if (localCreatedByAlias != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByAlias));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                        }
                                    } if (localCreatedByIntegrationIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByIntegrationId"));
                                 
                                        if (localCreatedByIntegrationId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByIntegrationId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                        }
                                    } if (localCreatedByExternalSystemIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByExternalSystemId"));
                                 
                                        if (localCreatedByExternalSystemId != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByExternalSystemId));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                        }
                                    } if (localCreatedByEMailAddrTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedByEMailAddr"));
                                 
                                        if (localCreatedByEMailAddr != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedByEMailAddr));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                        }
                                    } if (localCreatedByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "CreatedBy"));
                                 
                                        if (localCreatedBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                        }
                                    } if (localModifiedByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ModifiedBy"));
                                 
                                        if (localModifiedBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifiedBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                        }
                                    } if (localListOfDelegatedFromUserTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ListOfDelegatedFromUser"));
                            
                            
                                    if (localListOfDelegatedFromUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfDelegatedFromUser cannot be null!!");
                                    }
                                    elementList.add(localListOfDelegatedFromUser);
                                } if (localListOfDelegatedUserTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ListOfDelegatedUser"));
                            
                            
                                    if (localListOfDelegatedUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfDelegatedUser cannot be null!!");
                                    }
                                    elementList.add(localListOfDelegatedUser);
                                } if (localListOfUserDefaultBookPerTypeTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ListOfUserDefaultBookPerType"));
                            
                            
                                    if (localListOfUserDefaultBookPerType==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfUserDefaultBookPerType cannot be null!!");
                                    }
                                    elementList.add(localListOfUserDefaultBookPerType);
                                }
                            attribList.add(
                            new javax.xml.namespace.QName("","operation"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOperation));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UserData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UserData object =
                new UserData();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"UserData".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UserData)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "operation"
                    java.lang.String tempAttribOperation =
                        
                                reader.getAttributeValue(null,"operation");
                            
                   if (tempAttribOperation!=null){
                         java.lang.String content = tempAttribOperation;
                        
                                                 object.setOperation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribOperation));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("operation");
                    
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedDate").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedDate").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedById").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedById(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedById").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedById(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Id").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","TimeZoneId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTimeZoneId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","TimeZoneName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTimeZoneName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","EmployeeNumber").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEmployeeNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","RoleId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRoleId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PrimaryPositionId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPrimaryPositionId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","FirstName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFirstName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","LastName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLastName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UserSignInId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUserSignInId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","MiddleName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMiddleName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ApprovalCurrency").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setApprovalCurrency(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","FundApprovalLimit").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFundApprovalLimit(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Alias").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAlias(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","FullName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFullName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CellPhone").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCellPhone(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","IntegrationId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIntegrationId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PersonalAddressId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPersonalAddressId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PersonalCountry").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPersonalCountry(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PersonalCity").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPersonalCity(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PersonalPostalCode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPersonalPostalCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PersonalCounty").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPersonalCounty(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PersonalProvince").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPersonalProvince(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PersonalState").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPersonalState(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PersonalStreetAddress").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPersonalStreetAddress(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PersonalStreetAddress2").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPersonalStreetAddress2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ltCustomFoo").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLtCustomFoo(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByExt").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByExt(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedDateExt").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedDateExt(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Department").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDepartment(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CurrencyCode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCurrencyCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","TempPasswordFlag").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTempPasswordFlag(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ExternalSystemId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setExternalSystemId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedDateExt").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedDateExt(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","LastLoggedIn").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLastLoggedIn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","LanguageCode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLanguageCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Language").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLanguage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedByExt").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedByExt(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","LocaleCode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLocaleCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Locale").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLocale(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ManagerAlias").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setManagerAlias(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ManagerFullName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setManagerFullName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Division").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDivision(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ManagerId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setManagerId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PrimaryGroup").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPrimaryGroup(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DefaultCalendarView").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDefaultCalendarView(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","EnableTeamContactsSync").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEnableTeamContactsSync(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ShowWelcomePage").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setShowWelcomePage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PasswordState").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPasswordState(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","MaxNumOfListExport").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMaxNumOfListExport(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DefaultUserIDType").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDefaultUserIDType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","NumberOfSecurityQuestionsToComplete").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumberOfSecurityQuestionsToComplete(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","AuthenticationType").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAuthenticationType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ExternalIdentifierForSingleSignOn").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setExternalIdentifierForSingleSignOn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","NeverCall").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNeverCall(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","NevereMail").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNevereMail(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","NeverMail").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNeverMail(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PersonalStreetAddress3").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPersonalStreetAddress3(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Role").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRole(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","SecondaryEmail").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSecondaryEmail(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Market").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMarket(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","SubMarket").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSubMarket(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Region").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRegion(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","SubRegion").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSubRegion(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","BusinessUnit").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBusinessUnit(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","BusinessUnitLevel1").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBusinessUnitLevel1(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","BusinessUnitLevel2").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBusinessUnitLevel2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","BusinessUnitLevel3").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBusinessUnitLevel3(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","BusinessUnitLevel4").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBusinessUnitLevel4(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Supervisor").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSupervisor(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","LeadLimit").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLeadLimit(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","MiscellaneousText1").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMiscellaneousText1(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","MiscellaneousText2").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMiscellaneousText2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","MiscellaneousNumber1").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMiscellaneousNumber1(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","MiscellaneousNumber2").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMiscellaneousNumber2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","SalesProcessId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSalesProcessId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Company").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompany(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CompanySignInID").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCompanySignInID(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UserLoginId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUserLoginId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DefaultBookId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDefaultBookId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","IncludeSubBooks").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIncludeSubBooks(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DefaultSearchObject").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDefaultSearchObject(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PromptToDialFlag").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPromptToDialFlag(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DefaultBookName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDefaultBookName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","HistoricalSubjectAreas").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setHistoricalSubjectAreas(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ReportingSubjectAreas").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReportingSubjectAreas(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DefaultAnalyticsBookId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDefaultAnalyticsBookId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","DefaultAnalyticsBookName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDefaultAnalyticsBookName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","EnableAnimateFlag").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEnableAnimateFlag(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PartnerOrganizationName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPartnerOrganizationName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PartnerOrganizationId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPartnerOrganizationId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PreviewMode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPreviewMode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","SendCriticalAlertsFlag").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSendCriticalAlertsFlag(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByFirstName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByFirstName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByLastName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByLastName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByFullName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByFullName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","RBCanReadAllRecforUser").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRBCanReadAllRecforUser(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ThemeName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setThemeName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","HUDMode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setHUDMode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","SalesProcessName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSalesProcessName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","WorkFax").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setWorkFax(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","Status").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStatus(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","PhoneNumber").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPhoneNumber(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","MrMrs").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMrMrs(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","JobTitle").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setJobTitle(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","EMailAddr").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEMailAddr(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","RelatedInfoFormat").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRelatedInfoFormat(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","RoleName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRoleName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CommCmplDateFilterTag").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCommCmplDateFilterTag(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CommInboxDateFilterTag").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCommInboxDateFilterTag(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UserTimeZoneSupportforReportingSubjectAreas").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUserTimeZoneSupportforReportingSubjectAreas(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByFirstName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByFirstName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByLastName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByLastName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByUserSignInId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByUserSignInId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByAlias").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByAlias(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByFullName").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByFullName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByIntegrationId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByIntegrationId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByExternalSystemId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByExternalSystemId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","UpdatedByEMailAddr").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdatedByEMailAddr(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByUserSignInId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByUserSignInId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByAlias").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByAlias(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByIntegrationId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByIntegrationId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByExternalSystemId").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByExternalSystemId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedByEMailAddr").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedByEMailAddr(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","CreatedBy").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreatedBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ModifiedBy").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifiedBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfDelegatedFromUser").equals(reader.getName())){
                                
                                                object.setListOfDelegatedFromUser(ListOfDelegatedFromUserData.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfDelegatedUser").equals(reader.getName())){
                                
                                                object.setListOfDelegatedUser(ListOfDelegatedUserData.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUserDefaultBookPerType").equals(reader.getName())){
                                
                                                object.setListOfUserDefaultBookPerType(ListOfUserDefaultBookPerTypeData.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class UserQueryPage_Input
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:crmondemand/ws/ecbs/user/10/2004",
                "UserQueryPage_Input",
                "ns3");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:crmondemand/ws/ecbs/user/10/2004")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for NamedSearchSpec
                        */

                        
                                    protected java.lang.String localNamedSearchSpec ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNamedSearchSpecTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNamedSearchSpec(){
                               return localNamedSearchSpec;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NamedSearchSpec
                               */
                               public void setNamedSearchSpec(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localNamedSearchSpecTracker = true;
                                       } else {
                                          localNamedSearchSpecTracker = false;
                                              
                                       }
                                   
                                            this.localNamedSearchSpec=param;
                                    

                               }
                            

                        /**
                        * field for ListOfUser
                        */

                        
                                    protected ListOfUserQuery localListOfUser ;
                                

                           /**
                           * Auto generated getter method
                           * @return ListOfUserQuery
                           */
                           public  ListOfUserQuery getListOfUser(){
                               return localListOfUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfUser
                               */
                               public void setListOfUser(ListOfUserQuery param){
                            
                                            this.localListOfUser=param;
                                    

                               }
                            

                        /**
                        * field for LOVLanguageMode
                        */

                        
                                    protected java.lang.String localLOVLanguageMode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLOVLanguageModeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLOVLanguageMode(){
                               return localLOVLanguageMode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LOVLanguageMode
                               */
                               public void setLOVLanguageMode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLOVLanguageModeTracker = true;
                                       } else {
                                          localLOVLanguageModeTracker = false;
                                              
                                       }
                                   
                                            this.localLOVLanguageMode=param;
                                    

                               }
                            

                        /**
                        * field for ViewMode
                        */

                        
                                    protected java.lang.String localViewMode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localViewModeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getViewMode(){
                               return localViewMode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ViewMode
                               */
                               public void setViewMode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localViewModeTracker = true;
                                       } else {
                                          localViewModeTracker = false;
                                              
                                       }
                                   
                                            this.localViewMode=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UserQueryPage_Input.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:crmondemand/ws/ecbs/user/10/2004");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":UserQueryPage_Input",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "UserQueryPage_Input",
                           xmlWriter);
                   }

               
                   }
                if (localNamedSearchSpecTracker){
                                    namespace = "urn:crmondemand/ws/ecbs/user/10/2004";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"NamedSearchSpec", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"NamedSearchSpec");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("NamedSearchSpec");
                                    }
                                

                                          if (localNamedSearchSpec==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("NamedSearchSpec cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNamedSearchSpec);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                                            if (localListOfUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                            }
                                           localListOfUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ListOfUser"),
                                               factory,xmlWriter);
                                         if (localLOVLanguageModeTracker){
                                    namespace = "urn:crmondemand/ws/ecbs/user/10/2004";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"LOVLanguageMode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"LOVLanguageMode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("LOVLanguageMode");
                                    }
                                

                                          if (localLOVLanguageMode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LOVLanguageMode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLOVLanguageMode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localViewModeTracker){
                                    namespace = "urn:crmondemand/ws/ecbs/user/10/2004";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ViewMode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ViewMode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ViewMode");
                                    }
                                

                                          if (localViewMode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ViewMode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localViewMode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localNamedSearchSpecTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                                      "NamedSearchSpec"));
                                 
                                        if (localNamedSearchSpec != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNamedSearchSpec));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("NamedSearchSpec cannot be null!!");
                                        }
                                    }
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ListOfUser"));
                            
                            
                                    if (localListOfUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                    }
                                    elementList.add(localListOfUser);
                                 if (localLOVLanguageModeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                                      "LOVLanguageMode"));
                                 
                                        if (localLOVLanguageMode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLOVLanguageMode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LOVLanguageMode cannot be null!!");
                                        }
                                    } if (localViewModeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                                      "ViewMode"));
                                 
                                        if (localViewMode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localViewMode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ViewMode cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UserQueryPage_Input parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UserQueryPage_Input object =
                new UserQueryPage_Input();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"UserQueryPage_Input".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UserQueryPage_Input)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004","NamedSearchSpec").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNamedSearchSpec(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ListOfUser").equals(reader.getName())){
                                
                                                object.setListOfUser(ListOfUserQuery.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004","LOVLanguageMode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLOVLanguageMode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004","ViewMode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setViewMode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class UserExecute_Input
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:crmondemand/ws/ecbs/user/10/2004",
                "UserExecute_Input",
                "ns3");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:crmondemand/ws/ecbs/user/10/2004")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ListOfUser
                        */

                        
                                    protected ListOfUserData localListOfUser ;
                                

                           /**
                           * Auto generated getter method
                           * @return ListOfUserData
                           */
                           public  ListOfUserData getListOfUser(){
                               return localListOfUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfUser
                               */
                               public void setListOfUser(ListOfUserData param){
                            
                                            this.localListOfUser=param;
                                    

                               }
                            

                        /**
                        * field for LOVLanguageMode
                        */

                        
                                    protected java.lang.String localLOVLanguageMode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLOVLanguageModeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLOVLanguageMode(){
                               return localLOVLanguageMode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LOVLanguageMode
                               */
                               public void setLOVLanguageMode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLOVLanguageModeTracker = true;
                                       } else {
                                          localLOVLanguageModeTracker = false;
                                              
                                       }
                                   
                                            this.localLOVLanguageMode=param;
                                    

                               }
                            

                        /**
                        * field for ViewMode
                        */

                        
                                    protected java.lang.String localViewMode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localViewModeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getViewMode(){
                               return localViewMode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ViewMode
                               */
                               public void setViewMode(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localViewModeTracker = true;
                                       } else {
                                          localViewModeTracker = false;
                                              
                                       }
                                   
                                            this.localViewMode=param;
                                    

                               }
                            

                        /**
                        * field for Echo
                        */

                        
                                    protected java.lang.String localEcho ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEchoTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEcho(){
                               return localEcho;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Echo
                               */
                               public void setEcho(java.lang.String param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEchoTracker = true;
                                       } else {
                                          localEchoTracker = false;
                                              
                                       }
                                   
                                            this.localEcho=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UserExecute_Input.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:crmondemand/ws/ecbs/user/10/2004");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":UserExecute_Input",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "UserExecute_Input",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localListOfUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                            }
                                           localListOfUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser"),
                                               factory,xmlWriter);
                                         if (localLOVLanguageModeTracker){
                                    namespace = "urn:crmondemand/ws/ecbs/user/10/2004";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"LOVLanguageMode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"LOVLanguageMode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("LOVLanguageMode");
                                    }
                                

                                          if (localLOVLanguageMode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LOVLanguageMode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLOVLanguageMode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localViewModeTracker){
                                    namespace = "urn:crmondemand/ws/ecbs/user/10/2004";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"ViewMode", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"ViewMode");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("ViewMode");
                                    }
                                

                                          if (localViewMode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ViewMode cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localViewMode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEchoTracker){
                                    namespace = "urn:crmondemand/ws/ecbs/user/10/2004";
                                    if (! namespace.equals("")) {
                                        prefix = xmlWriter.getPrefix(namespace);

                                        if (prefix == null) {
                                            prefix = generatePrefix(namespace);

                                            xmlWriter.writeStartElement(prefix,"Echo", namespace);
                                            xmlWriter.writeNamespace(prefix, namespace);
                                            xmlWriter.setPrefix(prefix, namespace);

                                        } else {
                                            xmlWriter.writeStartElement(namespace,"Echo");
                                        }

                                    } else {
                                        xmlWriter.writeStartElement("Echo");
                                    }
                                

                                          if (localEcho==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Echo cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEcho);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ListOfUser"));
                            
                            
                                    if (localListOfUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                    }
                                    elementList.add(localListOfUser);
                                 if (localLOVLanguageModeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                                      "LOVLanguageMode"));
                                 
                                        if (localLOVLanguageMode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLOVLanguageMode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LOVLanguageMode cannot be null!!");
                                        }
                                    } if (localViewModeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                                      "ViewMode"));
                                 
                                        if (localViewMode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localViewMode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ViewMode cannot be null!!");
                                        }
                                    } if (localEchoTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004",
                                                                      "Echo"));
                                 
                                        if (localEcho != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEcho));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Echo cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UserExecute_Input parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UserExecute_Input object =
                new UserExecute_Input();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"UserExecute_Input".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UserExecute_Input)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser").equals(reader.getName())){
                                
                                                object.setListOfUser(ListOfUserData.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004","LOVLanguageMode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLOVLanguageMode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004","ViewMode").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setViewMode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:crmondemand/ws/ecbs/user/10/2004","Echo").equals(reader.getName())){
                                
                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEcho(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class UserUpdate_Output
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:crmondemand/ws/ecbs/user/10/2004",
                "UserUpdate_Output",
                "ns3");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:crmondemand/ws/ecbs/user/10/2004")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ListOfUser
                        */

                        
                                    protected ListOfUserData localListOfUser ;
                                

                           /**
                           * Auto generated getter method
                           * @return ListOfUserData
                           */
                           public  ListOfUserData getListOfUser(){
                               return localListOfUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfUser
                               */
                               public void setListOfUser(ListOfUserData param){
                            
                                            this.localListOfUser=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UserUpdate_Output.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:crmondemand/ws/ecbs/user/10/2004");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":UserUpdate_Output",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "UserUpdate_Output",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localListOfUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                            }
                                           localListOfUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser"),
                                               factory,xmlWriter);
                                        
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ListOfUser"));
                            
                            
                                    if (localListOfUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                    }
                                    elementList.add(localListOfUser);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UserUpdate_Output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UserUpdate_Output object =
                new UserUpdate_Output();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"UserUpdate_Output".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UserUpdate_Output)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser").equals(reader.getName())){
                                
                                                object.setListOfUser(ListOfUserData.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class UserQuery
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = UserQuery
                Namespace URI = urn:/crmondemand/xml/User/Query
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Query")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ModifiedDate
                        */

                        
                                    protected QueryType localModifiedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedDate(){
                               return localModifiedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedDate
                               */
                               public void setModifiedDate(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedDateTracker = true;
                                       } else {
                                          localModifiedDateTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedDate=param;
                                    

                               }
                            

                        /**
                        * field for CreatedDate
                        */

                        
                                    protected QueryType localCreatedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedDate(){
                               return localCreatedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedDate
                               */
                               public void setCreatedDate(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedDateTracker = true;
                                       } else {
                                          localCreatedDateTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedDate=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedById
                        */

                        
                                    protected QueryType localModifiedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedById(){
                               return localModifiedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedById
                               */
                               public void setModifiedById(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByIdTracker = true;
                                       } else {
                                          localModifiedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedById=param;
                                    

                               }
                            

                        /**
                        * field for CreatedById
                        */

                        
                                    protected QueryType localCreatedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedById(){
                               return localCreatedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedById
                               */
                               public void setCreatedById(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIdTracker = true;
                                       } else {
                                          localCreatedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedById=param;
                                    

                               }
                            

                        /**
                        * field for ModId
                        */

                        
                                    protected QueryType localModId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModId(){
                               return localModId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModId
                               */
                               public void setModId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModIdTracker = true;
                                       } else {
                                          localModIdTracker = false;
                                              
                                       }
                                   
                                            this.localModId=param;
                                    

                               }
                            

                        /**
                        * field for Id
                        */

                        
                                    protected QueryType localId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getId(){
                               return localId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Id
                               */
                               public void setId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIdTracker = true;
                                       } else {
                                          localIdTracker = false;
                                              
                                       }
                                   
                                            this.localId=param;
                                    

                               }
                            

                        /**
                        * field for TimeZoneId
                        */

                        
                                    protected QueryType localTimeZoneId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTimeZoneIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getTimeZoneId(){
                               return localTimeZoneId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TimeZoneId
                               */
                               public void setTimeZoneId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTimeZoneIdTracker = true;
                                       } else {
                                          localTimeZoneIdTracker = false;
                                              
                                       }
                                   
                                            this.localTimeZoneId=param;
                                    

                               }
                            

                        /**
                        * field for TimeZoneName
                        */

                        
                                    protected QueryType localTimeZoneName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTimeZoneNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getTimeZoneName(){
                               return localTimeZoneName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TimeZoneName
                               */
                               public void setTimeZoneName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTimeZoneNameTracker = true;
                                       } else {
                                          localTimeZoneNameTracker = false;
                                              
                                       }
                                   
                                            this.localTimeZoneName=param;
                                    

                               }
                            

                        /**
                        * field for EmployeeNumber
                        */

                        
                                    protected QueryType localEmployeeNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEmployeeNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getEmployeeNumber(){
                               return localEmployeeNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EmployeeNumber
                               */
                               public void setEmployeeNumber(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEmployeeNumberTracker = true;
                                       } else {
                                          localEmployeeNumberTracker = false;
                                              
                                       }
                                   
                                            this.localEmployeeNumber=param;
                                    

                               }
                            

                        /**
                        * field for RoleId
                        */

                        
                                    protected QueryType localRoleId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRoleIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getRoleId(){
                               return localRoleId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RoleId
                               */
                               public void setRoleId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRoleIdTracker = true;
                                       } else {
                                          localRoleIdTracker = false;
                                              
                                       }
                                   
                                            this.localRoleId=param;
                                    

                               }
                            

                        /**
                        * field for PrimaryPositionId
                        */

                        
                                    protected QueryType localPrimaryPositionId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrimaryPositionIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPrimaryPositionId(){
                               return localPrimaryPositionId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PrimaryPositionId
                               */
                               public void setPrimaryPositionId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPrimaryPositionIdTracker = true;
                                       } else {
                                          localPrimaryPositionIdTracker = false;
                                              
                                       }
                                   
                                            this.localPrimaryPositionId=param;
                                    

                               }
                            

                        /**
                        * field for FirstName
                        */

                        
                                    protected QueryType localFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getFirstName(){
                               return localFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FirstName
                               */
                               public void setFirstName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFirstNameTracker = true;
                                       } else {
                                          localFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localFirstName=param;
                                    

                               }
                            

                        /**
                        * field for LastName
                        */

                        
                                    protected QueryType localLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getLastName(){
                               return localLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LastName
                               */
                               public void setLastName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLastNameTracker = true;
                                       } else {
                                          localLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localLastName=param;
                                    

                               }
                            

                        /**
                        * field for UserSignInId
                        */

                        
                                    protected QueryType localUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUserSignInId(){
                               return localUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserSignInId
                               */
                               public void setUserSignInId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserSignInIdTracker = true;
                                       } else {
                                          localUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for MiddleName
                        */

                        
                                    protected QueryType localMiddleName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMiddleNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getMiddleName(){
                               return localMiddleName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MiddleName
                               */
                               public void setMiddleName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMiddleNameTracker = true;
                                       } else {
                                          localMiddleNameTracker = false;
                                              
                                       }
                                   
                                            this.localMiddleName=param;
                                    

                               }
                            

                        /**
                        * field for ApprovalCurrency
                        */

                        
                                    protected QueryType localApprovalCurrency ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localApprovalCurrencyTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getApprovalCurrency(){
                               return localApprovalCurrency;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ApprovalCurrency
                               */
                               public void setApprovalCurrency(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localApprovalCurrencyTracker = true;
                                       } else {
                                          localApprovalCurrencyTracker = false;
                                              
                                       }
                                   
                                            this.localApprovalCurrency=param;
                                    

                               }
                            

                        /**
                        * field for FundApprovalLimit
                        */

                        
                                    protected QueryType localFundApprovalLimit ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFundApprovalLimitTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getFundApprovalLimit(){
                               return localFundApprovalLimit;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FundApprovalLimit
                               */
                               public void setFundApprovalLimit(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFundApprovalLimitTracker = true;
                                       } else {
                                          localFundApprovalLimitTracker = false;
                                              
                                       }
                                   
                                            this.localFundApprovalLimit=param;
                                    

                               }
                            

                        /**
                        * field for Alias
                        */

                        
                                    protected QueryType localAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getAlias(){
                               return localAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Alias
                               */
                               public void setAlias(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAliasTracker = true;
                                       } else {
                                          localAliasTracker = false;
                                              
                                       }
                                   
                                            this.localAlias=param;
                                    

                               }
                            

                        /**
                        * field for FullName
                        */

                        
                                    protected QueryType localFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getFullName(){
                               return localFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FullName
                               */
                               public void setFullName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFullNameTracker = true;
                                       } else {
                                          localFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localFullName=param;
                                    

                               }
                            

                        /**
                        * field for CellPhone
                        */

                        
                                    protected QueryType localCellPhone ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCellPhoneTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCellPhone(){
                               return localCellPhone;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CellPhone
                               */
                               public void setCellPhone(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCellPhoneTracker = true;
                                       } else {
                                          localCellPhoneTracker = false;
                                              
                                       }
                                   
                                            this.localCellPhone=param;
                                    

                               }
                            

                        /**
                        * field for IntegrationId
                        */

                        
                                    protected QueryType localIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getIntegrationId(){
                               return localIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IntegrationId
                               */
                               public void setIntegrationId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIntegrationIdTracker = true;
                                       } else {
                                          localIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for PersonalAddressId
                        */

                        
                                    protected QueryType localPersonalAddressId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalAddressIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPersonalAddressId(){
                               return localPersonalAddressId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalAddressId
                               */
                               public void setPersonalAddressId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalAddressIdTracker = true;
                                       } else {
                                          localPersonalAddressIdTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalAddressId=param;
                                    

                               }
                            

                        /**
                        * field for PersonalCountry
                        */

                        
                                    protected QueryType localPersonalCountry ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalCountryTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPersonalCountry(){
                               return localPersonalCountry;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalCountry
                               */
                               public void setPersonalCountry(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalCountryTracker = true;
                                       } else {
                                          localPersonalCountryTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalCountry=param;
                                    

                               }
                            

                        /**
                        * field for PersonalCity
                        */

                        
                                    protected QueryType localPersonalCity ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalCityTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPersonalCity(){
                               return localPersonalCity;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalCity
                               */
                               public void setPersonalCity(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalCityTracker = true;
                                       } else {
                                          localPersonalCityTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalCity=param;
                                    

                               }
                            

                        /**
                        * field for PersonalPostalCode
                        */

                        
                                    protected QueryType localPersonalPostalCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalPostalCodeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPersonalPostalCode(){
                               return localPersonalPostalCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalPostalCode
                               */
                               public void setPersonalPostalCode(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalPostalCodeTracker = true;
                                       } else {
                                          localPersonalPostalCodeTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalPostalCode=param;
                                    

                               }
                            

                        /**
                        * field for PersonalCounty
                        */

                        
                                    protected QueryType localPersonalCounty ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalCountyTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPersonalCounty(){
                               return localPersonalCounty;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalCounty
                               */
                               public void setPersonalCounty(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalCountyTracker = true;
                                       } else {
                                          localPersonalCountyTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalCounty=param;
                                    

                               }
                            

                        /**
                        * field for PersonalProvince
                        */

                        
                                    protected QueryType localPersonalProvince ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalProvinceTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPersonalProvince(){
                               return localPersonalProvince;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalProvince
                               */
                               public void setPersonalProvince(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalProvinceTracker = true;
                                       } else {
                                          localPersonalProvinceTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalProvince=param;
                                    

                               }
                            

                        /**
                        * field for PersonalState
                        */

                        
                                    protected QueryType localPersonalState ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalStateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPersonalState(){
                               return localPersonalState;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalState
                               */
                               public void setPersonalState(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalStateTracker = true;
                                       } else {
                                          localPersonalStateTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalState=param;
                                    

                               }
                            

                        /**
                        * field for PersonalStreetAddress
                        */

                        
                                    protected QueryType localPersonalStreetAddress ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalStreetAddressTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPersonalStreetAddress(){
                               return localPersonalStreetAddress;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalStreetAddress
                               */
                               public void setPersonalStreetAddress(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalStreetAddressTracker = true;
                                       } else {
                                          localPersonalStreetAddressTracker = false;
                                              
                                       }
                                   
                                            this.localPersonalStreetAddress=param;
                                    

                               }
                            

                        /**
                        * field for PersonalStreetAddress2
                        */

                        
                                    protected QueryType localPersonalStreetAddress2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalStreetAddress2Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPersonalStreetAddress2(){
                               return localPersonalStreetAddress2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalStreetAddress2
                               */
                               public void setPersonalStreetAddress2(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalStreetAddress2Tracker = true;
                                       } else {
                                          localPersonalStreetAddress2Tracker = false;
                                              
                                       }
                                   
                                            this.localPersonalStreetAddress2=param;
                                    

                               }
                            

                        /**
                        * field for LtCustomFoo
                        */

                        
                                    protected QueryType localLtCustomFoo ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLtCustomFooTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getLtCustomFoo(){
                               return localLtCustomFoo;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LtCustomFoo
                               */
                               public void setLtCustomFoo(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLtCustomFooTracker = true;
                                       } else {
                                          localLtCustomFooTracker = false;
                                              
                                       }
                                   
                                            this.localLtCustomFoo=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByExt
                        */

                        
                                    protected QueryType localCreatedByExt ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByExtTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByExt(){
                               return localCreatedByExt;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByExt
                               */
                               public void setCreatedByExt(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByExtTracker = true;
                                       } else {
                                          localCreatedByExtTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByExt=param;
                                    

                               }
                            

                        /**
                        * field for CreatedDateExt
                        */

                        
                                    protected QueryType localCreatedDateExt ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedDateExtTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedDateExt(){
                               return localCreatedDateExt;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedDateExt
                               */
                               public void setCreatedDateExt(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedDateExtTracker = true;
                                       } else {
                                          localCreatedDateExtTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedDateExt=param;
                                    

                               }
                            

                        /**
                        * field for Department
                        */

                        
                                    protected QueryType localDepartment ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDepartmentTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getDepartment(){
                               return localDepartment;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Department
                               */
                               public void setDepartment(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDepartmentTracker = true;
                                       } else {
                                          localDepartmentTracker = false;
                                              
                                       }
                                   
                                            this.localDepartment=param;
                                    

                               }
                            

                        /**
                        * field for CurrencyCode
                        */

                        
                                    protected QueryType localCurrencyCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCurrencyCodeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCurrencyCode(){
                               return localCurrencyCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CurrencyCode
                               */
                               public void setCurrencyCode(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCurrencyCodeTracker = true;
                                       } else {
                                          localCurrencyCodeTracker = false;
                                              
                                       }
                                   
                                            this.localCurrencyCode=param;
                                    

                               }
                            

                        /**
                        * field for TempPasswordFlag
                        */

                        
                                    protected QueryType localTempPasswordFlag ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTempPasswordFlagTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getTempPasswordFlag(){
                               return localTempPasswordFlag;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TempPasswordFlag
                               */
                               public void setTempPasswordFlag(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localTempPasswordFlagTracker = true;
                                       } else {
                                          localTempPasswordFlagTracker = false;
                                              
                                       }
                                   
                                            this.localTempPasswordFlag=param;
                                    

                               }
                            

                        /**
                        * field for ExternalSystemId
                        */

                        
                                    protected QueryType localExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getExternalSystemId(){
                               return localExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ExternalSystemId
                               */
                               public void setExternalSystemId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExternalSystemIdTracker = true;
                                       } else {
                                          localExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedDateExt
                        */

                        
                                    protected QueryType localModifiedDateExt ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedDateExtTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedDateExt(){
                               return localModifiedDateExt;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedDateExt
                               */
                               public void setModifiedDateExt(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedDateExtTracker = true;
                                       } else {
                                          localModifiedDateExtTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedDateExt=param;
                                    

                               }
                            

                        /**
                        * field for LastLoggedIn
                        */

                        
                                    protected QueryType localLastLoggedIn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLastLoggedInTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getLastLoggedIn(){
                               return localLastLoggedIn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LastLoggedIn
                               */
                               public void setLastLoggedIn(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLastLoggedInTracker = true;
                                       } else {
                                          localLastLoggedInTracker = false;
                                              
                                       }
                                   
                                            this.localLastLoggedIn=param;
                                    

                               }
                            

                        /**
                        * field for LanguageCode
                        */

                        
                                    protected QueryType localLanguageCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLanguageCodeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getLanguageCode(){
                               return localLanguageCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LanguageCode
                               */
                               public void setLanguageCode(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLanguageCodeTracker = true;
                                       } else {
                                          localLanguageCodeTracker = false;
                                              
                                       }
                                   
                                            this.localLanguageCode=param;
                                    

                               }
                            

                        /**
                        * field for Language
                        */

                        
                                    protected QueryType localLanguage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLanguageTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getLanguage(){
                               return localLanguage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Language
                               */
                               public void setLanguage(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLanguageTracker = true;
                                       } else {
                                          localLanguageTracker = false;
                                              
                                       }
                                   
                                            this.localLanguage=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedByExt
                        */

                        
                                    protected QueryType localModifiedByExt ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByExtTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedByExt(){
                               return localModifiedByExt;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedByExt
                               */
                               public void setModifiedByExt(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByExtTracker = true;
                                       } else {
                                          localModifiedByExtTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedByExt=param;
                                    

                               }
                            

                        /**
                        * field for LocaleCode
                        */

                        
                                    protected QueryType localLocaleCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLocaleCodeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getLocaleCode(){
                               return localLocaleCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LocaleCode
                               */
                               public void setLocaleCode(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLocaleCodeTracker = true;
                                       } else {
                                          localLocaleCodeTracker = false;
                                              
                                       }
                                   
                                            this.localLocaleCode=param;
                                    

                               }
                            

                        /**
                        * field for Locale
                        */

                        
                                    protected QueryType localLocale ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLocaleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getLocale(){
                               return localLocale;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Locale
                               */
                               public void setLocale(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLocaleTracker = true;
                                       } else {
                                          localLocaleTracker = false;
                                              
                                       }
                                   
                                            this.localLocale=param;
                                    

                               }
                            

                        /**
                        * field for ManagerAlias
                        */

                        
                                    protected QueryType localManagerAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localManagerAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getManagerAlias(){
                               return localManagerAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ManagerAlias
                               */
                               public void setManagerAlias(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localManagerAliasTracker = true;
                                       } else {
                                          localManagerAliasTracker = false;
                                              
                                       }
                                   
                                            this.localManagerAlias=param;
                                    

                               }
                            

                        /**
                        * field for ManagerFullName
                        */

                        
                                    protected QueryType localManagerFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localManagerFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getManagerFullName(){
                               return localManagerFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ManagerFullName
                               */
                               public void setManagerFullName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localManagerFullNameTracker = true;
                                       } else {
                                          localManagerFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localManagerFullName=param;
                                    

                               }
                            

                        /**
                        * field for Division
                        */

                        
                                    protected QueryType localDivision ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDivisionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getDivision(){
                               return localDivision;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Division
                               */
                               public void setDivision(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDivisionTracker = true;
                                       } else {
                                          localDivisionTracker = false;
                                              
                                       }
                                   
                                            this.localDivision=param;
                                    

                               }
                            

                        /**
                        * field for ManagerId
                        */

                        
                                    protected QueryType localManagerId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localManagerIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getManagerId(){
                               return localManagerId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ManagerId
                               */
                               public void setManagerId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localManagerIdTracker = true;
                                       } else {
                                          localManagerIdTracker = false;
                                              
                                       }
                                   
                                            this.localManagerId=param;
                                    

                               }
                            

                        /**
                        * field for PrimaryGroup
                        */

                        
                                    protected QueryType localPrimaryGroup ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrimaryGroupTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPrimaryGroup(){
                               return localPrimaryGroup;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PrimaryGroup
                               */
                               public void setPrimaryGroup(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPrimaryGroupTracker = true;
                                       } else {
                                          localPrimaryGroupTracker = false;
                                              
                                       }
                                   
                                            this.localPrimaryGroup=param;
                                    

                               }
                            

                        /**
                        * field for DefaultCalendarView
                        */

                        
                                    protected QueryType localDefaultCalendarView ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultCalendarViewTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getDefaultCalendarView(){
                               return localDefaultCalendarView;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultCalendarView
                               */
                               public void setDefaultCalendarView(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultCalendarViewTracker = true;
                                       } else {
                                          localDefaultCalendarViewTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultCalendarView=param;
                                    

                               }
                            

                        /**
                        * field for EnableTeamContactsSync
                        */

                        
                                    protected QueryType localEnableTeamContactsSync ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnableTeamContactsSyncTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getEnableTeamContactsSync(){
                               return localEnableTeamContactsSync;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnableTeamContactsSync
                               */
                               public void setEnableTeamContactsSync(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEnableTeamContactsSyncTracker = true;
                                       } else {
                                          localEnableTeamContactsSyncTracker = false;
                                              
                                       }
                                   
                                            this.localEnableTeamContactsSync=param;
                                    

                               }
                            

                        /**
                        * field for ShowWelcomePage
                        */

                        
                                    protected QueryType localShowWelcomePage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localShowWelcomePageTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getShowWelcomePage(){
                               return localShowWelcomePage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ShowWelcomePage
                               */
                               public void setShowWelcomePage(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localShowWelcomePageTracker = true;
                                       } else {
                                          localShowWelcomePageTracker = false;
                                              
                                       }
                                   
                                            this.localShowWelcomePage=param;
                                    

                               }
                            

                        /**
                        * field for PasswordState
                        */

                        
                                    protected QueryType localPasswordState ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPasswordStateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPasswordState(){
                               return localPasswordState;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PasswordState
                               */
                               public void setPasswordState(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPasswordStateTracker = true;
                                       } else {
                                          localPasswordStateTracker = false;
                                              
                                       }
                                   
                                            this.localPasswordState=param;
                                    

                               }
                            

                        /**
                        * field for MaxNumOfListExport
                        */

                        
                                    protected QueryType localMaxNumOfListExport ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMaxNumOfListExportTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getMaxNumOfListExport(){
                               return localMaxNumOfListExport;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MaxNumOfListExport
                               */
                               public void setMaxNumOfListExport(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMaxNumOfListExportTracker = true;
                                       } else {
                                          localMaxNumOfListExportTracker = false;
                                              
                                       }
                                   
                                            this.localMaxNumOfListExport=param;
                                    

                               }
                            

                        /**
                        * field for DefaultUserIDType
                        */

                        
                                    protected QueryType localDefaultUserIDType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultUserIDTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getDefaultUserIDType(){
                               return localDefaultUserIDType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultUserIDType
                               */
                               public void setDefaultUserIDType(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultUserIDTypeTracker = true;
                                       } else {
                                          localDefaultUserIDTypeTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultUserIDType=param;
                                    

                               }
                            

                        /**
                        * field for NumberOfSecurityQuestionsToComplete
                        */

                        
                                    protected QueryType localNumberOfSecurityQuestionsToComplete ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNumberOfSecurityQuestionsToCompleteTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getNumberOfSecurityQuestionsToComplete(){
                               return localNumberOfSecurityQuestionsToComplete;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NumberOfSecurityQuestionsToComplete
                               */
                               public void setNumberOfSecurityQuestionsToComplete(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localNumberOfSecurityQuestionsToCompleteTracker = true;
                                       } else {
                                          localNumberOfSecurityQuestionsToCompleteTracker = false;
                                              
                                       }
                                   
                                            this.localNumberOfSecurityQuestionsToComplete=param;
                                    

                               }
                            

                        /**
                        * field for AuthenticationType
                        */

                        
                                    protected QueryType localAuthenticationType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAuthenticationTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getAuthenticationType(){
                               return localAuthenticationType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AuthenticationType
                               */
                               public void setAuthenticationType(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAuthenticationTypeTracker = true;
                                       } else {
                                          localAuthenticationTypeTracker = false;
                                              
                                       }
                                   
                                            this.localAuthenticationType=param;
                                    

                               }
                            

                        /**
                        * field for ExternalIdentifierForSingleSignOn
                        */

                        
                                    protected QueryType localExternalIdentifierForSingleSignOn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExternalIdentifierForSingleSignOnTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getExternalIdentifierForSingleSignOn(){
                               return localExternalIdentifierForSingleSignOn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ExternalIdentifierForSingleSignOn
                               */
                               public void setExternalIdentifierForSingleSignOn(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExternalIdentifierForSingleSignOnTracker = true;
                                       } else {
                                          localExternalIdentifierForSingleSignOnTracker = false;
                                              
                                       }
                                   
                                            this.localExternalIdentifierForSingleSignOn=param;
                                    

                               }
                            

                        /**
                        * field for NeverCall
                        */

                        
                                    protected QueryType localNeverCall ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNeverCallTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getNeverCall(){
                               return localNeverCall;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NeverCall
                               */
                               public void setNeverCall(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localNeverCallTracker = true;
                                       } else {
                                          localNeverCallTracker = false;
                                              
                                       }
                                   
                                            this.localNeverCall=param;
                                    

                               }
                            

                        /**
                        * field for NevereMail
                        */

                        
                                    protected QueryType localNevereMail ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNevereMailTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getNevereMail(){
                               return localNevereMail;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NevereMail
                               */
                               public void setNevereMail(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localNevereMailTracker = true;
                                       } else {
                                          localNevereMailTracker = false;
                                              
                                       }
                                   
                                            this.localNevereMail=param;
                                    

                               }
                            

                        /**
                        * field for NeverMail
                        */

                        
                                    protected QueryType localNeverMail ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNeverMailTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getNeverMail(){
                               return localNeverMail;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NeverMail
                               */
                               public void setNeverMail(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localNeverMailTracker = true;
                                       } else {
                                          localNeverMailTracker = false;
                                              
                                       }
                                   
                                            this.localNeverMail=param;
                                    

                               }
                            

                        /**
                        * field for PersonalStreetAddress3
                        */

                        
                                    protected QueryType localPersonalStreetAddress3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersonalStreetAddress3Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPersonalStreetAddress3(){
                               return localPersonalStreetAddress3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PersonalStreetAddress3
                               */
                               public void setPersonalStreetAddress3(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPersonalStreetAddress3Tracker = true;
                                       } else {
                                          localPersonalStreetAddress3Tracker = false;
                                              
                                       }
                                   
                                            this.localPersonalStreetAddress3=param;
                                    

                               }
                            

                        /**
                        * field for Role
                        */

                        
                                    protected QueryType localRole ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRoleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getRole(){
                               return localRole;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Role
                               */
                               public void setRole(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRoleTracker = true;
                                       } else {
                                          localRoleTracker = false;
                                              
                                       }
                                   
                                            this.localRole=param;
                                    

                               }
                            

                        /**
                        * field for SecondaryEmail
                        */

                        
                                    protected QueryType localSecondaryEmail ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSecondaryEmailTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getSecondaryEmail(){
                               return localSecondaryEmail;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SecondaryEmail
                               */
                               public void setSecondaryEmail(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSecondaryEmailTracker = true;
                                       } else {
                                          localSecondaryEmailTracker = false;
                                              
                                       }
                                   
                                            this.localSecondaryEmail=param;
                                    

                               }
                            

                        /**
                        * field for Market
                        */

                        
                                    protected QueryType localMarket ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMarketTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getMarket(){
                               return localMarket;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Market
                               */
                               public void setMarket(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMarketTracker = true;
                                       } else {
                                          localMarketTracker = false;
                                              
                                       }
                                   
                                            this.localMarket=param;
                                    

                               }
                            

                        /**
                        * field for SubMarket
                        */

                        
                                    protected QueryType localSubMarket ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubMarketTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getSubMarket(){
                               return localSubMarket;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SubMarket
                               */
                               public void setSubMarket(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSubMarketTracker = true;
                                       } else {
                                          localSubMarketTracker = false;
                                              
                                       }
                                   
                                            this.localSubMarket=param;
                                    

                               }
                            

                        /**
                        * field for Region
                        */

                        
                                    protected QueryType localRegion ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRegionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getRegion(){
                               return localRegion;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Region
                               */
                               public void setRegion(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRegionTracker = true;
                                       } else {
                                          localRegionTracker = false;
                                              
                                       }
                                   
                                            this.localRegion=param;
                                    

                               }
                            

                        /**
                        * field for SubRegion
                        */

                        
                                    protected QueryType localSubRegion ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubRegionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getSubRegion(){
                               return localSubRegion;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SubRegion
                               */
                               public void setSubRegion(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSubRegionTracker = true;
                                       } else {
                                          localSubRegionTracker = false;
                                              
                                       }
                                   
                                            this.localSubRegion=param;
                                    

                               }
                            

                        /**
                        * field for BusinessUnit
                        */

                        
                                    protected QueryType localBusinessUnit ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBusinessUnitTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getBusinessUnit(){
                               return localBusinessUnit;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BusinessUnit
                               */
                               public void setBusinessUnit(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBusinessUnitTracker = true;
                                       } else {
                                          localBusinessUnitTracker = false;
                                              
                                       }
                                   
                                            this.localBusinessUnit=param;
                                    

                               }
                            

                        /**
                        * field for BusinessUnitLevel1
                        */

                        
                                    protected QueryType localBusinessUnitLevel1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBusinessUnitLevel1Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getBusinessUnitLevel1(){
                               return localBusinessUnitLevel1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BusinessUnitLevel1
                               */
                               public void setBusinessUnitLevel1(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBusinessUnitLevel1Tracker = true;
                                       } else {
                                          localBusinessUnitLevel1Tracker = false;
                                              
                                       }
                                   
                                            this.localBusinessUnitLevel1=param;
                                    

                               }
                            

                        /**
                        * field for BusinessUnitLevel2
                        */

                        
                                    protected QueryType localBusinessUnitLevel2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBusinessUnitLevel2Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getBusinessUnitLevel2(){
                               return localBusinessUnitLevel2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BusinessUnitLevel2
                               */
                               public void setBusinessUnitLevel2(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBusinessUnitLevel2Tracker = true;
                                       } else {
                                          localBusinessUnitLevel2Tracker = false;
                                              
                                       }
                                   
                                            this.localBusinessUnitLevel2=param;
                                    

                               }
                            

                        /**
                        * field for BusinessUnitLevel3
                        */

                        
                                    protected QueryType localBusinessUnitLevel3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBusinessUnitLevel3Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getBusinessUnitLevel3(){
                               return localBusinessUnitLevel3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BusinessUnitLevel3
                               */
                               public void setBusinessUnitLevel3(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBusinessUnitLevel3Tracker = true;
                                       } else {
                                          localBusinessUnitLevel3Tracker = false;
                                              
                                       }
                                   
                                            this.localBusinessUnitLevel3=param;
                                    

                               }
                            

                        /**
                        * field for BusinessUnitLevel4
                        */

                        
                                    protected QueryType localBusinessUnitLevel4 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBusinessUnitLevel4Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getBusinessUnitLevel4(){
                               return localBusinessUnitLevel4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BusinessUnitLevel4
                               */
                               public void setBusinessUnitLevel4(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBusinessUnitLevel4Tracker = true;
                                       } else {
                                          localBusinessUnitLevel4Tracker = false;
                                              
                                       }
                                   
                                            this.localBusinessUnitLevel4=param;
                                    

                               }
                            

                        /**
                        * field for Supervisor
                        */

                        
                                    protected QueryType localSupervisor ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSupervisorTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getSupervisor(){
                               return localSupervisor;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Supervisor
                               */
                               public void setSupervisor(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSupervisorTracker = true;
                                       } else {
                                          localSupervisorTracker = false;
                                              
                                       }
                                   
                                            this.localSupervisor=param;
                                    

                               }
                            

                        /**
                        * field for LeadLimit
                        */

                        
                                    protected QueryType localLeadLimit ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLeadLimitTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getLeadLimit(){
                               return localLeadLimit;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LeadLimit
                               */
                               public void setLeadLimit(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLeadLimitTracker = true;
                                       } else {
                                          localLeadLimitTracker = false;
                                              
                                       }
                                   
                                            this.localLeadLimit=param;
                                    

                               }
                            

                        /**
                        * field for MiscellaneousText1
                        */

                        
                                    protected QueryType localMiscellaneousText1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMiscellaneousText1Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getMiscellaneousText1(){
                               return localMiscellaneousText1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MiscellaneousText1
                               */
                               public void setMiscellaneousText1(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMiscellaneousText1Tracker = true;
                                       } else {
                                          localMiscellaneousText1Tracker = false;
                                              
                                       }
                                   
                                            this.localMiscellaneousText1=param;
                                    

                               }
                            

                        /**
                        * field for MiscellaneousText2
                        */

                        
                                    protected QueryType localMiscellaneousText2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMiscellaneousText2Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getMiscellaneousText2(){
                               return localMiscellaneousText2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MiscellaneousText2
                               */
                               public void setMiscellaneousText2(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMiscellaneousText2Tracker = true;
                                       } else {
                                          localMiscellaneousText2Tracker = false;
                                              
                                       }
                                   
                                            this.localMiscellaneousText2=param;
                                    

                               }
                            

                        /**
                        * field for MiscellaneousNumber1
                        */

                        
                                    protected QueryType localMiscellaneousNumber1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMiscellaneousNumber1Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getMiscellaneousNumber1(){
                               return localMiscellaneousNumber1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MiscellaneousNumber1
                               */
                               public void setMiscellaneousNumber1(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMiscellaneousNumber1Tracker = true;
                                       } else {
                                          localMiscellaneousNumber1Tracker = false;
                                              
                                       }
                                   
                                            this.localMiscellaneousNumber1=param;
                                    

                               }
                            

                        /**
                        * field for MiscellaneousNumber2
                        */

                        
                                    protected QueryType localMiscellaneousNumber2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMiscellaneousNumber2Tracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getMiscellaneousNumber2(){
                               return localMiscellaneousNumber2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MiscellaneousNumber2
                               */
                               public void setMiscellaneousNumber2(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMiscellaneousNumber2Tracker = true;
                                       } else {
                                          localMiscellaneousNumber2Tracker = false;
                                              
                                       }
                                   
                                            this.localMiscellaneousNumber2=param;
                                    

                               }
                            

                        /**
                        * field for SalesProcessId
                        */

                        
                                    protected QueryType localSalesProcessId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSalesProcessIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getSalesProcessId(){
                               return localSalesProcessId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SalesProcessId
                               */
                               public void setSalesProcessId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSalesProcessIdTracker = true;
                                       } else {
                                          localSalesProcessIdTracker = false;
                                              
                                       }
                                   
                                            this.localSalesProcessId=param;
                                    

                               }
                            

                        /**
                        * field for Company
                        */

                        
                                    protected QueryType localCompany ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompanyTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCompany(){
                               return localCompany;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Company
                               */
                               public void setCompany(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompanyTracker = true;
                                       } else {
                                          localCompanyTracker = false;
                                              
                                       }
                                   
                                            this.localCompany=param;
                                    

                               }
                            

                        /**
                        * field for CompanySignInID
                        */

                        
                                    protected QueryType localCompanySignInID ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCompanySignInIDTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCompanySignInID(){
                               return localCompanySignInID;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CompanySignInID
                               */
                               public void setCompanySignInID(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCompanySignInIDTracker = true;
                                       } else {
                                          localCompanySignInIDTracker = false;
                                              
                                       }
                                   
                                            this.localCompanySignInID=param;
                                    

                               }
                            

                        /**
                        * field for UserLoginId
                        */

                        
                                    protected QueryType localUserLoginId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserLoginIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUserLoginId(){
                               return localUserLoginId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserLoginId
                               */
                               public void setUserLoginId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserLoginIdTracker = true;
                                       } else {
                                          localUserLoginIdTracker = false;
                                              
                                       }
                                   
                                            this.localUserLoginId=param;
                                    

                               }
                            

                        /**
                        * field for DefaultBookId
                        */

                        
                                    protected QueryType localDefaultBookId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultBookIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getDefaultBookId(){
                               return localDefaultBookId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultBookId
                               */
                               public void setDefaultBookId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultBookIdTracker = true;
                                       } else {
                                          localDefaultBookIdTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultBookId=param;
                                    

                               }
                            

                        /**
                        * field for IncludeSubBooks
                        */

                        
                                    protected QueryType localIncludeSubBooks ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIncludeSubBooksTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getIncludeSubBooks(){
                               return localIncludeSubBooks;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IncludeSubBooks
                               */
                               public void setIncludeSubBooks(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIncludeSubBooksTracker = true;
                                       } else {
                                          localIncludeSubBooksTracker = false;
                                              
                                       }
                                   
                                            this.localIncludeSubBooks=param;
                                    

                               }
                            

                        /**
                        * field for DefaultSearchObject
                        */

                        
                                    protected QueryType localDefaultSearchObject ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultSearchObjectTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getDefaultSearchObject(){
                               return localDefaultSearchObject;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultSearchObject
                               */
                               public void setDefaultSearchObject(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultSearchObjectTracker = true;
                                       } else {
                                          localDefaultSearchObjectTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultSearchObject=param;
                                    

                               }
                            

                        /**
                        * field for PromptToDialFlag
                        */

                        
                                    protected QueryType localPromptToDialFlag ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPromptToDialFlagTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPromptToDialFlag(){
                               return localPromptToDialFlag;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PromptToDialFlag
                               */
                               public void setPromptToDialFlag(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPromptToDialFlagTracker = true;
                                       } else {
                                          localPromptToDialFlagTracker = false;
                                              
                                       }
                                   
                                            this.localPromptToDialFlag=param;
                                    

                               }
                            

                        /**
                        * field for DefaultBookName
                        */

                        
                                    protected QueryType localDefaultBookName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultBookNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getDefaultBookName(){
                               return localDefaultBookName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultBookName
                               */
                               public void setDefaultBookName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultBookNameTracker = true;
                                       } else {
                                          localDefaultBookNameTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultBookName=param;
                                    

                               }
                            

                        /**
                        * field for HistoricalSubjectAreas
                        */

                        
                                    protected QueryType localHistoricalSubjectAreas ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHistoricalSubjectAreasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getHistoricalSubjectAreas(){
                               return localHistoricalSubjectAreas;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HistoricalSubjectAreas
                               */
                               public void setHistoricalSubjectAreas(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localHistoricalSubjectAreasTracker = true;
                                       } else {
                                          localHistoricalSubjectAreasTracker = false;
                                              
                                       }
                                   
                                            this.localHistoricalSubjectAreas=param;
                                    

                               }
                            

                        /**
                        * field for ReportingSubjectAreas
                        */

                        
                                    protected QueryType localReportingSubjectAreas ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReportingSubjectAreasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getReportingSubjectAreas(){
                               return localReportingSubjectAreas;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ReportingSubjectAreas
                               */
                               public void setReportingSubjectAreas(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localReportingSubjectAreasTracker = true;
                                       } else {
                                          localReportingSubjectAreasTracker = false;
                                              
                                       }
                                   
                                            this.localReportingSubjectAreas=param;
                                    

                               }
                            

                        /**
                        * field for DefaultAnalyticsBookId
                        */

                        
                                    protected QueryType localDefaultAnalyticsBookId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultAnalyticsBookIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getDefaultAnalyticsBookId(){
                               return localDefaultAnalyticsBookId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultAnalyticsBookId
                               */
                               public void setDefaultAnalyticsBookId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultAnalyticsBookIdTracker = true;
                                       } else {
                                          localDefaultAnalyticsBookIdTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultAnalyticsBookId=param;
                                    

                               }
                            

                        /**
                        * field for DefaultAnalyticsBookName
                        */

                        
                                    protected QueryType localDefaultAnalyticsBookName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefaultAnalyticsBookNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getDefaultAnalyticsBookName(){
                               return localDefaultAnalyticsBookName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefaultAnalyticsBookName
                               */
                               public void setDefaultAnalyticsBookName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localDefaultAnalyticsBookNameTracker = true;
                                       } else {
                                          localDefaultAnalyticsBookNameTracker = false;
                                              
                                       }
                                   
                                            this.localDefaultAnalyticsBookName=param;
                                    

                               }
                            

                        /**
                        * field for EnableAnimateFlag
                        */

                        
                                    protected QueryType localEnableAnimateFlag ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnableAnimateFlagTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getEnableAnimateFlag(){
                               return localEnableAnimateFlag;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EnableAnimateFlag
                               */
                               public void setEnableAnimateFlag(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEnableAnimateFlagTracker = true;
                                       } else {
                                          localEnableAnimateFlagTracker = false;
                                              
                                       }
                                   
                                            this.localEnableAnimateFlag=param;
                                    

                               }
                            

                        /**
                        * field for PartnerOrganizationName
                        */

                        
                                    protected QueryType localPartnerOrganizationName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPartnerOrganizationNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPartnerOrganizationName(){
                               return localPartnerOrganizationName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PartnerOrganizationName
                               */
                               public void setPartnerOrganizationName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPartnerOrganizationNameTracker = true;
                                       } else {
                                          localPartnerOrganizationNameTracker = false;
                                              
                                       }
                                   
                                            this.localPartnerOrganizationName=param;
                                    

                               }
                            

                        /**
                        * field for PartnerOrganizationId
                        */

                        
                                    protected QueryType localPartnerOrganizationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPartnerOrganizationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPartnerOrganizationId(){
                               return localPartnerOrganizationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PartnerOrganizationId
                               */
                               public void setPartnerOrganizationId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPartnerOrganizationIdTracker = true;
                                       } else {
                                          localPartnerOrganizationIdTracker = false;
                                              
                                       }
                                   
                                            this.localPartnerOrganizationId=param;
                                    

                               }
                            

                        /**
                        * field for PreviewMode
                        */

                        
                                    protected QueryType localPreviewMode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPreviewModeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPreviewMode(){
                               return localPreviewMode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PreviewMode
                               */
                               public void setPreviewMode(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPreviewModeTracker = true;
                                       } else {
                                          localPreviewModeTracker = false;
                                              
                                       }
                                   
                                            this.localPreviewMode=param;
                                    

                               }
                            

                        /**
                        * field for SendCriticalAlertsFlag
                        */

                        
                                    protected QueryType localSendCriticalAlertsFlag ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSendCriticalAlertsFlagTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getSendCriticalAlertsFlag(){
                               return localSendCriticalAlertsFlag;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SendCriticalAlertsFlag
                               */
                               public void setSendCriticalAlertsFlag(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSendCriticalAlertsFlagTracker = true;
                                       } else {
                                          localSendCriticalAlertsFlagTracker = false;
                                              
                                       }
                                   
                                            this.localSendCriticalAlertsFlag=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFirstName
                        */

                        
                                    protected QueryType localCreatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByFirstName(){
                               return localCreatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFirstName
                               */
                               public void setCreatedByFirstName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFirstNameTracker = true;
                                       } else {
                                          localCreatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByLastName
                        */

                        
                                    protected QueryType localCreatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByLastName(){
                               return localCreatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByLastName
                               */
                               public void setCreatedByLastName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByLastNameTracker = true;
                                       } else {
                                          localCreatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFullName
                        */

                        
                                    protected QueryType localCreatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByFullName(){
                               return localCreatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFullName
                               */
                               public void setCreatedByFullName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFullNameTracker = true;
                                       } else {
                                          localCreatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for RBCanReadAllRecforUser
                        */

                        
                                    protected QueryType localRBCanReadAllRecforUser ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRBCanReadAllRecforUserTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getRBCanReadAllRecforUser(){
                               return localRBCanReadAllRecforUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RBCanReadAllRecforUser
                               */
                               public void setRBCanReadAllRecforUser(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRBCanReadAllRecforUserTracker = true;
                                       } else {
                                          localRBCanReadAllRecforUserTracker = false;
                                              
                                       }
                                   
                                            this.localRBCanReadAllRecforUser=param;
                                    

                               }
                            

                        /**
                        * field for ThemeName
                        */

                        
                                    protected QueryType localThemeName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localThemeNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getThemeName(){
                               return localThemeName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ThemeName
                               */
                               public void setThemeName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localThemeNameTracker = true;
                                       } else {
                                          localThemeNameTracker = false;
                                              
                                       }
                                   
                                            this.localThemeName=param;
                                    

                               }
                            

                        /**
                        * field for HUDMode
                        */

                        
                                    protected QueryType localHUDMode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHUDModeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getHUDMode(){
                               return localHUDMode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HUDMode
                               */
                               public void setHUDMode(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localHUDModeTracker = true;
                                       } else {
                                          localHUDModeTracker = false;
                                              
                                       }
                                   
                                            this.localHUDMode=param;
                                    

                               }
                            

                        /**
                        * field for SalesProcessName
                        */

                        
                                    protected QueryType localSalesProcessName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSalesProcessNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getSalesProcessName(){
                               return localSalesProcessName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SalesProcessName
                               */
                               public void setSalesProcessName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localSalesProcessNameTracker = true;
                                       } else {
                                          localSalesProcessNameTracker = false;
                                              
                                       }
                                   
                                            this.localSalesProcessName=param;
                                    

                               }
                            

                        /**
                        * field for WorkFax
                        */

                        
                                    protected QueryType localWorkFax ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localWorkFaxTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getWorkFax(){
                               return localWorkFax;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param WorkFax
                               */
                               public void setWorkFax(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localWorkFaxTracker = true;
                                       } else {
                                          localWorkFaxTracker = false;
                                              
                                       }
                                   
                                            this.localWorkFax=param;
                                    

                               }
                            

                        /**
                        * field for Status
                        */

                        
                                    protected QueryType localStatus ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStatusTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getStatus(){
                               return localStatus;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Status
                               */
                               public void setStatus(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localStatusTracker = true;
                                       } else {
                                          localStatusTracker = false;
                                              
                                       }
                                   
                                            this.localStatus=param;
                                    

                               }
                            

                        /**
                        * field for PhoneNumber
                        */

                        
                                    protected QueryType localPhoneNumber ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPhoneNumberTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getPhoneNumber(){
                               return localPhoneNumber;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PhoneNumber
                               */
                               public void setPhoneNumber(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localPhoneNumberTracker = true;
                                       } else {
                                          localPhoneNumberTracker = false;
                                              
                                       }
                                   
                                            this.localPhoneNumber=param;
                                    

                               }
                            

                        /**
                        * field for MrMrs
                        */

                        
                                    protected QueryType localMrMrs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMrMrsTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getMrMrs(){
                               return localMrMrs;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MrMrs
                               */
                               public void setMrMrs(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localMrMrsTracker = true;
                                       } else {
                                          localMrMrsTracker = false;
                                              
                                       }
                                   
                                            this.localMrMrs=param;
                                    

                               }
                            

                        /**
                        * field for JobTitle
                        */

                        
                                    protected QueryType localJobTitle ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localJobTitleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getJobTitle(){
                               return localJobTitle;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param JobTitle
                               */
                               public void setJobTitle(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localJobTitleTracker = true;
                                       } else {
                                          localJobTitleTracker = false;
                                              
                                       }
                                   
                                            this.localJobTitle=param;
                                    

                               }
                            

                        /**
                        * field for EMailAddr
                        */

                        
                                    protected QueryType localEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getEMailAddr(){
                               return localEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EMailAddr
                               */
                               public void setEMailAddr(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localEMailAddrTracker = true;
                                       } else {
                                          localEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for RelatedInfoFormat
                        */

                        
                                    protected QueryType localRelatedInfoFormat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRelatedInfoFormatTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getRelatedInfoFormat(){
                               return localRelatedInfoFormat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RelatedInfoFormat
                               */
                               public void setRelatedInfoFormat(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRelatedInfoFormatTracker = true;
                                       } else {
                                          localRelatedInfoFormatTracker = false;
                                              
                                       }
                                   
                                            this.localRelatedInfoFormat=param;
                                    

                               }
                            

                        /**
                        * field for RoleName
                        */

                        
                                    protected QueryType localRoleName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRoleNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getRoleName(){
                               return localRoleName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RoleName
                               */
                               public void setRoleName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRoleNameTracker = true;
                                       } else {
                                          localRoleNameTracker = false;
                                              
                                       }
                                   
                                            this.localRoleName=param;
                                    

                               }
                            

                        /**
                        * field for CommCmplDateFilterTag
                        */

                        
                                    protected QueryType localCommCmplDateFilterTag ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCommCmplDateFilterTagTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCommCmplDateFilterTag(){
                               return localCommCmplDateFilterTag;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CommCmplDateFilterTag
                               */
                               public void setCommCmplDateFilterTag(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCommCmplDateFilterTagTracker = true;
                                       } else {
                                          localCommCmplDateFilterTagTracker = false;
                                              
                                       }
                                   
                                            this.localCommCmplDateFilterTag=param;
                                    

                               }
                            

                        /**
                        * field for CommInboxDateFilterTag
                        */

                        
                                    protected QueryType localCommInboxDateFilterTag ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCommInboxDateFilterTagTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCommInboxDateFilterTag(){
                               return localCommInboxDateFilterTag;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CommInboxDateFilterTag
                               */
                               public void setCommInboxDateFilterTag(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCommInboxDateFilterTagTracker = true;
                                       } else {
                                          localCommInboxDateFilterTagTracker = false;
                                              
                                       }
                                   
                                            this.localCommInboxDateFilterTag=param;
                                    

                               }
                            

                        /**
                        * field for UserTimeZoneSupportforReportingSubjectAreas
                        */

                        
                                    protected QueryType localUserTimeZoneSupportforReportingSubjectAreas ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserTimeZoneSupportforReportingSubjectAreasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUserTimeZoneSupportforReportingSubjectAreas(){
                               return localUserTimeZoneSupportforReportingSubjectAreas;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserTimeZoneSupportforReportingSubjectAreas
                               */
                               public void setUserTimeZoneSupportforReportingSubjectAreas(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserTimeZoneSupportforReportingSubjectAreasTracker = true;
                                       } else {
                                          localUserTimeZoneSupportforReportingSubjectAreasTracker = false;
                                              
                                       }
                                   
                                            this.localUserTimeZoneSupportforReportingSubjectAreas=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFirstName
                        */

                        
                                    protected QueryType localUpdatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByFirstName(){
                               return localUpdatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFirstName
                               */
                               public void setUpdatedByFirstName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFirstNameTracker = true;
                                       } else {
                                          localUpdatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByLastName
                        */

                        
                                    protected QueryType localUpdatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByLastName(){
                               return localUpdatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByLastName
                               */
                               public void setUpdatedByLastName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByLastNameTracker = true;
                                       } else {
                                          localUpdatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByUserSignInId
                        */

                        
                                    protected QueryType localUpdatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByUserSignInId(){
                               return localUpdatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByUserSignInId
                               */
                               public void setUpdatedByUserSignInId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByUserSignInIdTracker = true;
                                       } else {
                                          localUpdatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByAlias
                        */

                        
                                    protected QueryType localUpdatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByAlias(){
                               return localUpdatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByAlias
                               */
                               public void setUpdatedByAlias(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByAliasTracker = true;
                                       } else {
                                          localUpdatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFullName
                        */

                        
                                    protected QueryType localUpdatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByFullName(){
                               return localUpdatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFullName
                               */
                               public void setUpdatedByFullName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFullNameTracker = true;
                                       } else {
                                          localUpdatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByIntegrationId
                        */

                        
                                    protected QueryType localUpdatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByIntegrationId(){
                               return localUpdatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByIntegrationId
                               */
                               public void setUpdatedByIntegrationId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByIntegrationIdTracker = true;
                                       } else {
                                          localUpdatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByExternalSystemId
                        */

                        
                                    protected QueryType localUpdatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByExternalSystemId(){
                               return localUpdatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByExternalSystemId
                               */
                               public void setUpdatedByExternalSystemId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByExternalSystemIdTracker = true;
                                       } else {
                                          localUpdatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByEMailAddr
                        */

                        
                                    protected QueryType localUpdatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByEMailAddr(){
                               return localUpdatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByEMailAddr
                               */
                               public void setUpdatedByEMailAddr(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByEMailAddrTracker = true;
                                       } else {
                                          localUpdatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByUserSignInId
                        */

                        
                                    protected QueryType localCreatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByUserSignInId(){
                               return localCreatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByUserSignInId
                               */
                               public void setCreatedByUserSignInId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByUserSignInIdTracker = true;
                                       } else {
                                          localCreatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByAlias
                        */

                        
                                    protected QueryType localCreatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByAlias(){
                               return localCreatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByAlias
                               */
                               public void setCreatedByAlias(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByAliasTracker = true;
                                       } else {
                                          localCreatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByIntegrationId
                        */

                        
                                    protected QueryType localCreatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByIntegrationId(){
                               return localCreatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByIntegrationId
                               */
                               public void setCreatedByIntegrationId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIntegrationIdTracker = true;
                                       } else {
                                          localCreatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByExternalSystemId
                        */

                        
                                    protected QueryType localCreatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByExternalSystemId(){
                               return localCreatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByExternalSystemId
                               */
                               public void setCreatedByExternalSystemId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByExternalSystemIdTracker = true;
                                       } else {
                                          localCreatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByEMailAddr
                        */

                        
                                    protected QueryType localCreatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByEMailAddr(){
                               return localCreatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByEMailAddr
                               */
                               public void setCreatedByEMailAddr(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByEMailAddrTracker = true;
                                       } else {
                                          localCreatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedBy
                        */

                        
                                    protected QueryType localCreatedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedBy(){
                               return localCreatedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedBy
                               */
                               public void setCreatedBy(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByTracker = true;
                                       } else {
                                          localCreatedByTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedBy=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedBy
                        */

                        
                                    protected QueryType localModifiedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedBy(){
                               return localModifiedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedBy
                               */
                               public void setModifiedBy(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByTracker = true;
                                       } else {
                                          localModifiedByTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedBy=param;
                                    

                               }
                            

                        /**
                        * field for ListOfDelegatedFromUser
                        */

                        
                                    protected ListOfDelegatedFromUserQuery localListOfDelegatedFromUser ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localListOfDelegatedFromUserTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ListOfDelegatedFromUserQuery
                           */
                           public  ListOfDelegatedFromUserQuery getListOfDelegatedFromUser(){
                               return localListOfDelegatedFromUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfDelegatedFromUser
                               */
                               public void setListOfDelegatedFromUser(ListOfDelegatedFromUserQuery param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localListOfDelegatedFromUserTracker = true;
                                       } else {
                                          localListOfDelegatedFromUserTracker = false;
                                              
                                       }
                                   
                                            this.localListOfDelegatedFromUser=param;
                                    

                               }
                            

                        /**
                        * field for ListOfDelegatedUser
                        */

                        
                                    protected ListOfDelegatedUserQuery localListOfDelegatedUser ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localListOfDelegatedUserTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ListOfDelegatedUserQuery
                           */
                           public  ListOfDelegatedUserQuery getListOfDelegatedUser(){
                               return localListOfDelegatedUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfDelegatedUser
                               */
                               public void setListOfDelegatedUser(ListOfDelegatedUserQuery param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localListOfDelegatedUserTracker = true;
                                       } else {
                                          localListOfDelegatedUserTracker = false;
                                              
                                       }
                                   
                                            this.localListOfDelegatedUser=param;
                                    

                               }
                            

                        /**
                        * field for ListOfUserDefaultBookPerType
                        */

                        
                                    protected ListOfUserDefaultBookPerTypeQuery localListOfUserDefaultBookPerType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localListOfUserDefaultBookPerTypeTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return ListOfUserDefaultBookPerTypeQuery
                           */
                           public  ListOfUserDefaultBookPerTypeQuery getListOfUserDefaultBookPerType(){
                               return localListOfUserDefaultBookPerType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfUserDefaultBookPerType
                               */
                               public void setListOfUserDefaultBookPerType(ListOfUserDefaultBookPerTypeQuery param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localListOfUserDefaultBookPerTypeTracker = true;
                                       } else {
                                          localListOfUserDefaultBookPerTypeTracker = false;
                                              
                                       }
                                   
                                            this.localListOfUserDefaultBookPerType=param;
                                    

                               }
                            

                        /**
                        * field for Searchspec
                        * This was an Attribute!
                        */

                        
                                    protected java.lang.String localSearchspec ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSearchspec(){
                               return localSearchspec;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Searchspec
                               */
                               public void setSearchspec(java.lang.String param){
                            
                                            this.localSearchspec=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UserQuery.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Query");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":UserQuery",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "UserQuery",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localSearchspec != null){
                                        
                                                writeAttribute("",
                                                         "searchspec",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSearchspec), xmlWriter);

                                            
                                      }
                                     if (localModifiedDateTracker){
                                            if (localModifiedDate==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                            }
                                           localModifiedDate.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedDate"),
                                               factory,xmlWriter);
                                        } if (localCreatedDateTracker){
                                            if (localCreatedDate==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                            }
                                           localCreatedDate.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedDate"),
                                               factory,xmlWriter);
                                        } if (localModifiedByIdTracker){
                                            if (localModifiedById==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                            }
                                           localModifiedById.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedById"),
                                               factory,xmlWriter);
                                        } if (localCreatedByIdTracker){
                                            if (localCreatedById==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                            }
                                           localCreatedById.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedById"),
                                               factory,xmlWriter);
                                        } if (localModIdTracker){
                                            if (localModId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModId cannot be null!!");
                                            }
                                           localModId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModId"),
                                               factory,xmlWriter);
                                        } if (localIdTracker){
                                            if (localId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                            }
                                           localId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Id"),
                                               factory,xmlWriter);
                                        } if (localTimeZoneIdTracker){
                                            if (localTimeZoneId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TimeZoneId cannot be null!!");
                                            }
                                           localTimeZoneId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","TimeZoneId"),
                                               factory,xmlWriter);
                                        } if (localTimeZoneNameTracker){
                                            if (localTimeZoneName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TimeZoneName cannot be null!!");
                                            }
                                           localTimeZoneName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","TimeZoneName"),
                                               factory,xmlWriter);
                                        } if (localEmployeeNumberTracker){
                                            if (localEmployeeNumber==null){
                                                 throw new org.apache.axis2.databinding.ADBException("EmployeeNumber cannot be null!!");
                                            }
                                           localEmployeeNumber.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","EmployeeNumber"),
                                               factory,xmlWriter);
                                        } if (localRoleIdTracker){
                                            if (localRoleId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("RoleId cannot be null!!");
                                            }
                                           localRoleId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","RoleId"),
                                               factory,xmlWriter);
                                        } if (localPrimaryPositionIdTracker){
                                            if (localPrimaryPositionId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PrimaryPositionId cannot be null!!");
                                            }
                                           localPrimaryPositionId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PrimaryPositionId"),
                                               factory,xmlWriter);
                                        } if (localFirstNameTracker){
                                            if (localFirstName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FirstName cannot be null!!");
                                            }
                                           localFirstName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","FirstName"),
                                               factory,xmlWriter);
                                        } if (localLastNameTracker){
                                            if (localLastName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("LastName cannot be null!!");
                                            }
                                           localLastName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LastName"),
                                               factory,xmlWriter);
                                        } if (localUserSignInIdTracker){
                                            if (localUserSignInId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UserSignInId cannot be null!!");
                                            }
                                           localUserSignInId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserSignInId"),
                                               factory,xmlWriter);
                                        } if (localMiddleNameTracker){
                                            if (localMiddleName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MiddleName cannot be null!!");
                                            }
                                           localMiddleName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MiddleName"),
                                               factory,xmlWriter);
                                        } if (localApprovalCurrencyTracker){
                                            if (localApprovalCurrency==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ApprovalCurrency cannot be null!!");
                                            }
                                           localApprovalCurrency.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ApprovalCurrency"),
                                               factory,xmlWriter);
                                        } if (localFundApprovalLimitTracker){
                                            if (localFundApprovalLimit==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FundApprovalLimit cannot be null!!");
                                            }
                                           localFundApprovalLimit.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","FundApprovalLimit"),
                                               factory,xmlWriter);
                                        } if (localAliasTracker){
                                            if (localAlias==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Alias cannot be null!!");
                                            }
                                           localAlias.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Alias"),
                                               factory,xmlWriter);
                                        } if (localFullNameTracker){
                                            if (localFullName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FullName cannot be null!!");
                                            }
                                           localFullName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","FullName"),
                                               factory,xmlWriter);
                                        } if (localCellPhoneTracker){
                                            if (localCellPhone==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CellPhone cannot be null!!");
                                            }
                                           localCellPhone.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CellPhone"),
                                               factory,xmlWriter);
                                        } if (localIntegrationIdTracker){
                                            if (localIntegrationId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("IntegrationId cannot be null!!");
                                            }
                                           localIntegrationId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","IntegrationId"),
                                               factory,xmlWriter);
                                        } if (localPersonalAddressIdTracker){
                                            if (localPersonalAddressId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PersonalAddressId cannot be null!!");
                                            }
                                           localPersonalAddressId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalAddressId"),
                                               factory,xmlWriter);
                                        } if (localPersonalCountryTracker){
                                            if (localPersonalCountry==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PersonalCountry cannot be null!!");
                                            }
                                           localPersonalCountry.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalCountry"),
                                               factory,xmlWriter);
                                        } if (localPersonalCityTracker){
                                            if (localPersonalCity==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PersonalCity cannot be null!!");
                                            }
                                           localPersonalCity.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalCity"),
                                               factory,xmlWriter);
                                        } if (localPersonalPostalCodeTracker){
                                            if (localPersonalPostalCode==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PersonalPostalCode cannot be null!!");
                                            }
                                           localPersonalPostalCode.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalPostalCode"),
                                               factory,xmlWriter);
                                        } if (localPersonalCountyTracker){
                                            if (localPersonalCounty==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PersonalCounty cannot be null!!");
                                            }
                                           localPersonalCounty.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalCounty"),
                                               factory,xmlWriter);
                                        } if (localPersonalProvinceTracker){
                                            if (localPersonalProvince==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PersonalProvince cannot be null!!");
                                            }
                                           localPersonalProvince.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalProvince"),
                                               factory,xmlWriter);
                                        } if (localPersonalStateTracker){
                                            if (localPersonalState==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PersonalState cannot be null!!");
                                            }
                                           localPersonalState.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalState"),
                                               factory,xmlWriter);
                                        } if (localPersonalStreetAddressTracker){
                                            if (localPersonalStreetAddress==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PersonalStreetAddress cannot be null!!");
                                            }
                                           localPersonalStreetAddress.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalStreetAddress"),
                                               factory,xmlWriter);
                                        } if (localPersonalStreetAddress2Tracker){
                                            if (localPersonalStreetAddress2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PersonalStreetAddress2 cannot be null!!");
                                            }
                                           localPersonalStreetAddress2.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalStreetAddress2"),
                                               factory,xmlWriter);
                                        } if (localLtCustomFooTracker){
                                            if (localLtCustomFoo==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ltCustomFoo cannot be null!!");
                                            }
                                           localLtCustomFoo.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ltCustomFoo"),
                                               factory,xmlWriter);
                                        } if (localCreatedByExtTracker){
                                            if (localCreatedByExt==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByExt cannot be null!!");
                                            }
                                           localCreatedByExt.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByExt"),
                                               factory,xmlWriter);
                                        } if (localCreatedDateExtTracker){
                                            if (localCreatedDateExt==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedDateExt cannot be null!!");
                                            }
                                           localCreatedDateExt.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedDateExt"),
                                               factory,xmlWriter);
                                        } if (localDepartmentTracker){
                                            if (localDepartment==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Department cannot be null!!");
                                            }
                                           localDepartment.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Department"),
                                               factory,xmlWriter);
                                        } if (localCurrencyCodeTracker){
                                            if (localCurrencyCode==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CurrencyCode cannot be null!!");
                                            }
                                           localCurrencyCode.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CurrencyCode"),
                                               factory,xmlWriter);
                                        } if (localTempPasswordFlagTracker){
                                            if (localTempPasswordFlag==null){
                                                 throw new org.apache.axis2.databinding.ADBException("TempPasswordFlag cannot be null!!");
                                            }
                                           localTempPasswordFlag.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","TempPasswordFlag"),
                                               factory,xmlWriter);
                                        } if (localExternalSystemIdTracker){
                                            if (localExternalSystemId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ExternalSystemId cannot be null!!");
                                            }
                                           localExternalSystemId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ExternalSystemId"),
                                               factory,xmlWriter);
                                        } if (localModifiedDateExtTracker){
                                            if (localModifiedDateExt==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedDateExt cannot be null!!");
                                            }
                                           localModifiedDateExt.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedDateExt"),
                                               factory,xmlWriter);
                                        } if (localLastLoggedInTracker){
                                            if (localLastLoggedIn==null){
                                                 throw new org.apache.axis2.databinding.ADBException("LastLoggedIn cannot be null!!");
                                            }
                                           localLastLoggedIn.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LastLoggedIn"),
                                               factory,xmlWriter);
                                        } if (localLanguageCodeTracker){
                                            if (localLanguageCode==null){
                                                 throw new org.apache.axis2.databinding.ADBException("LanguageCode cannot be null!!");
                                            }
                                           localLanguageCode.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LanguageCode"),
                                               factory,xmlWriter);
                                        } if (localLanguageTracker){
                                            if (localLanguage==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Language cannot be null!!");
                                            }
                                           localLanguage.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Language"),
                                               factory,xmlWriter);
                                        } if (localModifiedByExtTracker){
                                            if (localModifiedByExt==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedByExt cannot be null!!");
                                            }
                                           localModifiedByExt.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedByExt"),
                                               factory,xmlWriter);
                                        } if (localLocaleCodeTracker){
                                            if (localLocaleCode==null){
                                                 throw new org.apache.axis2.databinding.ADBException("LocaleCode cannot be null!!");
                                            }
                                           localLocaleCode.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LocaleCode"),
                                               factory,xmlWriter);
                                        } if (localLocaleTracker){
                                            if (localLocale==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Locale cannot be null!!");
                                            }
                                           localLocale.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Locale"),
                                               factory,xmlWriter);
                                        } if (localManagerAliasTracker){
                                            if (localManagerAlias==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ManagerAlias cannot be null!!");
                                            }
                                           localManagerAlias.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ManagerAlias"),
                                               factory,xmlWriter);
                                        } if (localManagerFullNameTracker){
                                            if (localManagerFullName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ManagerFullName cannot be null!!");
                                            }
                                           localManagerFullName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ManagerFullName"),
                                               factory,xmlWriter);
                                        } if (localDivisionTracker){
                                            if (localDivision==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Division cannot be null!!");
                                            }
                                           localDivision.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Division"),
                                               factory,xmlWriter);
                                        } if (localManagerIdTracker){
                                            if (localManagerId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ManagerId cannot be null!!");
                                            }
                                           localManagerId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ManagerId"),
                                               factory,xmlWriter);
                                        } if (localPrimaryGroupTracker){
                                            if (localPrimaryGroup==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PrimaryGroup cannot be null!!");
                                            }
                                           localPrimaryGroup.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PrimaryGroup"),
                                               factory,xmlWriter);
                                        } if (localDefaultCalendarViewTracker){
                                            if (localDefaultCalendarView==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DefaultCalendarView cannot be null!!");
                                            }
                                           localDefaultCalendarView.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultCalendarView"),
                                               factory,xmlWriter);
                                        } if (localEnableTeamContactsSyncTracker){
                                            if (localEnableTeamContactsSync==null){
                                                 throw new org.apache.axis2.databinding.ADBException("EnableTeamContactsSync cannot be null!!");
                                            }
                                           localEnableTeamContactsSync.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","EnableTeamContactsSync"),
                                               factory,xmlWriter);
                                        } if (localShowWelcomePageTracker){
                                            if (localShowWelcomePage==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ShowWelcomePage cannot be null!!");
                                            }
                                           localShowWelcomePage.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ShowWelcomePage"),
                                               factory,xmlWriter);
                                        } if (localPasswordStateTracker){
                                            if (localPasswordState==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PasswordState cannot be null!!");
                                            }
                                           localPasswordState.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PasswordState"),
                                               factory,xmlWriter);
                                        } if (localMaxNumOfListExportTracker){
                                            if (localMaxNumOfListExport==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MaxNumOfListExport cannot be null!!");
                                            }
                                           localMaxNumOfListExport.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MaxNumOfListExport"),
                                               factory,xmlWriter);
                                        } if (localDefaultUserIDTypeTracker){
                                            if (localDefaultUserIDType==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DefaultUserIDType cannot be null!!");
                                            }
                                           localDefaultUserIDType.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultUserIDType"),
                                               factory,xmlWriter);
                                        } if (localNumberOfSecurityQuestionsToCompleteTracker){
                                            if (localNumberOfSecurityQuestionsToComplete==null){
                                                 throw new org.apache.axis2.databinding.ADBException("NumberOfSecurityQuestionsToComplete cannot be null!!");
                                            }
                                           localNumberOfSecurityQuestionsToComplete.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","NumberOfSecurityQuestionsToComplete"),
                                               factory,xmlWriter);
                                        } if (localAuthenticationTypeTracker){
                                            if (localAuthenticationType==null){
                                                 throw new org.apache.axis2.databinding.ADBException("AuthenticationType cannot be null!!");
                                            }
                                           localAuthenticationType.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","AuthenticationType"),
                                               factory,xmlWriter);
                                        } if (localExternalIdentifierForSingleSignOnTracker){
                                            if (localExternalIdentifierForSingleSignOn==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ExternalIdentifierForSingleSignOn cannot be null!!");
                                            }
                                           localExternalIdentifierForSingleSignOn.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ExternalIdentifierForSingleSignOn"),
                                               factory,xmlWriter);
                                        } if (localNeverCallTracker){
                                            if (localNeverCall==null){
                                                 throw new org.apache.axis2.databinding.ADBException("NeverCall cannot be null!!");
                                            }
                                           localNeverCall.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","NeverCall"),
                                               factory,xmlWriter);
                                        } if (localNevereMailTracker){
                                            if (localNevereMail==null){
                                                 throw new org.apache.axis2.databinding.ADBException("NevereMail cannot be null!!");
                                            }
                                           localNevereMail.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","NevereMail"),
                                               factory,xmlWriter);
                                        } if (localNeverMailTracker){
                                            if (localNeverMail==null){
                                                 throw new org.apache.axis2.databinding.ADBException("NeverMail cannot be null!!");
                                            }
                                           localNeverMail.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","NeverMail"),
                                               factory,xmlWriter);
                                        } if (localPersonalStreetAddress3Tracker){
                                            if (localPersonalStreetAddress3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PersonalStreetAddress3 cannot be null!!");
                                            }
                                           localPersonalStreetAddress3.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalStreetAddress3"),
                                               factory,xmlWriter);
                                        } if (localRoleTracker){
                                            if (localRole==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Role cannot be null!!");
                                            }
                                           localRole.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Role"),
                                               factory,xmlWriter);
                                        } if (localSecondaryEmailTracker){
                                            if (localSecondaryEmail==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SecondaryEmail cannot be null!!");
                                            }
                                           localSecondaryEmail.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","SecondaryEmail"),
                                               factory,xmlWriter);
                                        } if (localMarketTracker){
                                            if (localMarket==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Market cannot be null!!");
                                            }
                                           localMarket.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Market"),
                                               factory,xmlWriter);
                                        } if (localSubMarketTracker){
                                            if (localSubMarket==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SubMarket cannot be null!!");
                                            }
                                           localSubMarket.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","SubMarket"),
                                               factory,xmlWriter);
                                        } if (localRegionTracker){
                                            if (localRegion==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Region cannot be null!!");
                                            }
                                           localRegion.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Region"),
                                               factory,xmlWriter);
                                        } if (localSubRegionTracker){
                                            if (localSubRegion==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SubRegion cannot be null!!");
                                            }
                                           localSubRegion.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","SubRegion"),
                                               factory,xmlWriter);
                                        } if (localBusinessUnitTracker){
                                            if (localBusinessUnit==null){
                                                 throw new org.apache.axis2.databinding.ADBException("BusinessUnit cannot be null!!");
                                            }
                                           localBusinessUnit.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BusinessUnit"),
                                               factory,xmlWriter);
                                        } if (localBusinessUnitLevel1Tracker){
                                            if (localBusinessUnitLevel1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel1 cannot be null!!");
                                            }
                                           localBusinessUnitLevel1.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BusinessUnitLevel1"),
                                               factory,xmlWriter);
                                        } if (localBusinessUnitLevel2Tracker){
                                            if (localBusinessUnitLevel2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel2 cannot be null!!");
                                            }
                                           localBusinessUnitLevel2.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BusinessUnitLevel2"),
                                               factory,xmlWriter);
                                        } if (localBusinessUnitLevel3Tracker){
                                            if (localBusinessUnitLevel3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel3 cannot be null!!");
                                            }
                                           localBusinessUnitLevel3.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BusinessUnitLevel3"),
                                               factory,xmlWriter);
                                        } if (localBusinessUnitLevel4Tracker){
                                            if (localBusinessUnitLevel4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel4 cannot be null!!");
                                            }
                                           localBusinessUnitLevel4.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BusinessUnitLevel4"),
                                               factory,xmlWriter);
                                        } if (localSupervisorTracker){
                                            if (localSupervisor==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Supervisor cannot be null!!");
                                            }
                                           localSupervisor.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Supervisor"),
                                               factory,xmlWriter);
                                        } if (localLeadLimitTracker){
                                            if (localLeadLimit==null){
                                                 throw new org.apache.axis2.databinding.ADBException("LeadLimit cannot be null!!");
                                            }
                                           localLeadLimit.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LeadLimit"),
                                               factory,xmlWriter);
                                        } if (localMiscellaneousText1Tracker){
                                            if (localMiscellaneousText1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MiscellaneousText1 cannot be null!!");
                                            }
                                           localMiscellaneousText1.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MiscellaneousText1"),
                                               factory,xmlWriter);
                                        } if (localMiscellaneousText2Tracker){
                                            if (localMiscellaneousText2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MiscellaneousText2 cannot be null!!");
                                            }
                                           localMiscellaneousText2.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MiscellaneousText2"),
                                               factory,xmlWriter);
                                        } if (localMiscellaneousNumber1Tracker){
                                            if (localMiscellaneousNumber1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MiscellaneousNumber1 cannot be null!!");
                                            }
                                           localMiscellaneousNumber1.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MiscellaneousNumber1"),
                                               factory,xmlWriter);
                                        } if (localMiscellaneousNumber2Tracker){
                                            if (localMiscellaneousNumber2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MiscellaneousNumber2 cannot be null!!");
                                            }
                                           localMiscellaneousNumber2.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MiscellaneousNumber2"),
                                               factory,xmlWriter);
                                        } if (localSalesProcessIdTracker){
                                            if (localSalesProcessId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SalesProcessId cannot be null!!");
                                            }
                                           localSalesProcessId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","SalesProcessId"),
                                               factory,xmlWriter);
                                        } if (localCompanyTracker){
                                            if (localCompany==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Company cannot be null!!");
                                            }
                                           localCompany.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Company"),
                                               factory,xmlWriter);
                                        } if (localCompanySignInIDTracker){
                                            if (localCompanySignInID==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CompanySignInID cannot be null!!");
                                            }
                                           localCompanySignInID.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CompanySignInID"),
                                               factory,xmlWriter);
                                        } if (localUserLoginIdTracker){
                                            if (localUserLoginId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UserLoginId cannot be null!!");
                                            }
                                           localUserLoginId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserLoginId"),
                                               factory,xmlWriter);
                                        } if (localDefaultBookIdTracker){
                                            if (localDefaultBookId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DefaultBookId cannot be null!!");
                                            }
                                           localDefaultBookId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultBookId"),
                                               factory,xmlWriter);
                                        } if (localIncludeSubBooksTracker){
                                            if (localIncludeSubBooks==null){
                                                 throw new org.apache.axis2.databinding.ADBException("IncludeSubBooks cannot be null!!");
                                            }
                                           localIncludeSubBooks.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","IncludeSubBooks"),
                                               factory,xmlWriter);
                                        } if (localDefaultSearchObjectTracker){
                                            if (localDefaultSearchObject==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DefaultSearchObject cannot be null!!");
                                            }
                                           localDefaultSearchObject.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultSearchObject"),
                                               factory,xmlWriter);
                                        } if (localPromptToDialFlagTracker){
                                            if (localPromptToDialFlag==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PromptToDialFlag cannot be null!!");
                                            }
                                           localPromptToDialFlag.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PromptToDialFlag"),
                                               factory,xmlWriter);
                                        } if (localDefaultBookNameTracker){
                                            if (localDefaultBookName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DefaultBookName cannot be null!!");
                                            }
                                           localDefaultBookName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultBookName"),
                                               factory,xmlWriter);
                                        } if (localHistoricalSubjectAreasTracker){
                                            if (localHistoricalSubjectAreas==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HistoricalSubjectAreas cannot be null!!");
                                            }
                                           localHistoricalSubjectAreas.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","HistoricalSubjectAreas"),
                                               factory,xmlWriter);
                                        } if (localReportingSubjectAreasTracker){
                                            if (localReportingSubjectAreas==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ReportingSubjectAreas cannot be null!!");
                                            }
                                           localReportingSubjectAreas.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ReportingSubjectAreas"),
                                               factory,xmlWriter);
                                        } if (localDefaultAnalyticsBookIdTracker){
                                            if (localDefaultAnalyticsBookId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DefaultAnalyticsBookId cannot be null!!");
                                            }
                                           localDefaultAnalyticsBookId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultAnalyticsBookId"),
                                               factory,xmlWriter);
                                        } if (localDefaultAnalyticsBookNameTracker){
                                            if (localDefaultAnalyticsBookName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DefaultAnalyticsBookName cannot be null!!");
                                            }
                                           localDefaultAnalyticsBookName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultAnalyticsBookName"),
                                               factory,xmlWriter);
                                        } if (localEnableAnimateFlagTracker){
                                            if (localEnableAnimateFlag==null){
                                                 throw new org.apache.axis2.databinding.ADBException("EnableAnimateFlag cannot be null!!");
                                            }
                                           localEnableAnimateFlag.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","EnableAnimateFlag"),
                                               factory,xmlWriter);
                                        } if (localPartnerOrganizationNameTracker){
                                            if (localPartnerOrganizationName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PartnerOrganizationName cannot be null!!");
                                            }
                                           localPartnerOrganizationName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PartnerOrganizationName"),
                                               factory,xmlWriter);
                                        } if (localPartnerOrganizationIdTracker){
                                            if (localPartnerOrganizationId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PartnerOrganizationId cannot be null!!");
                                            }
                                           localPartnerOrganizationId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PartnerOrganizationId"),
                                               factory,xmlWriter);
                                        } if (localPreviewModeTracker){
                                            if (localPreviewMode==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PreviewMode cannot be null!!");
                                            }
                                           localPreviewMode.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PreviewMode"),
                                               factory,xmlWriter);
                                        } if (localSendCriticalAlertsFlagTracker){
                                            if (localSendCriticalAlertsFlag==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SendCriticalAlertsFlag cannot be null!!");
                                            }
                                           localSendCriticalAlertsFlag.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","SendCriticalAlertsFlag"),
                                               factory,xmlWriter);
                                        } if (localCreatedByFirstNameTracker){
                                            if (localCreatedByFirstName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                            }
                                           localCreatedByFirstName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFirstName"),
                                               factory,xmlWriter);
                                        } if (localCreatedByLastNameTracker){
                                            if (localCreatedByLastName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                            }
                                           localCreatedByLastName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByLastName"),
                                               factory,xmlWriter);
                                        } if (localCreatedByFullNameTracker){
                                            if (localCreatedByFullName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                            }
                                           localCreatedByFullName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFullName"),
                                               factory,xmlWriter);
                                        } if (localRBCanReadAllRecforUserTracker){
                                            if (localRBCanReadAllRecforUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("RBCanReadAllRecforUser cannot be null!!");
                                            }
                                           localRBCanReadAllRecforUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","RBCanReadAllRecforUser"),
                                               factory,xmlWriter);
                                        } if (localThemeNameTracker){
                                            if (localThemeName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ThemeName cannot be null!!");
                                            }
                                           localThemeName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ThemeName"),
                                               factory,xmlWriter);
                                        } if (localHUDModeTracker){
                                            if (localHUDMode==null){
                                                 throw new org.apache.axis2.databinding.ADBException("HUDMode cannot be null!!");
                                            }
                                           localHUDMode.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","HUDMode"),
                                               factory,xmlWriter);
                                        } if (localSalesProcessNameTracker){
                                            if (localSalesProcessName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SalesProcessName cannot be null!!");
                                            }
                                           localSalesProcessName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","SalesProcessName"),
                                               factory,xmlWriter);
                                        } if (localWorkFaxTracker){
                                            if (localWorkFax==null){
                                                 throw new org.apache.axis2.databinding.ADBException("WorkFax cannot be null!!");
                                            }
                                           localWorkFax.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","WorkFax"),
                                               factory,xmlWriter);
                                        } if (localStatusTracker){
                                            if (localStatus==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Status cannot be null!!");
                                            }
                                           localStatus.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Status"),
                                               factory,xmlWriter);
                                        } if (localPhoneNumberTracker){
                                            if (localPhoneNumber==null){
                                                 throw new org.apache.axis2.databinding.ADBException("PhoneNumber cannot be null!!");
                                            }
                                           localPhoneNumber.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PhoneNumber"),
                                               factory,xmlWriter);
                                        } if (localMrMrsTracker){
                                            if (localMrMrs==null){
                                                 throw new org.apache.axis2.databinding.ADBException("MrMrs cannot be null!!");
                                            }
                                           localMrMrs.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MrMrs"),
                                               factory,xmlWriter);
                                        } if (localJobTitleTracker){
                                            if (localJobTitle==null){
                                                 throw new org.apache.axis2.databinding.ADBException("JobTitle cannot be null!!");
                                            }
                                           localJobTitle.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","JobTitle"),
                                               factory,xmlWriter);
                                        } if (localEMailAddrTracker){
                                            if (localEMailAddr==null){
                                                 throw new org.apache.axis2.databinding.ADBException("EMailAddr cannot be null!!");
                                            }
                                           localEMailAddr.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","EMailAddr"),
                                               factory,xmlWriter);
                                        } if (localRelatedInfoFormatTracker){
                                            if (localRelatedInfoFormat==null){
                                                 throw new org.apache.axis2.databinding.ADBException("RelatedInfoFormat cannot be null!!");
                                            }
                                           localRelatedInfoFormat.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","RelatedInfoFormat"),
                                               factory,xmlWriter);
                                        } if (localRoleNameTracker){
                                            if (localRoleName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("RoleName cannot be null!!");
                                            }
                                           localRoleName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","RoleName"),
                                               factory,xmlWriter);
                                        } if (localCommCmplDateFilterTagTracker){
                                            if (localCommCmplDateFilterTag==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CommCmplDateFilterTag cannot be null!!");
                                            }
                                           localCommCmplDateFilterTag.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CommCmplDateFilterTag"),
                                               factory,xmlWriter);
                                        } if (localCommInboxDateFilterTagTracker){
                                            if (localCommInboxDateFilterTag==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CommInboxDateFilterTag cannot be null!!");
                                            }
                                           localCommInboxDateFilterTag.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CommInboxDateFilterTag"),
                                               factory,xmlWriter);
                                        } if (localUserTimeZoneSupportforReportingSubjectAreasTracker){
                                            if (localUserTimeZoneSupportforReportingSubjectAreas==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UserTimeZoneSupportforReportingSubjectAreas cannot be null!!");
                                            }
                                           localUserTimeZoneSupportforReportingSubjectAreas.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserTimeZoneSupportforReportingSubjectAreas"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByFirstNameTracker){
                                            if (localUpdatedByFirstName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                            }
                                           localUpdatedByFirstName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFirstName"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByLastNameTracker){
                                            if (localUpdatedByLastName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                            }
                                           localUpdatedByLastName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByLastName"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByUserSignInIdTracker){
                                            if (localUpdatedByUserSignInId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                            }
                                           localUpdatedByUserSignInId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByUserSignInId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByAliasTracker){
                                            if (localUpdatedByAlias==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                            }
                                           localUpdatedByAlias.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByAlias"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByFullNameTracker){
                                            if (localUpdatedByFullName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                            }
                                           localUpdatedByFullName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFullName"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByIntegrationIdTracker){
                                            if (localUpdatedByIntegrationId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                            }
                                           localUpdatedByIntegrationId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByIntegrationId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByExternalSystemIdTracker){
                                            if (localUpdatedByExternalSystemId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                            }
                                           localUpdatedByExternalSystemId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByExternalSystemId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByEMailAddrTracker){
                                            if (localUpdatedByEMailAddr==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                            }
                                           localUpdatedByEMailAddr.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByEMailAddr"),
                                               factory,xmlWriter);
                                        } if (localCreatedByUserSignInIdTracker){
                                            if (localCreatedByUserSignInId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                            }
                                           localCreatedByUserSignInId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByUserSignInId"),
                                               factory,xmlWriter);
                                        } if (localCreatedByAliasTracker){
                                            if (localCreatedByAlias==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                            }
                                           localCreatedByAlias.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByAlias"),
                                               factory,xmlWriter);
                                        } if (localCreatedByIntegrationIdTracker){
                                            if (localCreatedByIntegrationId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                            }
                                           localCreatedByIntegrationId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByIntegrationId"),
                                               factory,xmlWriter);
                                        } if (localCreatedByExternalSystemIdTracker){
                                            if (localCreatedByExternalSystemId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                            }
                                           localCreatedByExternalSystemId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByExternalSystemId"),
                                               factory,xmlWriter);
                                        } if (localCreatedByEMailAddrTracker){
                                            if (localCreatedByEMailAddr==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                            }
                                           localCreatedByEMailAddr.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByEMailAddr"),
                                               factory,xmlWriter);
                                        } if (localCreatedByTracker){
                                            if (localCreatedBy==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                            }
                                           localCreatedBy.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedBy"),
                                               factory,xmlWriter);
                                        } if (localModifiedByTracker){
                                            if (localModifiedBy==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                            }
                                           localModifiedBy.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedBy"),
                                               factory,xmlWriter);
                                        } if (localListOfDelegatedFromUserTracker){
                                            if (localListOfDelegatedFromUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfDelegatedFromUser cannot be null!!");
                                            }
                                           localListOfDelegatedFromUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ListOfDelegatedFromUser"),
                                               factory,xmlWriter);
                                        } if (localListOfDelegatedUserTracker){
                                            if (localListOfDelegatedUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfDelegatedUser cannot be null!!");
                                            }
                                           localListOfDelegatedUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ListOfDelegatedUser"),
                                               factory,xmlWriter);
                                        } if (localListOfUserDefaultBookPerTypeTracker){
                                            if (localListOfUserDefaultBookPerType==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfUserDefaultBookPerType cannot be null!!");
                                            }
                                           localListOfUserDefaultBookPerType.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ListOfUserDefaultBookPerType"),
                                               factory,xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localModifiedDateTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedDate"));
                            
                            
                                    if (localModifiedDate==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                    }
                                    elementList.add(localModifiedDate);
                                } if (localCreatedDateTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedDate"));
                            
                            
                                    if (localCreatedDate==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                    }
                                    elementList.add(localCreatedDate);
                                } if (localModifiedByIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedById"));
                            
                            
                                    if (localModifiedById==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                    }
                                    elementList.add(localModifiedById);
                                } if (localCreatedByIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedById"));
                            
                            
                                    if (localCreatedById==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                    }
                                    elementList.add(localCreatedById);
                                } if (localModIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModId"));
                            
                            
                                    if (localModId==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModId cannot be null!!");
                                    }
                                    elementList.add(localModId);
                                } if (localIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Id"));
                            
                            
                                    if (localId==null){
                                         throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                    }
                                    elementList.add(localId);
                                } if (localTimeZoneIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "TimeZoneId"));
                            
                            
                                    if (localTimeZoneId==null){
                                         throw new org.apache.axis2.databinding.ADBException("TimeZoneId cannot be null!!");
                                    }
                                    elementList.add(localTimeZoneId);
                                } if (localTimeZoneNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "TimeZoneName"));
                            
                            
                                    if (localTimeZoneName==null){
                                         throw new org.apache.axis2.databinding.ADBException("TimeZoneName cannot be null!!");
                                    }
                                    elementList.add(localTimeZoneName);
                                } if (localEmployeeNumberTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "EmployeeNumber"));
                            
                            
                                    if (localEmployeeNumber==null){
                                         throw new org.apache.axis2.databinding.ADBException("EmployeeNumber cannot be null!!");
                                    }
                                    elementList.add(localEmployeeNumber);
                                } if (localRoleIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "RoleId"));
                            
                            
                                    if (localRoleId==null){
                                         throw new org.apache.axis2.databinding.ADBException("RoleId cannot be null!!");
                                    }
                                    elementList.add(localRoleId);
                                } if (localPrimaryPositionIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PrimaryPositionId"));
                            
                            
                                    if (localPrimaryPositionId==null){
                                         throw new org.apache.axis2.databinding.ADBException("PrimaryPositionId cannot be null!!");
                                    }
                                    elementList.add(localPrimaryPositionId);
                                } if (localFirstNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "FirstName"));
                            
                            
                                    if (localFirstName==null){
                                         throw new org.apache.axis2.databinding.ADBException("FirstName cannot be null!!");
                                    }
                                    elementList.add(localFirstName);
                                } if (localLastNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "LastName"));
                            
                            
                                    if (localLastName==null){
                                         throw new org.apache.axis2.databinding.ADBException("LastName cannot be null!!");
                                    }
                                    elementList.add(localLastName);
                                } if (localUserSignInIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UserSignInId"));
                            
                            
                                    if (localUserSignInId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UserSignInId cannot be null!!");
                                    }
                                    elementList.add(localUserSignInId);
                                } if (localMiddleNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "MiddleName"));
                            
                            
                                    if (localMiddleName==null){
                                         throw new org.apache.axis2.databinding.ADBException("MiddleName cannot be null!!");
                                    }
                                    elementList.add(localMiddleName);
                                } if (localApprovalCurrencyTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ApprovalCurrency"));
                            
                            
                                    if (localApprovalCurrency==null){
                                         throw new org.apache.axis2.databinding.ADBException("ApprovalCurrency cannot be null!!");
                                    }
                                    elementList.add(localApprovalCurrency);
                                } if (localFundApprovalLimitTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "FundApprovalLimit"));
                            
                            
                                    if (localFundApprovalLimit==null){
                                         throw new org.apache.axis2.databinding.ADBException("FundApprovalLimit cannot be null!!");
                                    }
                                    elementList.add(localFundApprovalLimit);
                                } if (localAliasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Alias"));
                            
                            
                                    if (localAlias==null){
                                         throw new org.apache.axis2.databinding.ADBException("Alias cannot be null!!");
                                    }
                                    elementList.add(localAlias);
                                } if (localFullNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "FullName"));
                            
                            
                                    if (localFullName==null){
                                         throw new org.apache.axis2.databinding.ADBException("FullName cannot be null!!");
                                    }
                                    elementList.add(localFullName);
                                } if (localCellPhoneTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CellPhone"));
                            
                            
                                    if (localCellPhone==null){
                                         throw new org.apache.axis2.databinding.ADBException("CellPhone cannot be null!!");
                                    }
                                    elementList.add(localCellPhone);
                                } if (localIntegrationIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "IntegrationId"));
                            
                            
                                    if (localIntegrationId==null){
                                         throw new org.apache.axis2.databinding.ADBException("IntegrationId cannot be null!!");
                                    }
                                    elementList.add(localIntegrationId);
                                } if (localPersonalAddressIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PersonalAddressId"));
                            
                            
                                    if (localPersonalAddressId==null){
                                         throw new org.apache.axis2.databinding.ADBException("PersonalAddressId cannot be null!!");
                                    }
                                    elementList.add(localPersonalAddressId);
                                } if (localPersonalCountryTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PersonalCountry"));
                            
                            
                                    if (localPersonalCountry==null){
                                         throw new org.apache.axis2.databinding.ADBException("PersonalCountry cannot be null!!");
                                    }
                                    elementList.add(localPersonalCountry);
                                } if (localPersonalCityTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PersonalCity"));
                            
                            
                                    if (localPersonalCity==null){
                                         throw new org.apache.axis2.databinding.ADBException("PersonalCity cannot be null!!");
                                    }
                                    elementList.add(localPersonalCity);
                                } if (localPersonalPostalCodeTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PersonalPostalCode"));
                            
                            
                                    if (localPersonalPostalCode==null){
                                         throw new org.apache.axis2.databinding.ADBException("PersonalPostalCode cannot be null!!");
                                    }
                                    elementList.add(localPersonalPostalCode);
                                } if (localPersonalCountyTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PersonalCounty"));
                            
                            
                                    if (localPersonalCounty==null){
                                         throw new org.apache.axis2.databinding.ADBException("PersonalCounty cannot be null!!");
                                    }
                                    elementList.add(localPersonalCounty);
                                } if (localPersonalProvinceTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PersonalProvince"));
                            
                            
                                    if (localPersonalProvince==null){
                                         throw new org.apache.axis2.databinding.ADBException("PersonalProvince cannot be null!!");
                                    }
                                    elementList.add(localPersonalProvince);
                                } if (localPersonalStateTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PersonalState"));
                            
                            
                                    if (localPersonalState==null){
                                         throw new org.apache.axis2.databinding.ADBException("PersonalState cannot be null!!");
                                    }
                                    elementList.add(localPersonalState);
                                } if (localPersonalStreetAddressTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PersonalStreetAddress"));
                            
                            
                                    if (localPersonalStreetAddress==null){
                                         throw new org.apache.axis2.databinding.ADBException("PersonalStreetAddress cannot be null!!");
                                    }
                                    elementList.add(localPersonalStreetAddress);
                                } if (localPersonalStreetAddress2Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PersonalStreetAddress2"));
                            
                            
                                    if (localPersonalStreetAddress2==null){
                                         throw new org.apache.axis2.databinding.ADBException("PersonalStreetAddress2 cannot be null!!");
                                    }
                                    elementList.add(localPersonalStreetAddress2);
                                } if (localLtCustomFooTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ltCustomFoo"));
                            
                            
                                    if (localLtCustomFoo==null){
                                         throw new org.apache.axis2.databinding.ADBException("ltCustomFoo cannot be null!!");
                                    }
                                    elementList.add(localLtCustomFoo);
                                } if (localCreatedByExtTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByExt"));
                            
                            
                                    if (localCreatedByExt==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByExt cannot be null!!");
                                    }
                                    elementList.add(localCreatedByExt);
                                } if (localCreatedDateExtTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedDateExt"));
                            
                            
                                    if (localCreatedDateExt==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedDateExt cannot be null!!");
                                    }
                                    elementList.add(localCreatedDateExt);
                                } if (localDepartmentTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Department"));
                            
                            
                                    if (localDepartment==null){
                                         throw new org.apache.axis2.databinding.ADBException("Department cannot be null!!");
                                    }
                                    elementList.add(localDepartment);
                                } if (localCurrencyCodeTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CurrencyCode"));
                            
                            
                                    if (localCurrencyCode==null){
                                         throw new org.apache.axis2.databinding.ADBException("CurrencyCode cannot be null!!");
                                    }
                                    elementList.add(localCurrencyCode);
                                } if (localTempPasswordFlagTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "TempPasswordFlag"));
                            
                            
                                    if (localTempPasswordFlag==null){
                                         throw new org.apache.axis2.databinding.ADBException("TempPasswordFlag cannot be null!!");
                                    }
                                    elementList.add(localTempPasswordFlag);
                                } if (localExternalSystemIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ExternalSystemId"));
                            
                            
                                    if (localExternalSystemId==null){
                                         throw new org.apache.axis2.databinding.ADBException("ExternalSystemId cannot be null!!");
                                    }
                                    elementList.add(localExternalSystemId);
                                } if (localModifiedDateExtTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedDateExt"));
                            
                            
                                    if (localModifiedDateExt==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedDateExt cannot be null!!");
                                    }
                                    elementList.add(localModifiedDateExt);
                                } if (localLastLoggedInTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "LastLoggedIn"));
                            
                            
                                    if (localLastLoggedIn==null){
                                         throw new org.apache.axis2.databinding.ADBException("LastLoggedIn cannot be null!!");
                                    }
                                    elementList.add(localLastLoggedIn);
                                } if (localLanguageCodeTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "LanguageCode"));
                            
                            
                                    if (localLanguageCode==null){
                                         throw new org.apache.axis2.databinding.ADBException("LanguageCode cannot be null!!");
                                    }
                                    elementList.add(localLanguageCode);
                                } if (localLanguageTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Language"));
                            
                            
                                    if (localLanguage==null){
                                         throw new org.apache.axis2.databinding.ADBException("Language cannot be null!!");
                                    }
                                    elementList.add(localLanguage);
                                } if (localModifiedByExtTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedByExt"));
                            
                            
                                    if (localModifiedByExt==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedByExt cannot be null!!");
                                    }
                                    elementList.add(localModifiedByExt);
                                } if (localLocaleCodeTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "LocaleCode"));
                            
                            
                                    if (localLocaleCode==null){
                                         throw new org.apache.axis2.databinding.ADBException("LocaleCode cannot be null!!");
                                    }
                                    elementList.add(localLocaleCode);
                                } if (localLocaleTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Locale"));
                            
                            
                                    if (localLocale==null){
                                         throw new org.apache.axis2.databinding.ADBException("Locale cannot be null!!");
                                    }
                                    elementList.add(localLocale);
                                } if (localManagerAliasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ManagerAlias"));
                            
                            
                                    if (localManagerAlias==null){
                                         throw new org.apache.axis2.databinding.ADBException("ManagerAlias cannot be null!!");
                                    }
                                    elementList.add(localManagerAlias);
                                } if (localManagerFullNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ManagerFullName"));
                            
                            
                                    if (localManagerFullName==null){
                                         throw new org.apache.axis2.databinding.ADBException("ManagerFullName cannot be null!!");
                                    }
                                    elementList.add(localManagerFullName);
                                } if (localDivisionTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Division"));
                            
                            
                                    if (localDivision==null){
                                         throw new org.apache.axis2.databinding.ADBException("Division cannot be null!!");
                                    }
                                    elementList.add(localDivision);
                                } if (localManagerIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ManagerId"));
                            
                            
                                    if (localManagerId==null){
                                         throw new org.apache.axis2.databinding.ADBException("ManagerId cannot be null!!");
                                    }
                                    elementList.add(localManagerId);
                                } if (localPrimaryGroupTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PrimaryGroup"));
                            
                            
                                    if (localPrimaryGroup==null){
                                         throw new org.apache.axis2.databinding.ADBException("PrimaryGroup cannot be null!!");
                                    }
                                    elementList.add(localPrimaryGroup);
                                } if (localDefaultCalendarViewTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "DefaultCalendarView"));
                            
                            
                                    if (localDefaultCalendarView==null){
                                         throw new org.apache.axis2.databinding.ADBException("DefaultCalendarView cannot be null!!");
                                    }
                                    elementList.add(localDefaultCalendarView);
                                } if (localEnableTeamContactsSyncTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "EnableTeamContactsSync"));
                            
                            
                                    if (localEnableTeamContactsSync==null){
                                         throw new org.apache.axis2.databinding.ADBException("EnableTeamContactsSync cannot be null!!");
                                    }
                                    elementList.add(localEnableTeamContactsSync);
                                } if (localShowWelcomePageTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ShowWelcomePage"));
                            
                            
                                    if (localShowWelcomePage==null){
                                         throw new org.apache.axis2.databinding.ADBException("ShowWelcomePage cannot be null!!");
                                    }
                                    elementList.add(localShowWelcomePage);
                                } if (localPasswordStateTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PasswordState"));
                            
                            
                                    if (localPasswordState==null){
                                         throw new org.apache.axis2.databinding.ADBException("PasswordState cannot be null!!");
                                    }
                                    elementList.add(localPasswordState);
                                } if (localMaxNumOfListExportTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "MaxNumOfListExport"));
                            
                            
                                    if (localMaxNumOfListExport==null){
                                         throw new org.apache.axis2.databinding.ADBException("MaxNumOfListExport cannot be null!!");
                                    }
                                    elementList.add(localMaxNumOfListExport);
                                } if (localDefaultUserIDTypeTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "DefaultUserIDType"));
                            
                            
                                    if (localDefaultUserIDType==null){
                                         throw new org.apache.axis2.databinding.ADBException("DefaultUserIDType cannot be null!!");
                                    }
                                    elementList.add(localDefaultUserIDType);
                                } if (localNumberOfSecurityQuestionsToCompleteTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "NumberOfSecurityQuestionsToComplete"));
                            
                            
                                    if (localNumberOfSecurityQuestionsToComplete==null){
                                         throw new org.apache.axis2.databinding.ADBException("NumberOfSecurityQuestionsToComplete cannot be null!!");
                                    }
                                    elementList.add(localNumberOfSecurityQuestionsToComplete);
                                } if (localAuthenticationTypeTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "AuthenticationType"));
                            
                            
                                    if (localAuthenticationType==null){
                                         throw new org.apache.axis2.databinding.ADBException("AuthenticationType cannot be null!!");
                                    }
                                    elementList.add(localAuthenticationType);
                                } if (localExternalIdentifierForSingleSignOnTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ExternalIdentifierForSingleSignOn"));
                            
                            
                                    if (localExternalIdentifierForSingleSignOn==null){
                                         throw new org.apache.axis2.databinding.ADBException("ExternalIdentifierForSingleSignOn cannot be null!!");
                                    }
                                    elementList.add(localExternalIdentifierForSingleSignOn);
                                } if (localNeverCallTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "NeverCall"));
                            
                            
                                    if (localNeverCall==null){
                                         throw new org.apache.axis2.databinding.ADBException("NeverCall cannot be null!!");
                                    }
                                    elementList.add(localNeverCall);
                                } if (localNevereMailTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "NevereMail"));
                            
                            
                                    if (localNevereMail==null){
                                         throw new org.apache.axis2.databinding.ADBException("NevereMail cannot be null!!");
                                    }
                                    elementList.add(localNevereMail);
                                } if (localNeverMailTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "NeverMail"));
                            
                            
                                    if (localNeverMail==null){
                                         throw new org.apache.axis2.databinding.ADBException("NeverMail cannot be null!!");
                                    }
                                    elementList.add(localNeverMail);
                                } if (localPersonalStreetAddress3Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PersonalStreetAddress3"));
                            
                            
                                    if (localPersonalStreetAddress3==null){
                                         throw new org.apache.axis2.databinding.ADBException("PersonalStreetAddress3 cannot be null!!");
                                    }
                                    elementList.add(localPersonalStreetAddress3);
                                } if (localRoleTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Role"));
                            
                            
                                    if (localRole==null){
                                         throw new org.apache.axis2.databinding.ADBException("Role cannot be null!!");
                                    }
                                    elementList.add(localRole);
                                } if (localSecondaryEmailTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "SecondaryEmail"));
                            
                            
                                    if (localSecondaryEmail==null){
                                         throw new org.apache.axis2.databinding.ADBException("SecondaryEmail cannot be null!!");
                                    }
                                    elementList.add(localSecondaryEmail);
                                } if (localMarketTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Market"));
                            
                            
                                    if (localMarket==null){
                                         throw new org.apache.axis2.databinding.ADBException("Market cannot be null!!");
                                    }
                                    elementList.add(localMarket);
                                } if (localSubMarketTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "SubMarket"));
                            
                            
                                    if (localSubMarket==null){
                                         throw new org.apache.axis2.databinding.ADBException("SubMarket cannot be null!!");
                                    }
                                    elementList.add(localSubMarket);
                                } if (localRegionTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Region"));
                            
                            
                                    if (localRegion==null){
                                         throw new org.apache.axis2.databinding.ADBException("Region cannot be null!!");
                                    }
                                    elementList.add(localRegion);
                                } if (localSubRegionTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "SubRegion"));
                            
                            
                                    if (localSubRegion==null){
                                         throw new org.apache.axis2.databinding.ADBException("SubRegion cannot be null!!");
                                    }
                                    elementList.add(localSubRegion);
                                } if (localBusinessUnitTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "BusinessUnit"));
                            
                            
                                    if (localBusinessUnit==null){
                                         throw new org.apache.axis2.databinding.ADBException("BusinessUnit cannot be null!!");
                                    }
                                    elementList.add(localBusinessUnit);
                                } if (localBusinessUnitLevel1Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "BusinessUnitLevel1"));
                            
                            
                                    if (localBusinessUnitLevel1==null){
                                         throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel1 cannot be null!!");
                                    }
                                    elementList.add(localBusinessUnitLevel1);
                                } if (localBusinessUnitLevel2Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "BusinessUnitLevel2"));
                            
                            
                                    if (localBusinessUnitLevel2==null){
                                         throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel2 cannot be null!!");
                                    }
                                    elementList.add(localBusinessUnitLevel2);
                                } if (localBusinessUnitLevel3Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "BusinessUnitLevel3"));
                            
                            
                                    if (localBusinessUnitLevel3==null){
                                         throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel3 cannot be null!!");
                                    }
                                    elementList.add(localBusinessUnitLevel3);
                                } if (localBusinessUnitLevel4Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "BusinessUnitLevel4"));
                            
                            
                                    if (localBusinessUnitLevel4==null){
                                         throw new org.apache.axis2.databinding.ADBException("BusinessUnitLevel4 cannot be null!!");
                                    }
                                    elementList.add(localBusinessUnitLevel4);
                                } if (localSupervisorTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Supervisor"));
                            
                            
                                    if (localSupervisor==null){
                                         throw new org.apache.axis2.databinding.ADBException("Supervisor cannot be null!!");
                                    }
                                    elementList.add(localSupervisor);
                                } if (localLeadLimitTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "LeadLimit"));
                            
                            
                                    if (localLeadLimit==null){
                                         throw new org.apache.axis2.databinding.ADBException("LeadLimit cannot be null!!");
                                    }
                                    elementList.add(localLeadLimit);
                                } if (localMiscellaneousText1Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "MiscellaneousText1"));
                            
                            
                                    if (localMiscellaneousText1==null){
                                         throw new org.apache.axis2.databinding.ADBException("MiscellaneousText1 cannot be null!!");
                                    }
                                    elementList.add(localMiscellaneousText1);
                                } if (localMiscellaneousText2Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "MiscellaneousText2"));
                            
                            
                                    if (localMiscellaneousText2==null){
                                         throw new org.apache.axis2.databinding.ADBException("MiscellaneousText2 cannot be null!!");
                                    }
                                    elementList.add(localMiscellaneousText2);
                                } if (localMiscellaneousNumber1Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "MiscellaneousNumber1"));
                            
                            
                                    if (localMiscellaneousNumber1==null){
                                         throw new org.apache.axis2.databinding.ADBException("MiscellaneousNumber1 cannot be null!!");
                                    }
                                    elementList.add(localMiscellaneousNumber1);
                                } if (localMiscellaneousNumber2Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "MiscellaneousNumber2"));
                            
                            
                                    if (localMiscellaneousNumber2==null){
                                         throw new org.apache.axis2.databinding.ADBException("MiscellaneousNumber2 cannot be null!!");
                                    }
                                    elementList.add(localMiscellaneousNumber2);
                                } if (localSalesProcessIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "SalesProcessId"));
                            
                            
                                    if (localSalesProcessId==null){
                                         throw new org.apache.axis2.databinding.ADBException("SalesProcessId cannot be null!!");
                                    }
                                    elementList.add(localSalesProcessId);
                                } if (localCompanyTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Company"));
                            
                            
                                    if (localCompany==null){
                                         throw new org.apache.axis2.databinding.ADBException("Company cannot be null!!");
                                    }
                                    elementList.add(localCompany);
                                } if (localCompanySignInIDTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CompanySignInID"));
                            
                            
                                    if (localCompanySignInID==null){
                                         throw new org.apache.axis2.databinding.ADBException("CompanySignInID cannot be null!!");
                                    }
                                    elementList.add(localCompanySignInID);
                                } if (localUserLoginIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UserLoginId"));
                            
                            
                                    if (localUserLoginId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UserLoginId cannot be null!!");
                                    }
                                    elementList.add(localUserLoginId);
                                } if (localDefaultBookIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "DefaultBookId"));
                            
                            
                                    if (localDefaultBookId==null){
                                         throw new org.apache.axis2.databinding.ADBException("DefaultBookId cannot be null!!");
                                    }
                                    elementList.add(localDefaultBookId);
                                } if (localIncludeSubBooksTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "IncludeSubBooks"));
                            
                            
                                    if (localIncludeSubBooks==null){
                                         throw new org.apache.axis2.databinding.ADBException("IncludeSubBooks cannot be null!!");
                                    }
                                    elementList.add(localIncludeSubBooks);
                                } if (localDefaultSearchObjectTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "DefaultSearchObject"));
                            
                            
                                    if (localDefaultSearchObject==null){
                                         throw new org.apache.axis2.databinding.ADBException("DefaultSearchObject cannot be null!!");
                                    }
                                    elementList.add(localDefaultSearchObject);
                                } if (localPromptToDialFlagTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PromptToDialFlag"));
                            
                            
                                    if (localPromptToDialFlag==null){
                                         throw new org.apache.axis2.databinding.ADBException("PromptToDialFlag cannot be null!!");
                                    }
                                    elementList.add(localPromptToDialFlag);
                                } if (localDefaultBookNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "DefaultBookName"));
                            
                            
                                    if (localDefaultBookName==null){
                                         throw new org.apache.axis2.databinding.ADBException("DefaultBookName cannot be null!!");
                                    }
                                    elementList.add(localDefaultBookName);
                                } if (localHistoricalSubjectAreasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "HistoricalSubjectAreas"));
                            
                            
                                    if (localHistoricalSubjectAreas==null){
                                         throw new org.apache.axis2.databinding.ADBException("HistoricalSubjectAreas cannot be null!!");
                                    }
                                    elementList.add(localHistoricalSubjectAreas);
                                } if (localReportingSubjectAreasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ReportingSubjectAreas"));
                            
                            
                                    if (localReportingSubjectAreas==null){
                                         throw new org.apache.axis2.databinding.ADBException("ReportingSubjectAreas cannot be null!!");
                                    }
                                    elementList.add(localReportingSubjectAreas);
                                } if (localDefaultAnalyticsBookIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "DefaultAnalyticsBookId"));
                            
                            
                                    if (localDefaultAnalyticsBookId==null){
                                         throw new org.apache.axis2.databinding.ADBException("DefaultAnalyticsBookId cannot be null!!");
                                    }
                                    elementList.add(localDefaultAnalyticsBookId);
                                } if (localDefaultAnalyticsBookNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "DefaultAnalyticsBookName"));
                            
                            
                                    if (localDefaultAnalyticsBookName==null){
                                         throw new org.apache.axis2.databinding.ADBException("DefaultAnalyticsBookName cannot be null!!");
                                    }
                                    elementList.add(localDefaultAnalyticsBookName);
                                } if (localEnableAnimateFlagTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "EnableAnimateFlag"));
                            
                            
                                    if (localEnableAnimateFlag==null){
                                         throw new org.apache.axis2.databinding.ADBException("EnableAnimateFlag cannot be null!!");
                                    }
                                    elementList.add(localEnableAnimateFlag);
                                } if (localPartnerOrganizationNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PartnerOrganizationName"));
                            
                            
                                    if (localPartnerOrganizationName==null){
                                         throw new org.apache.axis2.databinding.ADBException("PartnerOrganizationName cannot be null!!");
                                    }
                                    elementList.add(localPartnerOrganizationName);
                                } if (localPartnerOrganizationIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PartnerOrganizationId"));
                            
                            
                                    if (localPartnerOrganizationId==null){
                                         throw new org.apache.axis2.databinding.ADBException("PartnerOrganizationId cannot be null!!");
                                    }
                                    elementList.add(localPartnerOrganizationId);
                                } if (localPreviewModeTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PreviewMode"));
                            
                            
                                    if (localPreviewMode==null){
                                         throw new org.apache.axis2.databinding.ADBException("PreviewMode cannot be null!!");
                                    }
                                    elementList.add(localPreviewMode);
                                } if (localSendCriticalAlertsFlagTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "SendCriticalAlertsFlag"));
                            
                            
                                    if (localSendCriticalAlertsFlag==null){
                                         throw new org.apache.axis2.databinding.ADBException("SendCriticalAlertsFlag cannot be null!!");
                                    }
                                    elementList.add(localSendCriticalAlertsFlag);
                                } if (localCreatedByFirstNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByFirstName"));
                            
                            
                                    if (localCreatedByFirstName==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                    }
                                    elementList.add(localCreatedByFirstName);
                                } if (localCreatedByLastNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByLastName"));
                            
                            
                                    if (localCreatedByLastName==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                    }
                                    elementList.add(localCreatedByLastName);
                                } if (localCreatedByFullNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByFullName"));
                            
                            
                                    if (localCreatedByFullName==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                    }
                                    elementList.add(localCreatedByFullName);
                                } if (localRBCanReadAllRecforUserTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "RBCanReadAllRecforUser"));
                            
                            
                                    if (localRBCanReadAllRecforUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("RBCanReadAllRecforUser cannot be null!!");
                                    }
                                    elementList.add(localRBCanReadAllRecforUser);
                                } if (localThemeNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ThemeName"));
                            
                            
                                    if (localThemeName==null){
                                         throw new org.apache.axis2.databinding.ADBException("ThemeName cannot be null!!");
                                    }
                                    elementList.add(localThemeName);
                                } if (localHUDModeTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "HUDMode"));
                            
                            
                                    if (localHUDMode==null){
                                         throw new org.apache.axis2.databinding.ADBException("HUDMode cannot be null!!");
                                    }
                                    elementList.add(localHUDMode);
                                } if (localSalesProcessNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "SalesProcessName"));
                            
                            
                                    if (localSalesProcessName==null){
                                         throw new org.apache.axis2.databinding.ADBException("SalesProcessName cannot be null!!");
                                    }
                                    elementList.add(localSalesProcessName);
                                } if (localWorkFaxTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "WorkFax"));
                            
                            
                                    if (localWorkFax==null){
                                         throw new org.apache.axis2.databinding.ADBException("WorkFax cannot be null!!");
                                    }
                                    elementList.add(localWorkFax);
                                } if (localStatusTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Status"));
                            
                            
                                    if (localStatus==null){
                                         throw new org.apache.axis2.databinding.ADBException("Status cannot be null!!");
                                    }
                                    elementList.add(localStatus);
                                } if (localPhoneNumberTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "PhoneNumber"));
                            
                            
                                    if (localPhoneNumber==null){
                                         throw new org.apache.axis2.databinding.ADBException("PhoneNumber cannot be null!!");
                                    }
                                    elementList.add(localPhoneNumber);
                                } if (localMrMrsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "MrMrs"));
                            
                            
                                    if (localMrMrs==null){
                                         throw new org.apache.axis2.databinding.ADBException("MrMrs cannot be null!!");
                                    }
                                    elementList.add(localMrMrs);
                                } if (localJobTitleTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "JobTitle"));
                            
                            
                                    if (localJobTitle==null){
                                         throw new org.apache.axis2.databinding.ADBException("JobTitle cannot be null!!");
                                    }
                                    elementList.add(localJobTitle);
                                } if (localEMailAddrTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "EMailAddr"));
                            
                            
                                    if (localEMailAddr==null){
                                         throw new org.apache.axis2.databinding.ADBException("EMailAddr cannot be null!!");
                                    }
                                    elementList.add(localEMailAddr);
                                } if (localRelatedInfoFormatTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "RelatedInfoFormat"));
                            
                            
                                    if (localRelatedInfoFormat==null){
                                         throw new org.apache.axis2.databinding.ADBException("RelatedInfoFormat cannot be null!!");
                                    }
                                    elementList.add(localRelatedInfoFormat);
                                } if (localRoleNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "RoleName"));
                            
                            
                                    if (localRoleName==null){
                                         throw new org.apache.axis2.databinding.ADBException("RoleName cannot be null!!");
                                    }
                                    elementList.add(localRoleName);
                                } if (localCommCmplDateFilterTagTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CommCmplDateFilterTag"));
                            
                            
                                    if (localCommCmplDateFilterTag==null){
                                         throw new org.apache.axis2.databinding.ADBException("CommCmplDateFilterTag cannot be null!!");
                                    }
                                    elementList.add(localCommCmplDateFilterTag);
                                } if (localCommInboxDateFilterTagTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CommInboxDateFilterTag"));
                            
                            
                                    if (localCommInboxDateFilterTag==null){
                                         throw new org.apache.axis2.databinding.ADBException("CommInboxDateFilterTag cannot be null!!");
                                    }
                                    elementList.add(localCommInboxDateFilterTag);
                                } if (localUserTimeZoneSupportforReportingSubjectAreasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UserTimeZoneSupportforReportingSubjectAreas"));
                            
                            
                                    if (localUserTimeZoneSupportforReportingSubjectAreas==null){
                                         throw new org.apache.axis2.databinding.ADBException("UserTimeZoneSupportforReportingSubjectAreas cannot be null!!");
                                    }
                                    elementList.add(localUserTimeZoneSupportforReportingSubjectAreas);
                                } if (localUpdatedByFirstNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByFirstName"));
                            
                            
                                    if (localUpdatedByFirstName==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByFirstName);
                                } if (localUpdatedByLastNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByLastName"));
                            
                            
                                    if (localUpdatedByLastName==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByLastName);
                                } if (localUpdatedByUserSignInIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByUserSignInId"));
                            
                            
                                    if (localUpdatedByUserSignInId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByUserSignInId);
                                } if (localUpdatedByAliasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByAlias"));
                            
                            
                                    if (localUpdatedByAlias==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByAlias);
                                } if (localUpdatedByFullNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByFullName"));
                            
                            
                                    if (localUpdatedByFullName==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByFullName);
                                } if (localUpdatedByIntegrationIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByIntegrationId"));
                            
                            
                                    if (localUpdatedByIntegrationId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByIntegrationId);
                                } if (localUpdatedByExternalSystemIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByExternalSystemId"));
                            
                            
                                    if (localUpdatedByExternalSystemId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByExternalSystemId);
                                } if (localUpdatedByEMailAddrTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByEMailAddr"));
                            
                            
                                    if (localUpdatedByEMailAddr==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByEMailAddr);
                                } if (localCreatedByUserSignInIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByUserSignInId"));
                            
                            
                                    if (localCreatedByUserSignInId==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                    }
                                    elementList.add(localCreatedByUserSignInId);
                                } if (localCreatedByAliasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByAlias"));
                            
                            
                                    if (localCreatedByAlias==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                    }
                                    elementList.add(localCreatedByAlias);
                                } if (localCreatedByIntegrationIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByIntegrationId"));
                            
                            
                                    if (localCreatedByIntegrationId==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                    }
                                    elementList.add(localCreatedByIntegrationId);
                                } if (localCreatedByExternalSystemIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByExternalSystemId"));
                            
                            
                                    if (localCreatedByExternalSystemId==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                    }
                                    elementList.add(localCreatedByExternalSystemId);
                                } if (localCreatedByEMailAddrTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByEMailAddr"));
                            
                            
                                    if (localCreatedByEMailAddr==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                    }
                                    elementList.add(localCreatedByEMailAddr);
                                } if (localCreatedByTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedBy"));
                            
                            
                                    if (localCreatedBy==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                    }
                                    elementList.add(localCreatedBy);
                                } if (localModifiedByTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedBy"));
                            
                            
                                    if (localModifiedBy==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                    }
                                    elementList.add(localModifiedBy);
                                } if (localListOfDelegatedFromUserTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ListOfDelegatedFromUser"));
                            
                            
                                    if (localListOfDelegatedFromUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfDelegatedFromUser cannot be null!!");
                                    }
                                    elementList.add(localListOfDelegatedFromUser);
                                } if (localListOfDelegatedUserTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ListOfDelegatedUser"));
                            
                            
                                    if (localListOfDelegatedUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfDelegatedUser cannot be null!!");
                                    }
                                    elementList.add(localListOfDelegatedUser);
                                } if (localListOfUserDefaultBookPerTypeTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ListOfUserDefaultBookPerType"));
                            
                            
                                    if (localListOfUserDefaultBookPerType==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfUserDefaultBookPerType cannot be null!!");
                                    }
                                    elementList.add(localListOfUserDefaultBookPerType);
                                }
                            attribList.add(
                            new javax.xml.namespace.QName("","searchspec"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSearchspec));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UserQuery parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UserQuery object =
                new UserQuery();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"UserQuery".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UserQuery)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "searchspec"
                    java.lang.String tempAttribSearchspec =
                        
                                reader.getAttributeValue(null,"searchspec");
                            
                   if (tempAttribSearchspec!=null){
                         java.lang.String content = tempAttribSearchspec;
                        
                                                 object.setSearchspec(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribSearchspec));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("searchspec");
                    
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedDate").equals(reader.getName())){
                                
                                                object.setModifiedDate(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedDate").equals(reader.getName())){
                                
                                                object.setCreatedDate(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedById").equals(reader.getName())){
                                
                                                object.setModifiedById(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedById").equals(reader.getName())){
                                
                                                object.setCreatedById(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModId").equals(reader.getName())){
                                
                                                object.setModId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Id").equals(reader.getName())){
                                
                                                object.setId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","TimeZoneId").equals(reader.getName())){
                                
                                                object.setTimeZoneId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","TimeZoneName").equals(reader.getName())){
                                
                                                object.setTimeZoneName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","EmployeeNumber").equals(reader.getName())){
                                
                                                object.setEmployeeNumber(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","RoleId").equals(reader.getName())){
                                
                                                object.setRoleId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PrimaryPositionId").equals(reader.getName())){
                                
                                                object.setPrimaryPositionId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","FirstName").equals(reader.getName())){
                                
                                                object.setFirstName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LastName").equals(reader.getName())){
                                
                                                object.setLastName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserSignInId").equals(reader.getName())){
                                
                                                object.setUserSignInId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MiddleName").equals(reader.getName())){
                                
                                                object.setMiddleName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ApprovalCurrency").equals(reader.getName())){
                                
                                                object.setApprovalCurrency(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","FundApprovalLimit").equals(reader.getName())){
                                
                                                object.setFundApprovalLimit(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Alias").equals(reader.getName())){
                                
                                                object.setAlias(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","FullName").equals(reader.getName())){
                                
                                                object.setFullName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CellPhone").equals(reader.getName())){
                                
                                                object.setCellPhone(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","IntegrationId").equals(reader.getName())){
                                
                                                object.setIntegrationId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalAddressId").equals(reader.getName())){
                                
                                                object.setPersonalAddressId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalCountry").equals(reader.getName())){
                                
                                                object.setPersonalCountry(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalCity").equals(reader.getName())){
                                
                                                object.setPersonalCity(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalPostalCode").equals(reader.getName())){
                                
                                                object.setPersonalPostalCode(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalCounty").equals(reader.getName())){
                                
                                                object.setPersonalCounty(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalProvince").equals(reader.getName())){
                                
                                                object.setPersonalProvince(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalState").equals(reader.getName())){
                                
                                                object.setPersonalState(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalStreetAddress").equals(reader.getName())){
                                
                                                object.setPersonalStreetAddress(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalStreetAddress2").equals(reader.getName())){
                                
                                                object.setPersonalStreetAddress2(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ltCustomFoo").equals(reader.getName())){
                                
                                                object.setLtCustomFoo(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByExt").equals(reader.getName())){
                                
                                                object.setCreatedByExt(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedDateExt").equals(reader.getName())){
                                
                                                object.setCreatedDateExt(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Department").equals(reader.getName())){
                                
                                                object.setDepartment(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CurrencyCode").equals(reader.getName())){
                                
                                                object.setCurrencyCode(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","TempPasswordFlag").equals(reader.getName())){
                                
                                                object.setTempPasswordFlag(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ExternalSystemId").equals(reader.getName())){
                                
                                                object.setExternalSystemId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedDateExt").equals(reader.getName())){
                                
                                                object.setModifiedDateExt(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LastLoggedIn").equals(reader.getName())){
                                
                                                object.setLastLoggedIn(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LanguageCode").equals(reader.getName())){
                                
                                                object.setLanguageCode(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Language").equals(reader.getName())){
                                
                                                object.setLanguage(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedByExt").equals(reader.getName())){
                                
                                                object.setModifiedByExt(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LocaleCode").equals(reader.getName())){
                                
                                                object.setLocaleCode(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Locale").equals(reader.getName())){
                                
                                                object.setLocale(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ManagerAlias").equals(reader.getName())){
                                
                                                object.setManagerAlias(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ManagerFullName").equals(reader.getName())){
                                
                                                object.setManagerFullName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Division").equals(reader.getName())){
                                
                                                object.setDivision(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ManagerId").equals(reader.getName())){
                                
                                                object.setManagerId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PrimaryGroup").equals(reader.getName())){
                                
                                                object.setPrimaryGroup(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultCalendarView").equals(reader.getName())){
                                
                                                object.setDefaultCalendarView(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","EnableTeamContactsSync").equals(reader.getName())){
                                
                                                object.setEnableTeamContactsSync(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ShowWelcomePage").equals(reader.getName())){
                                
                                                object.setShowWelcomePage(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PasswordState").equals(reader.getName())){
                                
                                                object.setPasswordState(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MaxNumOfListExport").equals(reader.getName())){
                                
                                                object.setMaxNumOfListExport(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultUserIDType").equals(reader.getName())){
                                
                                                object.setDefaultUserIDType(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","NumberOfSecurityQuestionsToComplete").equals(reader.getName())){
                                
                                                object.setNumberOfSecurityQuestionsToComplete(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","AuthenticationType").equals(reader.getName())){
                                
                                                object.setAuthenticationType(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ExternalIdentifierForSingleSignOn").equals(reader.getName())){
                                
                                                object.setExternalIdentifierForSingleSignOn(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","NeverCall").equals(reader.getName())){
                                
                                                object.setNeverCall(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","NevereMail").equals(reader.getName())){
                                
                                                object.setNevereMail(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","NeverMail").equals(reader.getName())){
                                
                                                object.setNeverMail(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PersonalStreetAddress3").equals(reader.getName())){
                                
                                                object.setPersonalStreetAddress3(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Role").equals(reader.getName())){
                                
                                                object.setRole(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","SecondaryEmail").equals(reader.getName())){
                                
                                                object.setSecondaryEmail(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Market").equals(reader.getName())){
                                
                                                object.setMarket(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","SubMarket").equals(reader.getName())){
                                
                                                object.setSubMarket(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Region").equals(reader.getName())){
                                
                                                object.setRegion(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","SubRegion").equals(reader.getName())){
                                
                                                object.setSubRegion(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BusinessUnit").equals(reader.getName())){
                                
                                                object.setBusinessUnit(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BusinessUnitLevel1").equals(reader.getName())){
                                
                                                object.setBusinessUnitLevel1(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BusinessUnitLevel2").equals(reader.getName())){
                                
                                                object.setBusinessUnitLevel2(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BusinessUnitLevel3").equals(reader.getName())){
                                
                                                object.setBusinessUnitLevel3(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BusinessUnitLevel4").equals(reader.getName())){
                                
                                                object.setBusinessUnitLevel4(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Supervisor").equals(reader.getName())){
                                
                                                object.setSupervisor(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LeadLimit").equals(reader.getName())){
                                
                                                object.setLeadLimit(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MiscellaneousText1").equals(reader.getName())){
                                
                                                object.setMiscellaneousText1(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MiscellaneousText2").equals(reader.getName())){
                                
                                                object.setMiscellaneousText2(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MiscellaneousNumber1").equals(reader.getName())){
                                
                                                object.setMiscellaneousNumber1(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MiscellaneousNumber2").equals(reader.getName())){
                                
                                                object.setMiscellaneousNumber2(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","SalesProcessId").equals(reader.getName())){
                                
                                                object.setSalesProcessId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Company").equals(reader.getName())){
                                
                                                object.setCompany(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CompanySignInID").equals(reader.getName())){
                                
                                                object.setCompanySignInID(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserLoginId").equals(reader.getName())){
                                
                                                object.setUserLoginId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultBookId").equals(reader.getName())){
                                
                                                object.setDefaultBookId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","IncludeSubBooks").equals(reader.getName())){
                                
                                                object.setIncludeSubBooks(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultSearchObject").equals(reader.getName())){
                                
                                                object.setDefaultSearchObject(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PromptToDialFlag").equals(reader.getName())){
                                
                                                object.setPromptToDialFlag(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultBookName").equals(reader.getName())){
                                
                                                object.setDefaultBookName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","HistoricalSubjectAreas").equals(reader.getName())){
                                
                                                object.setHistoricalSubjectAreas(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ReportingSubjectAreas").equals(reader.getName())){
                                
                                                object.setReportingSubjectAreas(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultAnalyticsBookId").equals(reader.getName())){
                                
                                                object.setDefaultAnalyticsBookId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","DefaultAnalyticsBookName").equals(reader.getName())){
                                
                                                object.setDefaultAnalyticsBookName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","EnableAnimateFlag").equals(reader.getName())){
                                
                                                object.setEnableAnimateFlag(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PartnerOrganizationName").equals(reader.getName())){
                                
                                                object.setPartnerOrganizationName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PartnerOrganizationId").equals(reader.getName())){
                                
                                                object.setPartnerOrganizationId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PreviewMode").equals(reader.getName())){
                                
                                                object.setPreviewMode(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","SendCriticalAlertsFlag").equals(reader.getName())){
                                
                                                object.setSendCriticalAlertsFlag(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFirstName").equals(reader.getName())){
                                
                                                object.setCreatedByFirstName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByLastName").equals(reader.getName())){
                                
                                                object.setCreatedByLastName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFullName").equals(reader.getName())){
                                
                                                object.setCreatedByFullName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","RBCanReadAllRecforUser").equals(reader.getName())){
                                
                                                object.setRBCanReadAllRecforUser(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ThemeName").equals(reader.getName())){
                                
                                                object.setThemeName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","HUDMode").equals(reader.getName())){
                                
                                                object.setHUDMode(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","SalesProcessName").equals(reader.getName())){
                                
                                                object.setSalesProcessName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","WorkFax").equals(reader.getName())){
                                
                                                object.setWorkFax(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Status").equals(reader.getName())){
                                
                                                object.setStatus(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","PhoneNumber").equals(reader.getName())){
                                
                                                object.setPhoneNumber(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","MrMrs").equals(reader.getName())){
                                
                                                object.setMrMrs(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","JobTitle").equals(reader.getName())){
                                
                                                object.setJobTitle(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","EMailAddr").equals(reader.getName())){
                                
                                                object.setEMailAddr(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","RelatedInfoFormat").equals(reader.getName())){
                                
                                                object.setRelatedInfoFormat(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","RoleName").equals(reader.getName())){
                                
                                                object.setRoleName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CommCmplDateFilterTag").equals(reader.getName())){
                                
                                                object.setCommCmplDateFilterTag(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CommInboxDateFilterTag").equals(reader.getName())){
                                
                                                object.setCommInboxDateFilterTag(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserTimeZoneSupportforReportingSubjectAreas").equals(reader.getName())){
                                
                                                object.setUserTimeZoneSupportforReportingSubjectAreas(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFirstName").equals(reader.getName())){
                                
                                                object.setUpdatedByFirstName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByLastName").equals(reader.getName())){
                                
                                                object.setUpdatedByLastName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByUserSignInId").equals(reader.getName())){
                                
                                                object.setUpdatedByUserSignInId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByAlias").equals(reader.getName())){
                                
                                                object.setUpdatedByAlias(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFullName").equals(reader.getName())){
                                
                                                object.setUpdatedByFullName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByIntegrationId").equals(reader.getName())){
                                
                                                object.setUpdatedByIntegrationId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByExternalSystemId").equals(reader.getName())){
                                
                                                object.setUpdatedByExternalSystemId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByEMailAddr").equals(reader.getName())){
                                
                                                object.setUpdatedByEMailAddr(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByUserSignInId").equals(reader.getName())){
                                
                                                object.setCreatedByUserSignInId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByAlias").equals(reader.getName())){
                                
                                                object.setCreatedByAlias(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByIntegrationId").equals(reader.getName())){
                                
                                                object.setCreatedByIntegrationId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByExternalSystemId").equals(reader.getName())){
                                
                                                object.setCreatedByExternalSystemId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByEMailAddr").equals(reader.getName())){
                                
                                                object.setCreatedByEMailAddr(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedBy").equals(reader.getName())){
                                
                                                object.setCreatedBy(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedBy").equals(reader.getName())){
                                
                                                object.setModifiedBy(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ListOfDelegatedFromUser").equals(reader.getName())){
                                
                                                object.setListOfDelegatedFromUser(ListOfDelegatedFromUserQuery.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ListOfDelegatedUser").equals(reader.getName())){
                                
                                                object.setListOfDelegatedUser(ListOfDelegatedUserQuery.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ListOfUserDefaultBookPerType").equals(reader.getName())){
                                
                                                object.setListOfUserDefaultBookPerType(ListOfUserDefaultBookPerTypeQuery.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class UserDefaultBookPerTypeQuery
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = UserDefaultBookPerTypeQuery
                Namespace URI = urn:/crmondemand/xml/User/Query
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Query")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ModifiedDate
                        */

                        
                                    protected QueryType localModifiedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedDate(){
                               return localModifiedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedDate
                               */
                               public void setModifiedDate(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedDateTracker = true;
                                       } else {
                                          localModifiedDateTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedDate=param;
                                    

                               }
                            

                        /**
                        * field for CreatedDate
                        */

                        
                                    protected QueryType localCreatedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedDate(){
                               return localCreatedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedDate
                               */
                               public void setCreatedDate(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedDateTracker = true;
                                       } else {
                                          localCreatedDateTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedDate=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedById
                        */

                        
                                    protected QueryType localModifiedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedById(){
                               return localModifiedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedById
                               */
                               public void setModifiedById(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByIdTracker = true;
                                       } else {
                                          localModifiedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedById=param;
                                    

                               }
                            

                        /**
                        * field for CreatedById
                        */

                        
                                    protected QueryType localCreatedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedById(){
                               return localCreatedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedById
                               */
                               public void setCreatedById(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIdTracker = true;
                                       } else {
                                          localCreatedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedById=param;
                                    

                               }
                            

                        /**
                        * field for ModId
                        */

                        
                                    protected QueryType localModId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModId(){
                               return localModId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModId
                               */
                               public void setModId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModIdTracker = true;
                                       } else {
                                          localModIdTracker = false;
                                              
                                       }
                                   
                                            this.localModId=param;
                                    

                               }
                            

                        /**
                        * field for Id
                        */

                        
                                    protected QueryType localId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getId(){
                               return localId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Id
                               */
                               public void setId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIdTracker = true;
                                       } else {
                                          localIdTracker = false;
                                              
                                       }
                                   
                                            this.localId=param;
                                    

                               }
                            

                        /**
                        * field for BookId
                        */

                        
                                    protected QueryType localBookId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBookIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getBookId(){
                               return localBookId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BookId
                               */
                               public void setBookId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBookIdTracker = true;
                                       } else {
                                          localBookIdTracker = false;
                                              
                                       }
                                   
                                            this.localBookId=param;
                                    

                               }
                            

                        /**
                        * field for BookName
                        */

                        
                                    protected QueryType localBookName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBookNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getBookName(){
                               return localBookName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BookName
                               */
                               public void setBookName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBookNameTracker = true;
                                       } else {
                                          localBookNameTracker = false;
                                              
                                       }
                                   
                                            this.localBookName=param;
                                    

                               }
                            

                        /**
                        * field for AccessObjectId
                        */

                        
                                    protected QueryType localAccessObjectId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAccessObjectIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getAccessObjectId(){
                               return localAccessObjectId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AccessObjectId
                               */
                               public void setAccessObjectId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAccessObjectIdTracker = true;
                                       } else {
                                          localAccessObjectIdTracker = false;
                                              
                                       }
                                   
                                            this.localAccessObjectId=param;
                                    

                               }
                            

                        /**
                        * field for AccessObjectName
                        */

                        
                                    protected QueryType localAccessObjectName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAccessObjectNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getAccessObjectName(){
                               return localAccessObjectName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AccessObjectName
                               */
                               public void setAccessObjectName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAccessObjectNameTracker = true;
                                       } else {
                                          localAccessObjectNameTracker = false;
                                              
                                       }
                                   
                                            this.localAccessObjectName=param;
                                    

                               }
                            

                        /**
                        * field for IncludeSubBooks
                        */

                        
                                    protected QueryType localIncludeSubBooks ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIncludeSubBooksTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getIncludeSubBooks(){
                               return localIncludeSubBooks;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IncludeSubBooks
                               */
                               public void setIncludeSubBooks(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIncludeSubBooksTracker = true;
                                       } else {
                                          localIncludeSubBooksTracker = false;
                                              
                                       }
                                   
                                            this.localIncludeSubBooks=param;
                                    

                               }
                            

                        /**
                        * field for BookDescription
                        */

                        
                                    protected QueryType localBookDescription ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBookDescriptionTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getBookDescription(){
                               return localBookDescription;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BookDescription
                               */
                               public void setBookDescription(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBookDescriptionTracker = true;
                                       } else {
                                          localBookDescriptionTracker = false;
                                              
                                       }
                                   
                                            this.localBookDescription=param;
                                    

                               }
                            

                        /**
                        * field for ObjectName
                        */

                        
                                    protected QueryType localObjectName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localObjectNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getObjectName(){
                               return localObjectName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ObjectName
                               */
                               public void setObjectName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localObjectNameTracker = true;
                                       } else {
                                          localObjectNameTracker = false;
                                              
                                       }
                                   
                                            this.localObjectName=param;
                                    

                               }
                            

                        /**
                        * field for BookExternalSystemId
                        */

                        
                                    protected QueryType localBookExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBookExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getBookExternalSystemId(){
                               return localBookExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BookExternalSystemId
                               */
                               public void setBookExternalSystemId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localBookExternalSystemIdTracker = true;
                                       } else {
                                          localBookExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localBookExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFirstName
                        */

                        
                                    protected QueryType localUpdatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByFirstName(){
                               return localUpdatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFirstName
                               */
                               public void setUpdatedByFirstName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFirstNameTracker = true;
                                       } else {
                                          localUpdatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByLastName
                        */

                        
                                    protected QueryType localUpdatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByLastName(){
                               return localUpdatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByLastName
                               */
                               public void setUpdatedByLastName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByLastNameTracker = true;
                                       } else {
                                          localUpdatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByUserSignInId
                        */

                        
                                    protected QueryType localUpdatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByUserSignInId(){
                               return localUpdatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByUserSignInId
                               */
                               public void setUpdatedByUserSignInId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByUserSignInIdTracker = true;
                                       } else {
                                          localUpdatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByAlias
                        */

                        
                                    protected QueryType localUpdatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByAlias(){
                               return localUpdatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByAlias
                               */
                               public void setUpdatedByAlias(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByAliasTracker = true;
                                       } else {
                                          localUpdatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFullName
                        */

                        
                                    protected QueryType localUpdatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByFullName(){
                               return localUpdatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFullName
                               */
                               public void setUpdatedByFullName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFullNameTracker = true;
                                       } else {
                                          localUpdatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByIntegrationId
                        */

                        
                                    protected QueryType localUpdatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByIntegrationId(){
                               return localUpdatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByIntegrationId
                               */
                               public void setUpdatedByIntegrationId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByIntegrationIdTracker = true;
                                       } else {
                                          localUpdatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByExternalSystemId
                        */

                        
                                    protected QueryType localUpdatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByExternalSystemId(){
                               return localUpdatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByExternalSystemId
                               */
                               public void setUpdatedByExternalSystemId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByExternalSystemIdTracker = true;
                                       } else {
                                          localUpdatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByEMailAddr
                        */

                        
                                    protected QueryType localUpdatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByEMailAddr(){
                               return localUpdatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByEMailAddr
                               */
                               public void setUpdatedByEMailAddr(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByEMailAddrTracker = true;
                                       } else {
                                          localUpdatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFirstName
                        */

                        
                                    protected QueryType localCreatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByFirstName(){
                               return localCreatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFirstName
                               */
                               public void setCreatedByFirstName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFirstNameTracker = true;
                                       } else {
                                          localCreatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByLastName
                        */

                        
                                    protected QueryType localCreatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByLastName(){
                               return localCreatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByLastName
                               */
                               public void setCreatedByLastName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByLastNameTracker = true;
                                       } else {
                                          localCreatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByUserSignInId
                        */

                        
                                    protected QueryType localCreatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByUserSignInId(){
                               return localCreatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByUserSignInId
                               */
                               public void setCreatedByUserSignInId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByUserSignInIdTracker = true;
                                       } else {
                                          localCreatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByAlias
                        */

                        
                                    protected QueryType localCreatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByAlias(){
                               return localCreatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByAlias
                               */
                               public void setCreatedByAlias(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByAliasTracker = true;
                                       } else {
                                          localCreatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFullName
                        */

                        
                                    protected QueryType localCreatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByFullName(){
                               return localCreatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFullName
                               */
                               public void setCreatedByFullName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFullNameTracker = true;
                                       } else {
                                          localCreatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByIntegrationId
                        */

                        
                                    protected QueryType localCreatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByIntegrationId(){
                               return localCreatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByIntegrationId
                               */
                               public void setCreatedByIntegrationId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIntegrationIdTracker = true;
                                       } else {
                                          localCreatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByExternalSystemId
                        */

                        
                                    protected QueryType localCreatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByExternalSystemId(){
                               return localCreatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByExternalSystemId
                               */
                               public void setCreatedByExternalSystemId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByExternalSystemIdTracker = true;
                                       } else {
                                          localCreatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByEMailAddr
                        */

                        
                                    protected QueryType localCreatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByEMailAddr(){
                               return localCreatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByEMailAddr
                               */
                               public void setCreatedByEMailAddr(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByEMailAddrTracker = true;
                                       } else {
                                          localCreatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedBy
                        */

                        
                                    protected QueryType localCreatedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedBy(){
                               return localCreatedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedBy
                               */
                               public void setCreatedBy(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByTracker = true;
                                       } else {
                                          localCreatedByTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedBy=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedBy
                        */

                        
                                    protected QueryType localModifiedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedBy(){
                               return localModifiedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedBy
                               */
                               public void setModifiedBy(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByTracker = true;
                                       } else {
                                          localModifiedByTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedBy=param;
                                    

                               }
                            

                        /**
                        * field for Searchspec
                        * This was an Attribute!
                        */

                        
                                    protected java.lang.String localSearchspec ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSearchspec(){
                               return localSearchspec;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Searchspec
                               */
                               public void setSearchspec(java.lang.String param){
                            
                                            this.localSearchspec=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UserDefaultBookPerTypeQuery.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Query");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":UserDefaultBookPerTypeQuery",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "UserDefaultBookPerTypeQuery",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localSearchspec != null){
                                        
                                                writeAttribute("",
                                                         "searchspec",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSearchspec), xmlWriter);

                                            
                                      }
                                     if (localModifiedDateTracker){
                                            if (localModifiedDate==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                            }
                                           localModifiedDate.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedDate"),
                                               factory,xmlWriter);
                                        } if (localCreatedDateTracker){
                                            if (localCreatedDate==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                            }
                                           localCreatedDate.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedDate"),
                                               factory,xmlWriter);
                                        } if (localModifiedByIdTracker){
                                            if (localModifiedById==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                            }
                                           localModifiedById.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedById"),
                                               factory,xmlWriter);
                                        } if (localCreatedByIdTracker){
                                            if (localCreatedById==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                            }
                                           localCreatedById.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedById"),
                                               factory,xmlWriter);
                                        } if (localModIdTracker){
                                            if (localModId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModId cannot be null!!");
                                            }
                                           localModId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModId"),
                                               factory,xmlWriter);
                                        } if (localIdTracker){
                                            if (localId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                            }
                                           localId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Id"),
                                               factory,xmlWriter);
                                        } if (localBookIdTracker){
                                            if (localBookId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("BookId cannot be null!!");
                                            }
                                           localBookId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BookId"),
                                               factory,xmlWriter);
                                        } if (localBookNameTracker){
                                            if (localBookName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("BookName cannot be null!!");
                                            }
                                           localBookName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BookName"),
                                               factory,xmlWriter);
                                        } if (localAccessObjectIdTracker){
                                            if (localAccessObjectId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("AccessObjectId cannot be null!!");
                                            }
                                           localAccessObjectId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","AccessObjectId"),
                                               factory,xmlWriter);
                                        } if (localAccessObjectNameTracker){
                                            if (localAccessObjectName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("AccessObjectName cannot be null!!");
                                            }
                                           localAccessObjectName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","AccessObjectName"),
                                               factory,xmlWriter);
                                        } if (localIncludeSubBooksTracker){
                                            if (localIncludeSubBooks==null){
                                                 throw new org.apache.axis2.databinding.ADBException("IncludeSubBooks cannot be null!!");
                                            }
                                           localIncludeSubBooks.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","IncludeSubBooks"),
                                               factory,xmlWriter);
                                        } if (localBookDescriptionTracker){
                                            if (localBookDescription==null){
                                                 throw new org.apache.axis2.databinding.ADBException("BookDescription cannot be null!!");
                                            }
                                           localBookDescription.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BookDescription"),
                                               factory,xmlWriter);
                                        } if (localObjectNameTracker){
                                            if (localObjectName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ObjectName cannot be null!!");
                                            }
                                           localObjectName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ObjectName"),
                                               factory,xmlWriter);
                                        } if (localBookExternalSystemIdTracker){
                                            if (localBookExternalSystemId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("BookExternalSystemId cannot be null!!");
                                            }
                                           localBookExternalSystemId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BookExternalSystemId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByFirstNameTracker){
                                            if (localUpdatedByFirstName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                            }
                                           localUpdatedByFirstName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFirstName"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByLastNameTracker){
                                            if (localUpdatedByLastName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                            }
                                           localUpdatedByLastName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByLastName"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByUserSignInIdTracker){
                                            if (localUpdatedByUserSignInId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                            }
                                           localUpdatedByUserSignInId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByUserSignInId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByAliasTracker){
                                            if (localUpdatedByAlias==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                            }
                                           localUpdatedByAlias.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByAlias"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByFullNameTracker){
                                            if (localUpdatedByFullName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                            }
                                           localUpdatedByFullName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFullName"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByIntegrationIdTracker){
                                            if (localUpdatedByIntegrationId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                            }
                                           localUpdatedByIntegrationId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByIntegrationId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByExternalSystemIdTracker){
                                            if (localUpdatedByExternalSystemId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                            }
                                           localUpdatedByExternalSystemId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByExternalSystemId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByEMailAddrTracker){
                                            if (localUpdatedByEMailAddr==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                            }
                                           localUpdatedByEMailAddr.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByEMailAddr"),
                                               factory,xmlWriter);
                                        } if (localCreatedByFirstNameTracker){
                                            if (localCreatedByFirstName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                            }
                                           localCreatedByFirstName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFirstName"),
                                               factory,xmlWriter);
                                        } if (localCreatedByLastNameTracker){
                                            if (localCreatedByLastName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                            }
                                           localCreatedByLastName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByLastName"),
                                               factory,xmlWriter);
                                        } if (localCreatedByUserSignInIdTracker){
                                            if (localCreatedByUserSignInId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                            }
                                           localCreatedByUserSignInId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByUserSignInId"),
                                               factory,xmlWriter);
                                        } if (localCreatedByAliasTracker){
                                            if (localCreatedByAlias==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                            }
                                           localCreatedByAlias.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByAlias"),
                                               factory,xmlWriter);
                                        } if (localCreatedByFullNameTracker){
                                            if (localCreatedByFullName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                            }
                                           localCreatedByFullName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFullName"),
                                               factory,xmlWriter);
                                        } if (localCreatedByIntegrationIdTracker){
                                            if (localCreatedByIntegrationId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                            }
                                           localCreatedByIntegrationId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByIntegrationId"),
                                               factory,xmlWriter);
                                        } if (localCreatedByExternalSystemIdTracker){
                                            if (localCreatedByExternalSystemId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                            }
                                           localCreatedByExternalSystemId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByExternalSystemId"),
                                               factory,xmlWriter);
                                        } if (localCreatedByEMailAddrTracker){
                                            if (localCreatedByEMailAddr==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                            }
                                           localCreatedByEMailAddr.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByEMailAddr"),
                                               factory,xmlWriter);
                                        } if (localCreatedByTracker){
                                            if (localCreatedBy==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                            }
                                           localCreatedBy.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedBy"),
                                               factory,xmlWriter);
                                        } if (localModifiedByTracker){
                                            if (localModifiedBy==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                            }
                                           localModifiedBy.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedBy"),
                                               factory,xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localModifiedDateTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedDate"));
                            
                            
                                    if (localModifiedDate==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                    }
                                    elementList.add(localModifiedDate);
                                } if (localCreatedDateTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedDate"));
                            
                            
                                    if (localCreatedDate==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                    }
                                    elementList.add(localCreatedDate);
                                } if (localModifiedByIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedById"));
                            
                            
                                    if (localModifiedById==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                    }
                                    elementList.add(localModifiedById);
                                } if (localCreatedByIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedById"));
                            
                            
                                    if (localCreatedById==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                    }
                                    elementList.add(localCreatedById);
                                } if (localModIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModId"));
                            
                            
                                    if (localModId==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModId cannot be null!!");
                                    }
                                    elementList.add(localModId);
                                } if (localIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Id"));
                            
                            
                                    if (localId==null){
                                         throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                    }
                                    elementList.add(localId);
                                } if (localBookIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "BookId"));
                            
                            
                                    if (localBookId==null){
                                         throw new org.apache.axis2.databinding.ADBException("BookId cannot be null!!");
                                    }
                                    elementList.add(localBookId);
                                } if (localBookNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "BookName"));
                            
                            
                                    if (localBookName==null){
                                         throw new org.apache.axis2.databinding.ADBException("BookName cannot be null!!");
                                    }
                                    elementList.add(localBookName);
                                } if (localAccessObjectIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "AccessObjectId"));
                            
                            
                                    if (localAccessObjectId==null){
                                         throw new org.apache.axis2.databinding.ADBException("AccessObjectId cannot be null!!");
                                    }
                                    elementList.add(localAccessObjectId);
                                } if (localAccessObjectNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "AccessObjectName"));
                            
                            
                                    if (localAccessObjectName==null){
                                         throw new org.apache.axis2.databinding.ADBException("AccessObjectName cannot be null!!");
                                    }
                                    elementList.add(localAccessObjectName);
                                } if (localIncludeSubBooksTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "IncludeSubBooks"));
                            
                            
                                    if (localIncludeSubBooks==null){
                                         throw new org.apache.axis2.databinding.ADBException("IncludeSubBooks cannot be null!!");
                                    }
                                    elementList.add(localIncludeSubBooks);
                                } if (localBookDescriptionTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "BookDescription"));
                            
                            
                                    if (localBookDescription==null){
                                         throw new org.apache.axis2.databinding.ADBException("BookDescription cannot be null!!");
                                    }
                                    elementList.add(localBookDescription);
                                } if (localObjectNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ObjectName"));
                            
                            
                                    if (localObjectName==null){
                                         throw new org.apache.axis2.databinding.ADBException("ObjectName cannot be null!!");
                                    }
                                    elementList.add(localObjectName);
                                } if (localBookExternalSystemIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "BookExternalSystemId"));
                            
                            
                                    if (localBookExternalSystemId==null){
                                         throw new org.apache.axis2.databinding.ADBException("BookExternalSystemId cannot be null!!");
                                    }
                                    elementList.add(localBookExternalSystemId);
                                } if (localUpdatedByFirstNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByFirstName"));
                            
                            
                                    if (localUpdatedByFirstName==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByFirstName);
                                } if (localUpdatedByLastNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByLastName"));
                            
                            
                                    if (localUpdatedByLastName==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByLastName);
                                } if (localUpdatedByUserSignInIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByUserSignInId"));
                            
                            
                                    if (localUpdatedByUserSignInId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByUserSignInId);
                                } if (localUpdatedByAliasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByAlias"));
                            
                            
                                    if (localUpdatedByAlias==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByAlias);
                                } if (localUpdatedByFullNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByFullName"));
                            
                            
                                    if (localUpdatedByFullName==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByFullName);
                                } if (localUpdatedByIntegrationIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByIntegrationId"));
                            
                            
                                    if (localUpdatedByIntegrationId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByIntegrationId);
                                } if (localUpdatedByExternalSystemIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByExternalSystemId"));
                            
                            
                                    if (localUpdatedByExternalSystemId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByExternalSystemId);
                                } if (localUpdatedByEMailAddrTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByEMailAddr"));
                            
                            
                                    if (localUpdatedByEMailAddr==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByEMailAddr);
                                } if (localCreatedByFirstNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByFirstName"));
                            
                            
                                    if (localCreatedByFirstName==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                    }
                                    elementList.add(localCreatedByFirstName);
                                } if (localCreatedByLastNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByLastName"));
                            
                            
                                    if (localCreatedByLastName==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                    }
                                    elementList.add(localCreatedByLastName);
                                } if (localCreatedByUserSignInIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByUserSignInId"));
                            
                            
                                    if (localCreatedByUserSignInId==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                    }
                                    elementList.add(localCreatedByUserSignInId);
                                } if (localCreatedByAliasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByAlias"));
                            
                            
                                    if (localCreatedByAlias==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                    }
                                    elementList.add(localCreatedByAlias);
                                } if (localCreatedByFullNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByFullName"));
                            
                            
                                    if (localCreatedByFullName==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                    }
                                    elementList.add(localCreatedByFullName);
                                } if (localCreatedByIntegrationIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByIntegrationId"));
                            
                            
                                    if (localCreatedByIntegrationId==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                    }
                                    elementList.add(localCreatedByIntegrationId);
                                } if (localCreatedByExternalSystemIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByExternalSystemId"));
                            
                            
                                    if (localCreatedByExternalSystemId==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                    }
                                    elementList.add(localCreatedByExternalSystemId);
                                } if (localCreatedByEMailAddrTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByEMailAddr"));
                            
                            
                                    if (localCreatedByEMailAddr==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                    }
                                    elementList.add(localCreatedByEMailAddr);
                                } if (localCreatedByTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedBy"));
                            
                            
                                    if (localCreatedBy==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                    }
                                    elementList.add(localCreatedBy);
                                } if (localModifiedByTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedBy"));
                            
                            
                                    if (localModifiedBy==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                    }
                                    elementList.add(localModifiedBy);
                                }
                            attribList.add(
                            new javax.xml.namespace.QName("","searchspec"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSearchspec));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UserDefaultBookPerTypeQuery parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UserDefaultBookPerTypeQuery object =
                new UserDefaultBookPerTypeQuery();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"UserDefaultBookPerTypeQuery".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UserDefaultBookPerTypeQuery)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "searchspec"
                    java.lang.String tempAttribSearchspec =
                        
                                reader.getAttributeValue(null,"searchspec");
                            
                   if (tempAttribSearchspec!=null){
                         java.lang.String content = tempAttribSearchspec;
                        
                                                 object.setSearchspec(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribSearchspec));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("searchspec");
                    
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedDate").equals(reader.getName())){
                                
                                                object.setModifiedDate(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedDate").equals(reader.getName())){
                                
                                                object.setCreatedDate(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedById").equals(reader.getName())){
                                
                                                object.setModifiedById(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedById").equals(reader.getName())){
                                
                                                object.setCreatedById(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModId").equals(reader.getName())){
                                
                                                object.setModId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Id").equals(reader.getName())){
                                
                                                object.setId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BookId").equals(reader.getName())){
                                
                                                object.setBookId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BookName").equals(reader.getName())){
                                
                                                object.setBookName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","AccessObjectId").equals(reader.getName())){
                                
                                                object.setAccessObjectId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","AccessObjectName").equals(reader.getName())){
                                
                                                object.setAccessObjectName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","IncludeSubBooks").equals(reader.getName())){
                                
                                                object.setIncludeSubBooks(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BookDescription").equals(reader.getName())){
                                
                                                object.setBookDescription(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ObjectName").equals(reader.getName())){
                                
                                                object.setObjectName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","BookExternalSystemId").equals(reader.getName())){
                                
                                                object.setBookExternalSystemId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFirstName").equals(reader.getName())){
                                
                                                object.setUpdatedByFirstName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByLastName").equals(reader.getName())){
                                
                                                object.setUpdatedByLastName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByUserSignInId").equals(reader.getName())){
                                
                                                object.setUpdatedByUserSignInId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByAlias").equals(reader.getName())){
                                
                                                object.setUpdatedByAlias(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFullName").equals(reader.getName())){
                                
                                                object.setUpdatedByFullName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByIntegrationId").equals(reader.getName())){
                                
                                                object.setUpdatedByIntegrationId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByExternalSystemId").equals(reader.getName())){
                                
                                                object.setUpdatedByExternalSystemId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByEMailAddr").equals(reader.getName())){
                                
                                                object.setUpdatedByEMailAddr(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFirstName").equals(reader.getName())){
                                
                                                object.setCreatedByFirstName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByLastName").equals(reader.getName())){
                                
                                                object.setCreatedByLastName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByUserSignInId").equals(reader.getName())){
                                
                                                object.setCreatedByUserSignInId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByAlias").equals(reader.getName())){
                                
                                                object.setCreatedByAlias(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFullName").equals(reader.getName())){
                                
                                                object.setCreatedByFullName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByIntegrationId").equals(reader.getName())){
                                
                                                object.setCreatedByIntegrationId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByExternalSystemId").equals(reader.getName())){
                                
                                                object.setCreatedByExternalSystemId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByEMailAddr").equals(reader.getName())){
                                
                                                object.setCreatedByEMailAddr(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedBy").equals(reader.getName())){
                                
                                                object.setCreatedBy(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedBy").equals(reader.getName())){
                                
                                                object.setModifiedBy(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ListOfUser
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:/crmondemand/xml/User/Data",
                "ListOfUser",
                "ns1");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Data")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ListOfUser
                        */

                        
                                    protected ListOfUserData localListOfUser ;
                                

                           /**
                           * Auto generated getter method
                           * @return ListOfUserData
                           */
                           public  ListOfUserData getListOfUser(){
                               return localListOfUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfUser
                               */
                               public void setListOfUser(ListOfUserData param){
                            
                                            this.localListOfUser=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ListOfUser.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                                 if (localListOfUser==null){
                                   throw new org.apache.axis2.databinding.ADBException("Property cannot be null!");
                                 }
                                 localListOfUser.serialize(MY_QNAME,factory,xmlWriter);
                            

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                return localListOfUser.getPullParser(MY_QNAME);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ListOfUser parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ListOfUser object =
                new ListOfUser();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                    
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser").equals(reader.getName())){
                                
                                                object.setListOfUser(ListOfUserData.Factory.parse(reader));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class ListOfUserQuery
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ListOfUserQuery
                Namespace URI = urn:/crmondemand/xml/User/Query
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Query")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for User
                        */

                        
                                    protected UserQuery localUser ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return UserQuery
                           */
                           public  UserQuery getUser(){
                               return localUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param User
                               */
                               public void setUser(UserQuery param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserTracker = true;
                                       } else {
                                          localUserTracker = false;
                                              
                                       }
                                   
                                            this.localUser=param;
                                    

                               }
                            

                        /**
                        * field for Pagesize
                        * This was an Attribute!
                        */

                        
                                    protected java.math.BigInteger localPagesize ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigInteger
                           */
                           public  java.math.BigInteger getPagesize(){
                               return localPagesize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Pagesize
                               */
                               public void setPagesize(java.math.BigInteger param){
                            
                                            this.localPagesize=param;
                                    

                               }
                            

                        /**
                        * field for Startrownum
                        * This was an Attribute!
                        */

                        
                                    protected java.math.BigInteger localStartrownum ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.math.BigInteger
                           */
                           public  java.math.BigInteger getStartrownum(){
                               return localStartrownum;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Startrownum
                               */
                               public void setStartrownum(java.math.BigInteger param){
                            
                                            this.localStartrownum=param;
                                    

                               }
                            

                        /**
                        * field for Recordcountneeded
                        * This was an Attribute!
                        */

                        
                                    protected boolean localRecordcountneeded ;
                                

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getRecordcountneeded(){
                               return localRecordcountneeded;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Recordcountneeded
                               */
                               public void setRecordcountneeded(boolean param){
                            
                                            this.localRecordcountneeded=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       ListOfUserQuery.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Query");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ListOfUserQuery",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ListOfUserQuery",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localPagesize != null){
                                        
                                                writeAttribute("",
                                                         "pagesize",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPagesize), xmlWriter);

                                            
                                      }
                                    
                                            if (localStartrownum != null){
                                        
                                                writeAttribute("",
                                                         "startrownum",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartrownum), xmlWriter);

                                            
                                      }
                                    
                                                   if (true) {
                                               
                                                writeAttribute("",
                                                         "recordcountneeded",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcountneeded), xmlWriter);

                                            
                                      }
                                     if (localUserTracker){
                                            if (localUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("User cannot be null!!");
                                            }
                                           localUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","User"),
                                               factory,xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localUserTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "User"));
                            
                            
                                    if (localUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("User cannot be null!!");
                                    }
                                    elementList.add(localUser);
                                }
                            attribList.add(
                            new javax.xml.namespace.QName("","pagesize"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPagesize));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","startrownum"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartrownum));
                                
                            attribList.add(
                            new javax.xml.namespace.QName("","recordcountneeded"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordcountneeded));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ListOfUserQuery parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ListOfUserQuery object =
                new ListOfUserQuery();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ListOfUserQuery".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ListOfUserQuery)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "pagesize"
                    java.lang.String tempAttribPagesize =
                        
                                reader.getAttributeValue(null,"pagesize");
                            
                   if (tempAttribPagesize!=null){
                         java.lang.String content = tempAttribPagesize;
                        
                                                 object.setPagesize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(tempAttribPagesize));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("pagesize");
                    
                    // handle attribute "startrownum"
                    java.lang.String tempAttribStartrownum =
                        
                                reader.getAttributeValue(null,"startrownum");
                            
                   if (tempAttribStartrownum!=null){
                         java.lang.String content = tempAttribStartrownum;
                        
                                                 object.setStartrownum(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(tempAttribStartrownum));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("startrownum");
                    
                    // handle attribute "recordcountneeded"
                    java.lang.String tempAttribRecordcountneeded =
                        
                                reader.getAttributeValue(null,"recordcountneeded");
                            
                   if (tempAttribRecordcountneeded!=null){
                         java.lang.String content = tempAttribRecordcountneeded;
                        
                                                 object.setRecordcountneeded(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribRecordcountneeded));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("recordcountneeded");
                    
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","User").equals(reader.getName())){
                                
                                                object.setUser(UserQuery.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class DelegatedUserQuery
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = DelegatedUserQuery
                Namespace URI = urn:/crmondemand/xml/User/Query
                Namespace Prefix = ns2
                */
            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:/crmondemand/xml/User/Query")){
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ModifiedDate
                        */

                        
                                    protected QueryType localModifiedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedDate(){
                               return localModifiedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedDate
                               */
                               public void setModifiedDate(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedDateTracker = true;
                                       } else {
                                          localModifiedDateTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedDate=param;
                                    

                               }
                            

                        /**
                        * field for CreatedDate
                        */

                        
                                    protected QueryType localCreatedDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedDate(){
                               return localCreatedDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedDate
                               */
                               public void setCreatedDate(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedDateTracker = true;
                                       } else {
                                          localCreatedDateTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedDate=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedById
                        */

                        
                                    protected QueryType localModifiedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedById(){
                               return localModifiedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedById
                               */
                               public void setModifiedById(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByIdTracker = true;
                                       } else {
                                          localModifiedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedById=param;
                                    

                               }
                            

                        /**
                        * field for CreatedById
                        */

                        
                                    protected QueryType localCreatedById ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedById(){
                               return localCreatedById;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedById
                               */
                               public void setCreatedById(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIdTracker = true;
                                       } else {
                                          localCreatedByIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedById=param;
                                    

                               }
                            

                        /**
                        * field for ModId
                        */

                        
                                    protected QueryType localModId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModId(){
                               return localModId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModId
                               */
                               public void setModId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModIdTracker = true;
                                       } else {
                                          localModIdTracker = false;
                                              
                                       }
                                   
                                            this.localModId=param;
                                    

                               }
                            

                        /**
                        * field for Id
                        */

                        
                                    protected QueryType localId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getId(){
                               return localId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Id
                               */
                               public void setId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localIdTracker = true;
                                       } else {
                                          localIdTracker = false;
                                              
                                       }
                                   
                                            this.localId=param;
                                    

                               }
                            

                        /**
                        * field for UserId
                        */

                        
                                    protected QueryType localUserId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUserId(){
                               return localUserId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserId
                               */
                               public void setUserId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserIdTracker = true;
                                       } else {
                                          localUserIdTracker = false;
                                              
                                       }
                                   
                                            this.localUserId=param;
                                    

                               }
                            

                        /**
                        * field for LastName
                        */

                        
                                    protected QueryType localLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getLastName(){
                               return localLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LastName
                               */
                               public void setLastName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localLastNameTracker = true;
                                       } else {
                                          localLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localLastName=param;
                                    

                               }
                            

                        /**
                        * field for FirstName
                        */

                        
                                    protected QueryType localFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getFirstName(){
                               return localFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FirstName
                               */
                               public void setFirstName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localFirstNameTracker = true;
                                       } else {
                                          localFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localFirstName=param;
                                    

                               }
                            

                        /**
                        * field for UserRole
                        */

                        
                                    protected QueryType localUserRole ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserRoleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUserRole(){
                               return localUserRole;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserRole
                               */
                               public void setUserRole(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUserRoleTracker = true;
                                       } else {
                                          localUserRoleTracker = false;
                                              
                                       }
                                   
                                            this.localUserRole=param;
                                    

                               }
                            

                        /**
                        * field for Alias
                        */

                        
                                    protected QueryType localAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getAlias(){
                               return localAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Alias
                               */
                               public void setAlias(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localAliasTracker = true;
                                       } else {
                                          localAliasTracker = false;
                                              
                                       }
                                   
                                            this.localAlias=param;
                                    

                               }
                            

                        /**
                        * field for StartDate
                        */

                        
                                    protected QueryType localStartDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartDateTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getStartDate(){
                               return localStartDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartDate
                               */
                               public void setStartDate(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localStartDateTracker = true;
                                       } else {
                                          localStartDateTracker = false;
                                              
                                       }
                                   
                                            this.localStartDate=param;
                                    

                               }
                            

                        /**
                        * field for ExternalSystemId
                        */

                        
                                    protected QueryType localExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getExternalSystemId(){
                               return localExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ExternalSystemId
                               */
                               public void setExternalSystemId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localExternalSystemIdTracker = true;
                                       } else {
                                          localExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for RespId
                        */

                        
                                    protected QueryType localRespId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRespIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getRespId(){
                               return localRespId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RespId
                               */
                               public void setRespId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRespIdTracker = true;
                                       } else {
                                          localRespIdTracker = false;
                                              
                                       }
                                   
                                            this.localRespId=param;
                                    

                               }
                            

                        /**
                        * field for Role
                        */

                        
                                    protected QueryType localRole ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRoleTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getRole(){
                               return localRole;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Role
                               */
                               public void setRole(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localRoleTracker = true;
                                       } else {
                                          localRoleTracker = false;
                                              
                                       }
                                   
                                            this.localRole=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFirstName
                        */

                        
                                    protected QueryType localUpdatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByFirstName(){
                               return localUpdatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFirstName
                               */
                               public void setUpdatedByFirstName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFirstNameTracker = true;
                                       } else {
                                          localUpdatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByLastName
                        */

                        
                                    protected QueryType localUpdatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByLastName(){
                               return localUpdatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByLastName
                               */
                               public void setUpdatedByLastName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByLastNameTracker = true;
                                       } else {
                                          localUpdatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByUserSignInId
                        */

                        
                                    protected QueryType localUpdatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByUserSignInId(){
                               return localUpdatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByUserSignInId
                               */
                               public void setUpdatedByUserSignInId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByUserSignInIdTracker = true;
                                       } else {
                                          localUpdatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByAlias
                        */

                        
                                    protected QueryType localUpdatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByAlias(){
                               return localUpdatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByAlias
                               */
                               public void setUpdatedByAlias(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByAliasTracker = true;
                                       } else {
                                          localUpdatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByFullName
                        */

                        
                                    protected QueryType localUpdatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByFullName(){
                               return localUpdatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByFullName
                               */
                               public void setUpdatedByFullName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByFullNameTracker = true;
                                       } else {
                                          localUpdatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByIntegrationId
                        */

                        
                                    protected QueryType localUpdatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByIntegrationId(){
                               return localUpdatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByIntegrationId
                               */
                               public void setUpdatedByIntegrationId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByIntegrationIdTracker = true;
                                       } else {
                                          localUpdatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByExternalSystemId
                        */

                        
                                    protected QueryType localUpdatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByExternalSystemId(){
                               return localUpdatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByExternalSystemId
                               */
                               public void setUpdatedByExternalSystemId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByExternalSystemIdTracker = true;
                                       } else {
                                          localUpdatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for UpdatedByEMailAddr
                        */

                        
                                    protected QueryType localUpdatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getUpdatedByEMailAddr(){
                               return localUpdatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdatedByEMailAddr
                               */
                               public void setUpdatedByEMailAddr(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localUpdatedByEMailAddrTracker = true;
                                       } else {
                                          localUpdatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localUpdatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFirstName
                        */

                        
                                    protected QueryType localCreatedByFirstName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFirstNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByFirstName(){
                               return localCreatedByFirstName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFirstName
                               */
                               public void setCreatedByFirstName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFirstNameTracker = true;
                                       } else {
                                          localCreatedByFirstNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFirstName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByLastName
                        */

                        
                                    protected QueryType localCreatedByLastName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByLastNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByLastName(){
                               return localCreatedByLastName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByLastName
                               */
                               public void setCreatedByLastName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByLastNameTracker = true;
                                       } else {
                                          localCreatedByLastNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByLastName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByUserSignInId
                        */

                        
                                    protected QueryType localCreatedByUserSignInId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByUserSignInIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByUserSignInId(){
                               return localCreatedByUserSignInId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByUserSignInId
                               */
                               public void setCreatedByUserSignInId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByUserSignInIdTracker = true;
                                       } else {
                                          localCreatedByUserSignInIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByUserSignInId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByAlias
                        */

                        
                                    protected QueryType localCreatedByAlias ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByAliasTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByAlias(){
                               return localCreatedByAlias;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByAlias
                               */
                               public void setCreatedByAlias(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByAliasTracker = true;
                                       } else {
                                          localCreatedByAliasTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByAlias=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByFullName
                        */

                        
                                    protected QueryType localCreatedByFullName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByFullNameTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByFullName(){
                               return localCreatedByFullName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByFullName
                               */
                               public void setCreatedByFullName(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByFullNameTracker = true;
                                       } else {
                                          localCreatedByFullNameTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByFullName=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByIntegrationId
                        */

                        
                                    protected QueryType localCreatedByIntegrationId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByIntegrationIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByIntegrationId(){
                               return localCreatedByIntegrationId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByIntegrationId
                               */
                               public void setCreatedByIntegrationId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByIntegrationIdTracker = true;
                                       } else {
                                          localCreatedByIntegrationIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByIntegrationId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByExternalSystemId
                        */

                        
                                    protected QueryType localCreatedByExternalSystemId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByExternalSystemIdTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByExternalSystemId(){
                               return localCreatedByExternalSystemId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByExternalSystemId
                               */
                               public void setCreatedByExternalSystemId(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByExternalSystemIdTracker = true;
                                       } else {
                                          localCreatedByExternalSystemIdTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByExternalSystemId=param;
                                    

                               }
                            

                        /**
                        * field for CreatedByEMailAddr
                        */

                        
                                    protected QueryType localCreatedByEMailAddr ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByEMailAddrTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedByEMailAddr(){
                               return localCreatedByEMailAddr;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedByEMailAddr
                               */
                               public void setCreatedByEMailAddr(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByEMailAddrTracker = true;
                                       } else {
                                          localCreatedByEMailAddrTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedByEMailAddr=param;
                                    

                               }
                            

                        /**
                        * field for CreatedBy
                        */

                        
                                    protected QueryType localCreatedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCreatedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getCreatedBy(){
                               return localCreatedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CreatedBy
                               */
                               public void setCreatedBy(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localCreatedByTracker = true;
                                       } else {
                                          localCreatedByTracker = false;
                                              
                                       }
                                   
                                            this.localCreatedBy=param;
                                    

                               }
                            

                        /**
                        * field for ModifiedBy
                        */

                        
                                    protected QueryType localModifiedBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedByTracker = false ;
                           

                           /**
                           * Auto generated getter method
                           * @return QueryType
                           */
                           public  QueryType getModifiedBy(){
                               return localModifiedBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ModifiedBy
                               */
                               public void setModifiedBy(QueryType param){
                            
                                       if (param != null){
                                          //update the setting tracker
                                          localModifiedByTracker = true;
                                       } else {
                                          localModifiedByTracker = false;
                                              
                                       }
                                   
                                            this.localModifiedBy=param;
                                    

                               }
                            

                        /**
                        * field for Searchspec
                        * This was an Attribute!
                        */

                        
                                    protected java.lang.String localSearchspec ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSearchspec(){
                               return localSearchspec;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Searchspec
                               */
                               public void setSearchspec(java.lang.String param){
                            
                                            this.localSearchspec=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       DelegatedUserQuery.this.serialize(parentQName,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               parentQName,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:/crmondemand/xml/User/Query");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DelegatedUserQuery",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DelegatedUserQuery",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localSearchspec != null){
                                        
                                                writeAttribute("",
                                                         "searchspec",
                                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSearchspec), xmlWriter);

                                            
                                      }
                                     if (localModifiedDateTracker){
                                            if (localModifiedDate==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                            }
                                           localModifiedDate.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedDate"),
                                               factory,xmlWriter);
                                        } if (localCreatedDateTracker){
                                            if (localCreatedDate==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                            }
                                           localCreatedDate.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedDate"),
                                               factory,xmlWriter);
                                        } if (localModifiedByIdTracker){
                                            if (localModifiedById==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                            }
                                           localModifiedById.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedById"),
                                               factory,xmlWriter);
                                        } if (localCreatedByIdTracker){
                                            if (localCreatedById==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                            }
                                           localCreatedById.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedById"),
                                               factory,xmlWriter);
                                        } if (localModIdTracker){
                                            if (localModId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModId cannot be null!!");
                                            }
                                           localModId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModId"),
                                               factory,xmlWriter);
                                        } if (localIdTracker){
                                            if (localId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                            }
                                           localId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Id"),
                                               factory,xmlWriter);
                                        } if (localUserIdTracker){
                                            if (localUserId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UserId cannot be null!!");
                                            }
                                           localUserId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserId"),
                                               factory,xmlWriter);
                                        } if (localLastNameTracker){
                                            if (localLastName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("LastName cannot be null!!");
                                            }
                                           localLastName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LastName"),
                                               factory,xmlWriter);
                                        } if (localFirstNameTracker){
                                            if (localFirstName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FirstName cannot be null!!");
                                            }
                                           localFirstName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","FirstName"),
                                               factory,xmlWriter);
                                        } if (localUserRoleTracker){
                                            if (localUserRole==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UserRole cannot be null!!");
                                            }
                                           localUserRole.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserRole"),
                                               factory,xmlWriter);
                                        } if (localAliasTracker){
                                            if (localAlias==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Alias cannot be null!!");
                                            }
                                           localAlias.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Alias"),
                                               factory,xmlWriter);
                                        } if (localStartDateTracker){
                                            if (localStartDate==null){
                                                 throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                            }
                                           localStartDate.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","StartDate"),
                                               factory,xmlWriter);
                                        } if (localExternalSystemIdTracker){
                                            if (localExternalSystemId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ExternalSystemId cannot be null!!");
                                            }
                                           localExternalSystemId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ExternalSystemId"),
                                               factory,xmlWriter);
                                        } if (localRespIdTracker){
                                            if (localRespId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("RespId cannot be null!!");
                                            }
                                           localRespId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","RespId"),
                                               factory,xmlWriter);
                                        } if (localRoleTracker){
                                            if (localRole==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Role cannot be null!!");
                                            }
                                           localRole.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Role"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByFirstNameTracker){
                                            if (localUpdatedByFirstName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                            }
                                           localUpdatedByFirstName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFirstName"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByLastNameTracker){
                                            if (localUpdatedByLastName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                            }
                                           localUpdatedByLastName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByLastName"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByUserSignInIdTracker){
                                            if (localUpdatedByUserSignInId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                            }
                                           localUpdatedByUserSignInId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByUserSignInId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByAliasTracker){
                                            if (localUpdatedByAlias==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                            }
                                           localUpdatedByAlias.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByAlias"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByFullNameTracker){
                                            if (localUpdatedByFullName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                            }
                                           localUpdatedByFullName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFullName"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByIntegrationIdTracker){
                                            if (localUpdatedByIntegrationId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                            }
                                           localUpdatedByIntegrationId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByIntegrationId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByExternalSystemIdTracker){
                                            if (localUpdatedByExternalSystemId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                            }
                                           localUpdatedByExternalSystemId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByExternalSystemId"),
                                               factory,xmlWriter);
                                        } if (localUpdatedByEMailAddrTracker){
                                            if (localUpdatedByEMailAddr==null){
                                                 throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                            }
                                           localUpdatedByEMailAddr.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByEMailAddr"),
                                               factory,xmlWriter);
                                        } if (localCreatedByFirstNameTracker){
                                            if (localCreatedByFirstName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                            }
                                           localCreatedByFirstName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFirstName"),
                                               factory,xmlWriter);
                                        } if (localCreatedByLastNameTracker){
                                            if (localCreatedByLastName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                            }
                                           localCreatedByLastName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByLastName"),
                                               factory,xmlWriter);
                                        } if (localCreatedByUserSignInIdTracker){
                                            if (localCreatedByUserSignInId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                            }
                                           localCreatedByUserSignInId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByUserSignInId"),
                                               factory,xmlWriter);
                                        } if (localCreatedByAliasTracker){
                                            if (localCreatedByAlias==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                            }
                                           localCreatedByAlias.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByAlias"),
                                               factory,xmlWriter);
                                        } if (localCreatedByFullNameTracker){
                                            if (localCreatedByFullName==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                            }
                                           localCreatedByFullName.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFullName"),
                                               factory,xmlWriter);
                                        } if (localCreatedByIntegrationIdTracker){
                                            if (localCreatedByIntegrationId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                            }
                                           localCreatedByIntegrationId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByIntegrationId"),
                                               factory,xmlWriter);
                                        } if (localCreatedByExternalSystemIdTracker){
                                            if (localCreatedByExternalSystemId==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                            }
                                           localCreatedByExternalSystemId.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByExternalSystemId"),
                                               factory,xmlWriter);
                                        } if (localCreatedByEMailAddrTracker){
                                            if (localCreatedByEMailAddr==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                            }
                                           localCreatedByEMailAddr.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByEMailAddr"),
                                               factory,xmlWriter);
                                        } if (localCreatedByTracker){
                                            if (localCreatedBy==null){
                                                 throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                            }
                                           localCreatedBy.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedBy"),
                                               factory,xmlWriter);
                                        } if (localModifiedByTracker){
                                            if (localModifiedBy==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                            }
                                           localModifiedBy.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedBy"),
                                               factory,xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localModifiedDateTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedDate"));
                            
                            
                                    if (localModifiedDate==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedDate cannot be null!!");
                                    }
                                    elementList.add(localModifiedDate);
                                } if (localCreatedDateTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedDate"));
                            
                            
                                    if (localCreatedDate==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedDate cannot be null!!");
                                    }
                                    elementList.add(localCreatedDate);
                                } if (localModifiedByIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedById"));
                            
                            
                                    if (localModifiedById==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedById cannot be null!!");
                                    }
                                    elementList.add(localModifiedById);
                                } if (localCreatedByIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedById"));
                            
                            
                                    if (localCreatedById==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedById cannot be null!!");
                                    }
                                    elementList.add(localCreatedById);
                                } if (localModIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModId"));
                            
                            
                                    if (localModId==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModId cannot be null!!");
                                    }
                                    elementList.add(localModId);
                                } if (localIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Id"));
                            
                            
                                    if (localId==null){
                                         throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                    }
                                    elementList.add(localId);
                                } if (localUserIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UserId"));
                            
                            
                                    if (localUserId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UserId cannot be null!!");
                                    }
                                    elementList.add(localUserId);
                                } if (localLastNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "LastName"));
                            
                            
                                    if (localLastName==null){
                                         throw new org.apache.axis2.databinding.ADBException("LastName cannot be null!!");
                                    }
                                    elementList.add(localLastName);
                                } if (localFirstNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "FirstName"));
                            
                            
                                    if (localFirstName==null){
                                         throw new org.apache.axis2.databinding.ADBException("FirstName cannot be null!!");
                                    }
                                    elementList.add(localFirstName);
                                } if (localUserRoleTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UserRole"));
                            
                            
                                    if (localUserRole==null){
                                         throw new org.apache.axis2.databinding.ADBException("UserRole cannot be null!!");
                                    }
                                    elementList.add(localUserRole);
                                } if (localAliasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Alias"));
                            
                            
                                    if (localAlias==null){
                                         throw new org.apache.axis2.databinding.ADBException("Alias cannot be null!!");
                                    }
                                    elementList.add(localAlias);
                                } if (localStartDateTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "StartDate"));
                            
                            
                                    if (localStartDate==null){
                                         throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                    }
                                    elementList.add(localStartDate);
                                } if (localExternalSystemIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ExternalSystemId"));
                            
                            
                                    if (localExternalSystemId==null){
                                         throw new org.apache.axis2.databinding.ADBException("ExternalSystemId cannot be null!!");
                                    }
                                    elementList.add(localExternalSystemId);
                                } if (localRespIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "RespId"));
                            
                            
                                    if (localRespId==null){
                                         throw new org.apache.axis2.databinding.ADBException("RespId cannot be null!!");
                                    }
                                    elementList.add(localRespId);
                                } if (localRoleTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "Role"));
                            
                            
                                    if (localRole==null){
                                         throw new org.apache.axis2.databinding.ADBException("Role cannot be null!!");
                                    }
                                    elementList.add(localRole);
                                } if (localUpdatedByFirstNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByFirstName"));
                            
                            
                                    if (localUpdatedByFirstName==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByFirstName cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByFirstName);
                                } if (localUpdatedByLastNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByLastName"));
                            
                            
                                    if (localUpdatedByLastName==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByLastName cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByLastName);
                                } if (localUpdatedByUserSignInIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByUserSignInId"));
                            
                            
                                    if (localUpdatedByUserSignInId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByUserSignInId cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByUserSignInId);
                                } if (localUpdatedByAliasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByAlias"));
                            
                            
                                    if (localUpdatedByAlias==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByAlias cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByAlias);
                                } if (localUpdatedByFullNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByFullName"));
                            
                            
                                    if (localUpdatedByFullName==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByFullName cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByFullName);
                                } if (localUpdatedByIntegrationIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByIntegrationId"));
                            
                            
                                    if (localUpdatedByIntegrationId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByIntegrationId cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByIntegrationId);
                                } if (localUpdatedByExternalSystemIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByExternalSystemId"));
                            
                            
                                    if (localUpdatedByExternalSystemId==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByExternalSystemId cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByExternalSystemId);
                                } if (localUpdatedByEMailAddrTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "UpdatedByEMailAddr"));
                            
                            
                                    if (localUpdatedByEMailAddr==null){
                                         throw new org.apache.axis2.databinding.ADBException("UpdatedByEMailAddr cannot be null!!");
                                    }
                                    elementList.add(localUpdatedByEMailAddr);
                                } if (localCreatedByFirstNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByFirstName"));
                            
                            
                                    if (localCreatedByFirstName==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByFirstName cannot be null!!");
                                    }
                                    elementList.add(localCreatedByFirstName);
                                } if (localCreatedByLastNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByLastName"));
                            
                            
                                    if (localCreatedByLastName==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByLastName cannot be null!!");
                                    }
                                    elementList.add(localCreatedByLastName);
                                } if (localCreatedByUserSignInIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByUserSignInId"));
                            
                            
                                    if (localCreatedByUserSignInId==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByUserSignInId cannot be null!!");
                                    }
                                    elementList.add(localCreatedByUserSignInId);
                                } if (localCreatedByAliasTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByAlias"));
                            
                            
                                    if (localCreatedByAlias==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByAlias cannot be null!!");
                                    }
                                    elementList.add(localCreatedByAlias);
                                } if (localCreatedByFullNameTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByFullName"));
                            
                            
                                    if (localCreatedByFullName==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByFullName cannot be null!!");
                                    }
                                    elementList.add(localCreatedByFullName);
                                } if (localCreatedByIntegrationIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByIntegrationId"));
                            
                            
                                    if (localCreatedByIntegrationId==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByIntegrationId cannot be null!!");
                                    }
                                    elementList.add(localCreatedByIntegrationId);
                                } if (localCreatedByExternalSystemIdTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByExternalSystemId"));
                            
                            
                                    if (localCreatedByExternalSystemId==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByExternalSystemId cannot be null!!");
                                    }
                                    elementList.add(localCreatedByExternalSystemId);
                                } if (localCreatedByEMailAddrTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedByEMailAddr"));
                            
                            
                                    if (localCreatedByEMailAddr==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedByEMailAddr cannot be null!!");
                                    }
                                    elementList.add(localCreatedByEMailAddr);
                                } if (localCreatedByTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "CreatedBy"));
                            
                            
                                    if (localCreatedBy==null){
                                         throw new org.apache.axis2.databinding.ADBException("CreatedBy cannot be null!!");
                                    }
                                    elementList.add(localCreatedBy);
                                } if (localModifiedByTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query",
                                                                      "ModifiedBy"));
                            
                            
                                    if (localModifiedBy==null){
                                         throw new org.apache.axis2.databinding.ADBException("ModifiedBy cannot be null!!");
                                    }
                                    elementList.add(localModifiedBy);
                                }
                            attribList.add(
                            new javax.xml.namespace.QName("","searchspec"));
                            
                                      attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSearchspec));
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DelegatedUserQuery parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DelegatedUserQuery object =
                new DelegatedUserQuery();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DelegatedUserQuery".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DelegatedUserQuery)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    // handle attribute "searchspec"
                    java.lang.String tempAttribSearchspec =
                        
                                reader.getAttributeValue(null,"searchspec");
                            
                   if (tempAttribSearchspec!=null){
                         java.lang.String content = tempAttribSearchspec;
                        
                                                 object.setSearchspec(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribSearchspec));
                                            
                    } else {
                       
                    }
                    handledAttributes.add("searchspec");
                    
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedDate").equals(reader.getName())){
                                
                                                object.setModifiedDate(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedDate").equals(reader.getName())){
                                
                                                object.setCreatedDate(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedById").equals(reader.getName())){
                                
                                                object.setModifiedById(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedById").equals(reader.getName())){
                                
                                                object.setCreatedById(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModId").equals(reader.getName())){
                                
                                                object.setModId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Id").equals(reader.getName())){
                                
                                                object.setId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserId").equals(reader.getName())){
                                
                                                object.setUserId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","LastName").equals(reader.getName())){
                                
                                                object.setLastName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","FirstName").equals(reader.getName())){
                                
                                                object.setFirstName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UserRole").equals(reader.getName())){
                                
                                                object.setUserRole(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Alias").equals(reader.getName())){
                                
                                                object.setAlias(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","StartDate").equals(reader.getName())){
                                
                                                object.setStartDate(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ExternalSystemId").equals(reader.getName())){
                                
                                                object.setExternalSystemId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","RespId").equals(reader.getName())){
                                
                                                object.setRespId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","Role").equals(reader.getName())){
                                
                                                object.setRole(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFirstName").equals(reader.getName())){
                                
                                                object.setUpdatedByFirstName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByLastName").equals(reader.getName())){
                                
                                                object.setUpdatedByLastName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByUserSignInId").equals(reader.getName())){
                                
                                                object.setUpdatedByUserSignInId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByAlias").equals(reader.getName())){
                                
                                                object.setUpdatedByAlias(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByFullName").equals(reader.getName())){
                                
                                                object.setUpdatedByFullName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByIntegrationId").equals(reader.getName())){
                                
                                                object.setUpdatedByIntegrationId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByExternalSystemId").equals(reader.getName())){
                                
                                                object.setUpdatedByExternalSystemId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","UpdatedByEMailAddr").equals(reader.getName())){
                                
                                                object.setUpdatedByEMailAddr(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFirstName").equals(reader.getName())){
                                
                                                object.setCreatedByFirstName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByLastName").equals(reader.getName())){
                                
                                                object.setCreatedByLastName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByUserSignInId").equals(reader.getName())){
                                
                                                object.setCreatedByUserSignInId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByAlias").equals(reader.getName())){
                                
                                                object.setCreatedByAlias(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByFullName").equals(reader.getName())){
                                
                                                object.setCreatedByFullName(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByIntegrationId").equals(reader.getName())){
                                
                                                object.setCreatedByIntegrationId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByExternalSystemId").equals(reader.getName())){
                                
                                                object.setCreatedByExternalSystemId(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedByEMailAddr").equals(reader.getName())){
                                
                                                object.setCreatedByEMailAddr(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","CreatedBy").equals(reader.getName())){
                                
                                                object.setCreatedBy(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Query","ModifiedBy").equals(reader.getName())){
                                
                                                object.setModifiedBy(QueryType.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
        public static class UserExecute_Output
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:crmondemand/ws/ecbs/user/10/2004",
                "UserExecute_Output",
                "ns3");

            

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:crmondemand/ws/ecbs/user/10/2004")){
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        

                        /**
                        * field for ListOfUser
                        */

                        
                                    protected ListOfUserData localListOfUser ;
                                

                           /**
                           * Auto generated getter method
                           * @return ListOfUserData
                           */
                           public  ListOfUserData getListOfUser(){
                               return localListOfUser;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ListOfUser
                               */
                               public void setListOfUser(ListOfUserData param){
                            
                                            this.localListOfUser=param;
                                    

                               }
                            

     /**
     * isReaderMTOMAware
     * @return true if the reader supports MTOM
     */
   public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
        boolean isReaderMTOMAware = false;
        
        try{
          isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
        }catch(java.lang.IllegalArgumentException e){
          isReaderMTOMAware = false;
        }
        return isReaderMTOMAware;
   }
     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
                org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

                 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
                       UserExecute_Output.this.serialize(MY_QNAME,factory,xmlWriter);
                 }
               };
               return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
               MY_QNAME,factory,dataSource);
            
       }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       final org.apache.axiom.om.OMFactory factory,
                                       org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,factory,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               final org.apache.axiom.om.OMFactory factory,
                               org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();

                    if ((namespace != null) && (namespace.trim().length() > 0)) {
                        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                        if (writerPrefix != null) {
                            xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                        } else {
                            if (prefix == null) {
                                prefix = generatePrefix(namespace);
                            }

                            xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                            xmlWriter.writeNamespace(prefix, namespace);
                            xmlWriter.setPrefix(prefix, namespace);
                        }
                    } else {
                        xmlWriter.writeStartElement(parentQName.getLocalPart());
                    }
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:crmondemand/ws/ecbs/user/10/2004");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":UserExecute_Output",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "UserExecute_Output",
                           xmlWriter);
                   }

               
                   }
               
                                            if (localListOfUser==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                            }
                                           localListOfUser.serialize(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser"),
                                               factory,xmlWriter);
                                        
                    xmlWriter.writeEndElement();
               

        }

         /**
          * Util method to write an attribute with the ns prefix
          */
          private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
              if (xmlWriter.getPrefix(namespace) == null) {
                       xmlWriter.writeNamespace(prefix, namespace);
                       xmlWriter.setPrefix(prefix, namespace);

              }

              xmlWriter.writeAttribute(namespace,attName,attValue);

         }

        /**
          * Util method to write an attribute without the ns prefix
          */
          private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                      java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
                if (namespace.equals(""))
              {
                  xmlWriter.writeAttribute(attName,attValue);
              }
              else
              {
                  registerPrefix(xmlWriter, namespace);
                  xmlWriter.writeAttribute(namespace,attName,attValue);
              }
          }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


         /**
         * Register a namespace prefix
         */
         private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);

                if (prefix == null) {
                    prefix = generatePrefix(namespace);

                    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                        prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                    }

                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }

                return prefix;
            }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                            elementList.add(new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data",
                                                                      "ListOfUser"));
                            
                            
                                    if (localListOfUser==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfUser cannot be null!!");
                                    }
                                    elementList.add(localListOfUser);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static UserExecute_Output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            UserExecute_Output object =
                new UserExecute_Output();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"UserExecute_Output".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (UserExecute_Output)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                 
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:/crmondemand/xml/User/Data","ListOfUser").equals(reader.getName())){
                                
                                                object.setListOfUser(ListOfUserData.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
          
            private  org.apache.axiom.om.OMElement  toOM(crmondemand.UserStub.UserQueryPage_Input param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(crmondemand.UserStub.UserQueryPage_Input.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(crmondemand.UserStub.UserQueryPage_Output param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(crmondemand.UserStub.UserQueryPage_Output.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(crmondemand.UserStub.UserInsert_Input param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(crmondemand.UserStub.UserInsert_Input.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(crmondemand.UserStub.UserInsert_Output param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(crmondemand.UserStub.UserInsert_Output.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(crmondemand.UserStub.UserExecute_Input param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(crmondemand.UserStub.UserExecute_Input.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(crmondemand.UserStub.UserExecute_Output param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(crmondemand.UserStub.UserExecute_Output.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(crmondemand.UserStub.UserUpdate_Input param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(crmondemand.UserStub.UserUpdate_Input.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(crmondemand.UserStub.UserUpdate_Output param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(crmondemand.UserStub.UserUpdate_Output.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, crmondemand.UserStub.UserQueryPage_Input param, boolean optimizeContent)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(crmondemand.UserStub.UserQueryPage_Input.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, crmondemand.UserStub.UserInsert_Input param, boolean optimizeContent)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(crmondemand.UserStub.UserInsert_Input.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, crmondemand.UserStub.UserExecute_Input param, boolean optimizeContent)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(crmondemand.UserStub.UserExecute_Input.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, crmondemand.UserStub.UserUpdate_Input param, boolean optimizeContent)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(crmondemand.UserStub.UserUpdate_Input.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             


        /**
        *  get the default envelope
        */
        private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){
        return factory.getDefaultEnvelope();
        }


        private  java.lang.Object fromOM(
        org.apache.axiom.om.OMElement param,
        java.lang.Class type,
        java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

        try {
        
                if (crmondemand.UserStub.UserQueryPage_Input.class.equals(type)){
                
                           return crmondemand.UserStub.UserQueryPage_Input.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (crmondemand.UserStub.UserQueryPage_Output.class.equals(type)){
                
                           return crmondemand.UserStub.UserQueryPage_Output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (crmondemand.UserStub.UserInsert_Input.class.equals(type)){
                
                           return crmondemand.UserStub.UserInsert_Input.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (crmondemand.UserStub.UserInsert_Output.class.equals(type)){
                
                           return crmondemand.UserStub.UserInsert_Output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (crmondemand.UserStub.UserExecute_Input.class.equals(type)){
                
                           return crmondemand.UserStub.UserExecute_Input.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (crmondemand.UserStub.UserExecute_Output.class.equals(type)){
                
                           return crmondemand.UserStub.UserExecute_Output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (crmondemand.UserStub.UserUpdate_Input.class.equals(type)){
                
                           return crmondemand.UserStub.UserUpdate_Input.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (crmondemand.UserStub.UserUpdate_Output.class.equals(type)){
                
                           return crmondemand.UserStub.UserUpdate_Output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
        } catch (java.lang.Exception e) {
        throw org.apache.axis2.AxisFault.makeFault(e);
        }
           return null;
        }



    
   }
   